<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[9月19日 linux 互传文件 用户管理及配置密码文件]]></title>
    <url>%2F2018%2F12%2F23%2F9%E6%9C%8819%E6%97%A5linux%20%E4%BA%92%E4%BC%A0%E6%96%87%E4%BB%B6%20%E5%8F%8A%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86%20%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[linux和windows互传文件* 首先需要安装一个包 yum install -y lrzsz * 安装完成之后输入 sz 111.txt 就会弹出一个框，选择把文件放到windows的哪一个文件夹下。 用户配置文件和密码文件* cat /etc/passwd 用户核心的配置文件 如果密码文件如果删除了，所有用户就登不上去了。 [root@aming1 ~]# cat /etc/passwdroot:x:0:0:root:/root:/bin/bashbin:x:1:1:bin:/bin:/sbin/nologindaemon:x:2:2:daemon:/sbin:/sbin/nologinadm:x:3:4:adm:/var/adm:/sbin/nologinlp:x:4:7:lp:/var/spool/lpd:/sbin/nologinsync:x:5:0:sync:/sbin:/bin/syncshutdown:x:6:0:shutdown:/sbin:/sbin/shutdownhalt:x:7:0:halt:/sbin:/sbin/haltmail:x:8:12:mail:/var/spool/mail:/sbin/nologinoperator:x:11:0:operator:/root:/sbin/nologingames:x:12:100:games:/usr/games:/sbin/nologinftp:x:14:50:FTP User:/var/ftp:/sbin/nologinnobody:x:99:99:Nobody:/:/sbin/nologinsystemd-bus-proxy:x:999:997:systemd Bus Proxy:/:/sbin/nologinsystemd-network:x:192:192:systemd Network Management:/:/sbin/nologindbus:x:81:81:System message bus:/:/sbin/nologinpolkitd:x:998:996:User for polkitd:/:/sbin/nologintss:x:59:59:Account used by the trousers package to sandbox the tcsd daemon:/dev/null:/sbin/nologinpostfix:x:89:89::/var/spool/postfix:/sbin/nologinsshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologinchrony:x:997:995::/var/lib/chrony:/sbin/nologinaming:x:1000:1000::/home/aming:/bin/bashaming2:x:1001:1001::/home/aming2:/bin/bash * /etc/passwd 用“ : ”分为7段，每个字段都有具体的含义 ·第一个字段为用户名·第二字段之前是存放的是该账号的密码.早期的Unix系统口令确实存放在这里，因为安全因素，后来就存放到了/etc/shadow中了，所·以用“x”来代替·第三个字段为一个数字，表示用户的“uid”。·第四个字段也是数字，表示为组标识号，称为“gid”·第五个字段为注释说明，没有实际意义。·第七段是用户的shell。如果是/sbin/nologin。则不允许登陆。 * etc/shadow 密码配置文件 [root@aming1 ~]# cat /etc/shadowroot:$6$TPvL1jnqi26yNubi$CnNodDe5nuT4WHIybkUvhS0.lSBNJUvYTov8VtEztJ0LKjo9cvAE2yFSzhzqom6bttBzgdC/9s7l8LDPmGjSD1::0:99999:7:::bin::17110:0:99999:7:::daemon::17110:0:99999:7:::adm::17110:0:99999:7:::lp::17110:0:99999:7:::sync::17110:0:99999:7:::shutdown::17110:0:99999:7:::halt::17110:0:99999:7:::mail::17110:0:99999:7:::operator::17110:0:99999:7:::games::17110:0:99999:7:::ftp::17110:0:99999:7:::nobody::17110:0:99999:7:::systemd-bus-proxy:!!:17607::::::systemd-network:!!:17607::::::dbus:!!:17607::::::polkitd:!!:17607::::::tss:!!:17607::::::postfix:!!:17607::::::sshd:!!:17607::::::chrony:!!:17607::::::aming:!!:17666:0:99999:7:::aming2:!!:17666:0:99999:7::: * /etc/shadow 分为9个字段。 ·第一段为用户名，与/etc/passwd 对应·第二个字段为用户密码。是加密的。使用SHA-512加密方式加密的密码。无法反编译，即使相同的密码加密字符也会不同。如果!!代表密码为空是不能登陆的，如果是*则代表该用户是锁定的。·第三个字段是上次更改密码的日期。这个数字以1970年1月1日和上次更改密码的日期计算而来。单位是“天”。·第四段是要过多少天才可以更改密码。默认是0，就不受限制。·第五段为密码多少天后到期。·第六段为密码到期前多少天来进行提醒。·第七段为账号失效期限，比如设置为3，如果密码到期，再过3天，这个账号会被锁定而失效。·第8段为生命周期，也是从1970年1月1日开始算的，如果过期账号则作废。·第九段是保留段，没有实际意义。在这里第二段的加密字符即使密码相同加密字符也是不一样的，采用的是SHA-512加密方式。 aming:$6$MesREyTp$J/IgN6.oT7uBJ292J.LLGC1dMQkN7ckgq0Olz/zDchzs6rQdWSee2o0fiJt8wPIHCNX4bNTOrsQsqsCTqhSPm.:17670:0:99999:7:::aming2:$6$l.NeS.LF$EQGwaMvyhvJnAz0eoAbUDXsTwEwbHvAOlqjFHCTWOUykSf0mzC6j0HwEFzUpvcSOZM6R2.jvN8qTsupdC2ho4.:17670:0:99999:7::: 用户管理用法如下useradd 增加用户* -u：自定义UID * -g：自定义用户组 * -d: 自定义用户家目录 * -M：表示不建立家目录 * -s ：表示自定义shell 添加用户，默认uid是从1000开始的。 [root@aming1 ~]# useradd aming3[root@aming1 ~]# tail -n3 /etc/passwdaming:x:1000:1000::/home/aming:/bin/bashaming2:x:1001:1001::/home/aming2:/bin/bashaming3:x:1002:1002::/home/aming3:/bin/bash[root@aming1 ~]# -u 与 -g 自定义UID与用户组 [root@aming1 ~]# tail -3 /etc/groupaming:x:1000:aming2:x:1001:aming3:x:1002:[root@aming1 ~]# useradd -u 1111 -g aming linyu1[root@aming1 ~]# tail -n2 /etc/passwdaming3:x:1002:1002::/home/aming3:/bin/bashlinyu1:x:1111:1000::/home/linyu1:/bin/bash 用 -d -s 自定义家目录与shell [root@aming1 ~]# useradd -u 1113 -g aming -d /home/linyu111 -s /sbin/nologin linyu3[root@aming1 ~]# tail -n2 /etc/passwdlinyu2:x:1112:1000::/home/aming:/sbin/nologinlinyu3:x:1113:1000::/home/linyu111:/sbin/nologin -M：表示不建立家目录(并不是该用户没有家目录，只是没有创建) [root@aming1 ~]# useradd -M user1[root@aming1 ~]# tail -n1 /etc/passwduser1:x:1114:1114::/home/user1:/bin/bash[root@aming1 ~]# ls /home/aming aming2 aming3 linyu1 linyu111 用户的家目录是可以更改的。可vi编辑etc/passwd 直接更改，家目录是可以手动创建的。但是新建用户的家目录光有空文件夹不行，里面还要有bash ，不然会显示不正常。,在ls -la /etc/skel/ 有用户配置文件的模板，这里有模板，cp到新建的家目录里就可以了。然后赋予该目录有该用户与组的权限！ [root@aming1 ~]# ls -la /etc/skel/总用量 24drwxr-xr-x. 2 root root 62 3月 17 18:59 .drwxr-xr-x. 77 root root 8192 5月 19 15:02 ..-rw-r–r–. 1 root root 18 8月 3 2016 .bash_logout-rw-r–r–. 1 root root 193 8月 3 2016 .bash_profile-rw-r–r–. 1 root root 231 8月 3 2016 .bashrc cp /etc/skel/.bash* /home/useruserdel 删除用户的命令。 [root@aming1 ~]# userdel linyu3[root@aming1 ~]# tail -n3 /etc/passwdlinyu1:x:1111:1000::/home/linyu1:/bin/bashlinyu2:x:1112:1000::/home/aming:/sbin/nologinuser1:x:1114:1114::/home/user1:/bin/bash[root@aming1 ~]# ls /home/aming aming2 aming3 linyu1 linyu111 可以看到删除用户后，用户的家目录并没有被删除。（留给管理员，确定这个家目录没有用了之后在手动删掉。） * userdel -r 选项可以连同用户家目录同时删除。 用户组管理 * groupadd 增加组命令 [root@aming1 ~]# groupadd grp1[root@aming1 ~]# tail -n1 /etc/groupgrp1:x:1002: * 用-g自定义新建用户组的gid 。groupadd -g 1006 group4 [root@localhost ~]# groupadd -g 1006 group4[root@localhost ~]# tail -n5 /etc/groupchrony:x:995:grp1:x:1000:grp2:x:1001:grp3:x:1002:group4:x:1006:一般新建的组或者用户都是从1000 gid/uid开始的。1000以前都是为系统来保留的。 * 用户组管理文件 （还有用户组的密码文件在etc/gshadow） [root@aming1 ~]# cat /etc/grouproot:x:0:bin:x:1:daemon:x:2:sys:x:3:adm:x:4:games:x:20:tape:x:30:video:x:39:ftp:x:50:lock:x:54:audio:x:63: utempter:x:35:ssh_keys:x:999:input:x:998:systemd-journal:x:190:systemd-bus-proxy:x:997:systemd-network:x:192:dbus:x:81:polkitd:x:996:tss:x:59:dip:x:40:postdrop:x:90:postfix:x:89:sshd:x:74:chrony:x:995:aming:x:1000:aming2:x:1001:[root@aming1 ~]# * groupdel 删除组命令 [root@aming1 ~]# groupdel grp1[root@aming1 ~]# tail -n2 /etc/grogroff/ group group-[root@aming1 ~]# tail -n2 /etc/groupaming:x:1000:aming2:x:1001: 不能直接删除有用户的组。需要先删除用户，在删除用户组。 * 系统自动备份用户，用户组管理及密码文件 [root@localhost ~]# ls /etc/passwd/etc/passwd[root@localhost ~]# ls /etc/passwdpasswd passwd-[root@localhost ~]# ls /etc/shadowshadow shadow-[root@localhost ~]# ls /etc/shadowshadow shadow-[root@localhost ~]# ls /etc/gsgshadow gshadow- gss/后面带“-”号的文件就是系统自动备份的文件。如果误删了配置文件可以copy一份带“-”号的进行恢复。不过备份文件可能稍有误差，比如刚刚建立的用户还没有备份。恢复的时候就没有哪些没来得及备份的用户。usermod 更改用户属性的命令以下是用法： * usermod – u 111 username 更改uid * usermod -g 1010 username 更改 gid * usermod –d /home/safasfa username 更改家目录 * usermod -s /sbin/nologin username 更改shell * usermod –G 添加扩展组 * 每个用户可以通过 id username命令来查看一个用户的uid，gid,组，扩展组的。 [root@aming1 ~]# id aming2uid=1001(aming2) gid=1001(aming2) 组=1001(aming2) * usermod –G 添加扩展组 [root@aming1 ~]# usermod -G aming aming2 [root@aming1 ~]# id aming2uid=1001(aming2) gid=1001(aming2) 组=1001(aming2),1000(aming) 增加多个扩展组， [root@aming1 ~]# usermod -G aming,grp1 aming2 [root@aming1 ~]# id aming2uid=1001(aming2) gid=1001(aming2) 组=1001(aming2),1000(aming),1115(grp1) 如果不像上面那样添加，直接-G添加就会把之前的扩展组替换掉。用 -g 则不会。]]></content>
      <tags>
        <tag>工作日志</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[9月18日 2.23/24/25 find 命令 2.26 文件名后缀]]></title>
    <url>%2F2018%2F12%2F23%2F9%E6%9C%8818%E6%97%A5%20find%20%E5%91%BD%E4%BB%A4%20%E6%96%87%E4%BB%B6%E5%90%8D%E5%90%8E%E7%BC%80%2F</url>
    <content type="text"><![CDATA[查找文件命令 find作用： 如果只知道一个文件的大概位置。就可以用find来查找。用法：find 位置 - type 类型 文件名[root@aminglinux ~]# find /etc/ -name “sshd_config”/etc/ssh/sshd_config * 如果想查找etc下包含sshd的所有目录和文件 [root@aminglinux ~]# find /etc/ -name “sshd*”/etc/rc.d/init.d/sshd/etc/pam.d/sshd/etc/sysconfig/sshd/etc/ssh/sshd_config * 用find -type d -name 只查找目录 [root@aminglinux ~]# find /etc/ -type d -name “sshd*”[root@aminglinux ~]# * 只查找文件 find -type f -name “sshd*” [root@aminglinux ~]# find /etc/ -type f -name “sshd*”/etc/rc.d/init.d/sshd/etc/pam.d/sshd/etc/sysconfig/sshd/etc/ssh/sshd_config[root@aminglinux ~]#find其他用法 三个time -mtime -ctime -atime * 用法 find / -type -name -mtime -ctime -atime * 首先用stat 命令，查看一个文件的详细信息 [root@aminglinux ~]# stat 333.txtFile: “333.txt”Size: 0 Blocks: 0 IO Block: 4096 普通空文件 Device: 803h/2051d Inode: 791054 Links: 1Access: (0644/-rw-r–r–) Uid: ( 0/ root) Gid: ( 0/ root)Access最近访问: 2017-03-25 04:39:31.455979690 +0800Modify最近更改: 2017-03-25 04:39:31.455979690 +0800Change最近改动: 2017-03-25 04:39:31.455979690 +0800 [root@aminglinux ~]#Access最近访问是：-atime （访问一次就会变化）Modify最近更改是：-mtine （改文件内容）Change最近改动是：-ctime （改权限如果改动文件内容ctime也会跟着变化） * 了解了 三个time后，可以用进行find 利用三个time查找。 * find / -type f -mtime -1(一天以内的意思) 如下可以看到一天之内更改的文件非常多 [root@aminglinux ~]# find / -type f -mtime -1/proc/1516/pagemap/proc/1516/attr/current/proc/1516/attr/prev/proc/1516/attr/exec/proc/1516/attr/fscreate/proc/1516/attr/keycreate/proc/1516/attr/sockcreate/proc/1516/wchan/proc/1516/stack/proc/1516/schedstat/proc/1516/cpuset/proc/1516/cgroup/proc/1516/oom_score/proc/1516/oom_adj/proc/1516/oom_score_adj/proc/1516/loginuid/proc/1516/sessionid/proc/1516/coredump_filter/proc/1516/io * find / -type f -mtime +1(一天以上的意思) * find / -type f -mmin -60(查看60分钟以内的) * 还可以加多个判断条件，起到并且的意思,首先要是文件，然后要一天内改动的，然后要名字包含.conf的 find /etc/ -type f -ctime -1 -name “*.conf” [root@aming1 ~]# find /etc/ -type f -ctime -1 -name “*.conf”/etc/resolv.conf * 使用 -o 还可以加多个判断条件，起到或者的意思，查找文件，或者一天内改动，或者名字包含.conf [root@aming1 ~]# find /etc/ -type f -o -ctime -1 -o -name “*.conf”find常用选项 -type -name -mtime 偶尔使用 -o * 查找一个文件的硬链接 find / -inum 33623781 [root@aming1 ~]# touch 2.txt[root@aming1 ~]# ln 2.txt /tmp/2.txt_heard[root@aming1 ~]# ls -li 总用量 850332746 drwxr-xr-x. 2 root root 19 5月 15 21:21 11133599786 -rw-r–r–. 1 root root 130 5月 15 21:09 1.txt33623781 -rw-r–r–. 2 root root 0 5月 16 10:50 2.txt33574987 -rw——-. 1 root root 1422 3月 17 19:03 anaconda-ks.cfg[root@aming1 ~]# find / -inum 33623781/root/2.txt/tmp/2.txt_heard[root@aming1 ~]# * 查找一个小时内改动的文件 [root@aming1 ~]# find /root/ -type f -mmin -60/root/2.txtfind 选项exec * 作用：把前面查找出的内容，作为参数在后面让命令执行。 * 用法 find /root/ -type f -mmin -120 -exec ls -l {} ; [root@aming1 ~]# find /root/ -type f -mmin -60/root/2.txt[root@aming1 ~]# find /tmp/ -type f -mmin -120 -exec ls -l {} \;-rw-r–r–. 2 root root 0 5月 16 10:50 /tmp/2.txt_heard 文件名后缀首先在linux系统下是区分命令大小写的。[root@aming1 ~]# LS-bash: LS: 未找到命令在linux系统下文件也是有后缀名的，但是后缀名并不代表这是个什么文件类型。一般会压缩文件为.gz 配置文件为 .conf 这个不绝对，后缀并不代表什么。]]></content>
      <tags>
        <tag>工作日志</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[9月17日 特殊权限 set_uid set_gid stick_bit 软链接与硬链接]]></title>
    <url>%2F2018%2F12%2F17%2F9%E6%9C%8817%E6%97%A5%20%20%E7%89%B9%E6%AE%8A%E6%9D%83%E9%99%90%20set_uid%20%20set_gid%20stick_bit%2F</url>
    <content type="text"><![CDATA[特殊权限 set_uidset_uid 的作用：可以在普通用户用到这个命令的时候临时授予普通用户拥有root权限。 之前用到的一个命令就是更改密码的时候用到的passwd命令[root@aminglinux-01 ~]# which passwd/usr/bin/passwd[root@aminglinux-01 ~]# ls -l /usr/bin/passwd-rwsr-xr-x. 1 root root 27832 6月 10 2014 /usr/bin/passwd 可以看到这个文件是红色的，并且在所有者的第三位权限是个s 这个权限是rws，这个s的权限就是：set_uid我们平时普通用户也是可以用passwd来更改密码的。那首先看看密码文件的权限是怎么样的[root@aminglinux-01 ~]# ls -l /etc/shadow———-. 1 root root 662 8月 9 21:38 /etc/shadow 所有人都没有任何权限，（ 当然root是有至高无上的权利的） 可以看到这个保存密码的文件是非常严谨的，但是普通用户依然有修改密码的权限。所谓的set_uid就是在执行命令时临时赋予root权限给没权限的用户。 给一个文件设置set_uid前提是这个文件是一个可执行的2进制文件。file 加命令的绝对路径，可以查看文件类型，比如是可读的test文件还是不可读的二进制文,如下显示的就是二进制文件。[root@aming1 ~]# file /usr/bin/passwd /usr/bin/passwd: setuid ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.32, BuildID[sha1]=1e5735bf7b317e60bcb907f1989951f6abd50e8d, stripped[root@aming1 ~]#怎样添加set_uid的权限：chmod u+s 可执行加二进制文件 比如给ls添加set_uid权限[root@aminglinux-01 ~]# which lsalias ls=’ls –color=auto’/usr/bin/ls [root@aminglinux-01 ~]# chmod u+s /usr/bin/ls[root@aminglinux-01 ~]# ls -l /usr/bin/ls-rwsr-xr-x. 1 root root 117656 11月 6 2016 /usr/bin/ls 创建一个普通用户，用普通用户运行ls命令查看root目录是没有权限的[root@aming1 ~]# useradd aming[root@aming1 ~]# su - aming[aming@aming1 ~]$ ls /root/ls: 无法打开目录/root/: 权限不够 返回root用户给ls添加上set_uid之后在试试,就可以用ls命令了，就是临时用了一下root权限。。[aming@aming1 ~]$ su - root密码：上一次登录：二 5月 15 20:44:43 CST 2018从 192.168.159.1pts/0 上[root@aming1 ~]# chmod u+s /usr/bin/ls[root@aming1 ~]# ls -l /usr/bin/ls-rwsr-xr-x. 1 root root 117656 11月 6 2016 /usr/bin/ls[root@aming1 ~]# su - aming上一次登录：二 5月 15 22:35:46 CST 2018pts/0 上[aming@aming1 ~]$ ls /root/111 1.txt anaconda-ks.cfg[aming@aming1 ~]$ 当权限是大写的S时候，说明文件之前没有x权限。比如下面[root@aming1 ~]# chmod u=rws /usr/bin/ls[root@aming1 ~]# ls -l /usr/bin/ls-rwSr-xr-x. 1 root root 117656 11月 6 2016 /usr/bin/ls[root@aming1 ~]# chmod u+x /usr/bin/ls[root@aming1 ~]# ls -l /usr/bin/ls-rwsr-xr-x. 1 root root 117656 11月 6 2016 /usr/bin/ls 目录也是可以加set_uid权限的，不过没有什么意义，目录有不能执行。 特殊权限 set_gid 功能：这个特殊权限与set_uid类似，只不过作用在用户组的权限上。普通用户临时拥有root组的权限。 用法：chmod g+s 可执行加二进制文件 可以再用ls命令设置看一下，s权限作用在了用户组的位置上，文件显示为黄色。 目录也是可以加上set_gid 权限的。并且在加上权限后，更改目录的所属组时候，在此目录新建的子文件或者子目录，所属组都是跟父目录保持一致的。取消set_gid后，在创建就不会跟父目录保持一致。[root@aminglinux-01 ~]# chown linyu aaa/[root@aminglinux-01 ~]# chmod g+s aaa/[root@aminglinux-01 ~]# ls -ld aaa/drwxr-sr-x. 2 linyu root 6 8月 9 22:08 aaa/[root@aminglinux-01 ~]# mkdir aaa/aming11.txt[root@aminglinux-01 ~]# mkdir aaa/aming12/[root@aminglinux-01 ~]# ls -l aaa/总用量 0drwxr-sr-x. 2 root linyu 6 8月 10 19:47 aming11.txtdrwxr-sr-x. 2 root linyu 6 8月 10 19:47 aming12特殊权限 stick_bit 功能：特殊权限是“t”,这个t就是防删除位。防止某个用户创建的文件被其他用户删除。root用户除外。 用法：chmod o+t 目录 这个用到的相对比较多，/tmp/目录就是有stick_bit权限的。[root@aminglinux-01 ~]# ls -ld /tmp/drwxrwxrwt. 13 root root 4096 8月 10 19:37 /tmp/ /tmp/最后一位权限是“t”,这个t就是防删除位。 /tmp/默认是777权限，这样每一个用户都可以更改删除文件，这样如果一个用户把另一个用户的文件删除了，这样就乱套了。所以有了stick_bit权限，其他用户看是可以得，更改，删，是不可以的。首先用aming用户在tmp下创建[root@aming1 ~]# su - aming上一次登录：二 5月 15 22:38:42 CST 2018pts/0 上[aming@aming1 ~]$ cd /tmp/[aming@aming1 tmp]$ lssystemd-private-f5ee0732c20c480e948ac5116d7bc899-vmtoolsd.service-ZjwF4b[aming@aming1 tmp]$ touch /tmp/1.txt 然后切换为aming2用户对tmp下1.txt进行删除，追加，更改，都是不可以的。[root@aming1 ~]# su - aming2—title: 9月6日 1.6-1.8 配置ip tags: 工作日志最后一次失败的登录：二 5月 15 23:10:37 CST 2018pts/0 上最有一次成功登录后有 1 次失败的登录尝试。[aming2@aming1 ~]$ vi /tmp/1.txt ———————————————-此处vi编辑会提示该文件为只读。[aming2@aming1 ~]$ head -n2 /etc/passwd &gt;&gt; /tmp/1.txt-bash: /tmp/1.txt: 权限不够[aming2@aming1 ~]$ rm /tmp/1.txtrm：是否删除有写保护的普通空文件 “/tmp/1.txt”？yrm: 无法删除”/tmp/1.txt”: 不允许的操作 父目录的权限决定子目录/文件是否能被改动。果文件或目录设置了stick_bit权限，在文件或目录权限777的情况下。其他用户也只能修改，不能删除。更改特殊权限的另一种方式：用权限代表的数字权限更改 set_uid set_gid stick_bit 用数字权限表示分别就是 4 2 1 假如之前的权限是755 ，chmod u+s 用数字表示就是 chmod 4755 ,特殊权限的数字直接加到普通权限的前面 。 chmod g+s 用数字表示就是2755chmod o+t 用数字表示就是1755 软链接软连接就像windows里的快捷方式。用法：ln -s 文件 软连接文件 比如：给yum.log 做一个软链接[root@aminglinux-01 ~]# ln -s /tmp/yum.log /root/aaa/yum.log[root@aminglinux-01 ~]# ls -l /root/aaa/总用量 0-rw-r–r–. 1 root root 0 8月 10 19:44 aming1.txtlrwxrwxrwx. 1 root root 12 8月 10 23:04 yum.log -&gt; /tmp/yum.log[root@aminglinux-01 ~]#注意事项： 删除软连接的时候，如果软连接是个目录，删除时敲软连接名字时候 候千万别打最后面的斜杠，否则删除的就是被链接目录的本身。 软连接如果被删除源文件并不会受到任何影响。但是源文件被删除，或者目录有改动，那么软连接文件会失效。 /bin就是usr/bin的软链接。[root@aminglinux-01 ~]# ls -l /binlrwxrwxrwx. 1 root root 7 7月 31 22:54 /bin -&gt; usr/bin 软链接的优点：可以非常的节省空间。而且快捷方便。可以把另一块大空间的磁盘分区软链接到当前正在使用快不够用的文件夹中，实现快捷添加磁盘空间。软链接文件也是有大小的，它的大小根据源文件路径的长度来变化，源文件所在目录越长越深，其软连接的大小就会越大，当然在大也就是几B大小。 软链接不仅可以链接文件，还可以链接目录[root@aminglinux-01 ~]# ln -s /tmp/111 /root/aming[root@aminglinux-01 ~]# ls -l /root/aminglrwxrwxrwx. 1 root root 8 8月 10 23:12 /root/aming -&gt; /tmp/111[root@aminglinux-01 ~]# 软链接有绝对路径页游相对路径，相对路径仅限于当前目录。相对路径有一些弊端。尽量使用绝对路径。因为软连接文件一旦移动位置就会导致软连接失效。 软链接的用途例子：如果一个分区空间满了，而服务只读那个分区。这样就可以把当前分区的文件cp到更大的分区里面。然后做一个软链接到当前分区。这样服务依然可以读取到文件。还有效的利用了磁盘空间。硬链接 什么是硬链接： 硬链接支持对文件做硬链接。不支持目录。 硬链接的inode号，时间，大小都是一样的。用法： ln 源文件 硬链接 创建一个456.txt文件的硬链接,如下：[root@aminglinux-01 ~]# ln 456.txt 456_heard.txt[root@aminglinux-01 ~]# ls -li总用量 833575032 -rw-rw-r–. 2 root root 0 8月 9 22:14 456_heard.txt33575032 -rw-rw-r–. 2 root root 0 8月 9 22:14 456.txt[root@aminglinux-01 ~]# 可以看到硬链接的源文件456.txt和硬链接后的文件heard_456.txt,两者inode号，时间，大小都是一样的。 所以硬链接实际上是两个文件是同一个文件。不分源文件和链接文件。两者是互相硬链接。删除其中一个并不影响文件本身。 一个文件可以创建多个硬链接。 文件名只是文件本身的一个外皮。真正的文件本身是inode号记住的文件。删除其中一个外皮对文件本身并没有影响。但是外皮需要最后留一个。否则这个文件就真的被删除啦。 硬链接是不会占用双份空间的，因为使用相同的inode。 硬链接无法跨分区建立，因为每一个分区都有一套自己的inode，在格式化分区时都是预先设置好的。 无法手动硬链接目录。系统自带硬链接目录。]]></content>
      <tags>
        <tag>工作日志</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[9月14日 2.14 文件和目录权限chmod 2.15 更改所有者和所属组chown 2.16 umask 2.17 隐藏权限lsattr/chattr]]></title>
    <url>%2F2018%2F12%2F16%2F9%E6%9C%8814%E6%97%A5%202.14%20%E6%96%87%E4%BB%B6%E5%92%8C%E7%9B%AE%E5%BD%95%E6%9D%83%E9%99%90chmod%20%20%E6%9B%B4%E6%94%B9%E6%89%80%E6%9C%89%E8%80%85%E5%92%8C%E6%89%80%E5%B1%9E%E7%BB%84chown%20umask%20%E9%9A%90%E8%97%8F%E6%9D%83%E9%99%90lsattrchattr%2F</url>
    <content type="text"><![CDATA[之前学习的ls -l命令时候，学习了列出每个位置都是什么。[root@aming1 ~]# ls -l 111.txt-rw-r–r–. 1 root root 1008 5月 13 22:26 111.txt 开头除了第一位是文件类型外，后面九位都是权限位。 在inode使用量前面11位。第一位表示文件类型，后面九位表示文件权限，最后一个（.）是受制于selinux。如果关闭selinux，新建的文件或目录就会没有(.) 在九位权限位置里，前三位代表所有者权限，中间三位是所属组权限，后三位是其他用户权限。 其中rwxr 读 数字用4代表 w 写 数字用2代表 x 执行 数字用1代表 权限一般也用数字表示，比如764，就是所有者（u）rwx,所属组（g）rw-，其他用户（o）r–r+w+x=7rwxrwxrwx=777修改权限命令: chmod chmod 更改权限 change mode 的缩写 语法：chmod 777 文件/目录名字[root@aming1 ~]# ls -l 111.txt -rw-r–r–. 1 root root 1008 5月 13 22:26 111.txt[root@aming1 ~]# chmod 777 111.txt[root@aming1 ~]# ls -l 111.txt -rwxrwxrwx. 1 root root 1008 5月 13 22:26 111.txt 或者：chmod u=rwx,g=rw,o=r 文件/目录名字[root@aming1 ~]# ls -l 111.txt-rw-r–r–. 1 root root 1008 5月 13 22:26 111.txt[root@aming1 ~]# chmod 777 111.txt[root@aming1 ~]# ls -l 111.txt-rwxrwxrwx. 1 root root 1008 5月 13 22:26 111.txt[root@aming1 ~]# chmod u=rwx,g=rw,o=r 111.txt[root@aming1 ~]# ls -l 111.txt-rwxrw-r–. 1 root root 1008 5月 13 22:26 111.txt chmod -R操作只对目录或文件本身生效。如需目录及子文件子目录全部生效需要加-R加上-R 命令可以同时更改目录及目录下所有的权限。 [root@aminglinux-01 ~]# chmod 700 /tmp/aming1/[root@aminglinux-01 ~]# ls -l /tmp/ 总用量 236 -rwxr-xr-x. 1 root root 117656 8月 9 09:19 111drwx——. 3 root root 17 8月 9 09:23 aming1drwxr-xr-x. 4 root root 31 8月 9 09:34 aming2 [root@aminglinux-01 ~]# ls -l /tmp/aming1/总用量 0 drwxr-xr-x. 3 root root 30 8月 9 09:40 111[root@aminglinux-01 ~]# chmod -R 777 /tmp/aming1/[root@aminglinux-01 ~]# ls -l /tmp/aming1/总用量 0 drwxrwxrwx. 3 root root 30 8月 9 09:40 111[root@aminglinux-01 ~]# ls -l /tmp/ 总用量 236 -rwxr-xr-x. 1 root root 117656 8月 9 09:19 111 drwxrwxrwx. 3 root root 17 8月 9 09:23 aming1 drwxr-xr-x. 4 root root 31 8月 9 09:34 aming2 还有一个用法是 chmod a+x 文件/目录名字意思是u，g，o同时加上x权限。 a-x,就是全部去掉x权限。 也是可以，u+w，u-x，g+w，g-w等等都可以用。[root@aminglinux-01 ~]# chmod 700 /tmp/aming1/ [root@aminglinux-01 ~]# ls -l /tmp/总用量 236 drwx——. 3 root root 17 8月 9 09:23 aming1 [root@aminglinux-01 ~]# chmod a+x /tmp/aming1/[root@aminglinux-01 ~]# ls -l /tmp/总用量 236 drwx–x–x. 3 root root 17 8月 9 09:23 aming1 [root@aminglinux-01 ~]# chmod a-x /tmp/aming1/[root@aminglinux-01 ~]# ls -l /tmp/总用量 236 drw——-. 3 root root 17 8月 9 09:23 aming1 [root@aminglinux-01 ~]# 2.15 chown 更改所有者和所属组 chown = change owner 更改所有者 chown 不仅可以更改所有者，也可以更改所属组。 cat /etc/passwd 来查看系统用户都有哪些。 用法：chown 所有者:所属组 文件名/目录下面修改一下新建文件的所有者。[root@aminglinux-01 ~]# touch /tmp/lunyu.log[root@aminglinux-01 ~]# ls -l /tmp/lunyu.log-rw-r–r–. 1 root root 0 8月 9 21:45 /tmp/lunyu.log[root@aminglinux-01 ~]# chown linyu /tmp/lunyu.log[root@aminglinux-01 ~]# ls -l /tmp/lunyu.log-rw-r–r–. 1 linyu root 0 8月 9 21:45 /tmp/lunyu.log[root@aminglinux-01 ~]# 更改所属组命令：chgrp，用法同上。但是chown既可以更改所有者也可以同时或者单独更改所属组 chown 同时或者单独更改所属组[root@aminglinux-01 ~]# chown linyu:games /tmp/lunyu.log[root@aminglinux-01 ~]# ls -l /tmp/lunyu.log-rw-r–r–. 1 linyu games 0 8月 9 21:45 /tmp/lunyu.log [root@aminglinux-01 ~]# chown :root /tmp/lunyu.log[root@aminglinux-01 ~]# ls -l /tmp/lunyu.log-rw-r–r–. 1 linyu root 0 8月 9 21:45 /tmp/lunyu.log chown -R 命令同样可以一次性更改目录及子目录和文件的所有者和所属组。2.16 umask linux在创建一个文件或者目录时候都会有一个默认的权限。这个是怎么来的呢。 运行一下 umask [root@aminglinux-01 ~]# umask0022这个是root用户下的umask值，通过这个值可以确定文件以及目录默认是什么权限。 首先创建一个目录和文件。然后修改一下啊umask值，在创建一个目录和文件。然后对比一下看有什么联系。[root@aminglinux-01 ~]# touch 123.txt[root@aminglinux-01 ~]# mkdir aaa[root@aminglinux-01 ~]# ls -l总用量 8-rw-r–r–. 1 root root 0 8月 9 22:08 123.txtdrwxr-xr-x. 2 root root 6 8月 9 22:08 aaa 在0022时候，文件默认是：644，目录默认是：755[root@aminglinux-01 ~]# umask 002[root@aminglinux-01 ~]# umask0002[root@aminglinux-01 ~]# touch 456.txt[root@aminglinux-01 ~]# mkdir bbb[root@aminglinux-01 ~]# ls -l总用量 8-rw-r–r–. 1 root root 0 8月 9 22:08 123.txt-rw-rw-r–. 1 root root 0 8月 9 22:14 456.txtdrwxr-xr-x. 2 root root 6 8月 9 22:08 aaadrwxrwxr-x. 2 root root 6 8月 9 22:14 bbb[root@aminglinux-01 ~]#在0002时候，文件默认是：664，目录默认是：775 得出答案是：在0022时候，文件默认是：644，目录默认是：755在0002时候，文件默认是：664，目录默认是：775 首先目录，必须会有x权限，因为想查看这个目录，首先都要进入查看，所以有x权限。所以默认权限最大的话就是7.文件不需要必须有x权限，所以默认6就可以满足。 由此规律得出：目录：777-022=755 777-002=775 文件：666-022=644 666-002=664 这个规律合乎逻辑但是不一定是准确的。 如果我们设置umask 为 003。按照之前的算法666-003=663。实际上经过测试是664[root@aminglinux-01 ~]# umask 003[root@aminglinux-01 ~]# touch 888.txt[root@aminglinux-01 ~]# ls -l 888.txt-rw-rw-r–. 1 root root 0 8月 9 22:27 888.txt[root@aminglinux-01 ~]# 那么之前的算法就是有漏洞的。 正确的算法是：文件 666（rw-rw-rw-）- 003(——-wx)=rw-rw-r– 也就是664目录 777（rwxrwxrwx）- 002(——-w-)=rwxrwxr-x 也就是775 2.17 隐藏权限chattr 设置隐藏权限 用法：chattr +i 在文件以及目录+i权限时候，是不可以更改，移动，删除等操作，不能做任何操作 用法：chattr +a 在文件以及目录+a权限时候，是不能移动，删除等操作，但是文件可以追加内容，目录里可以新加文件或目录。 chattr -i 解除 i 的隐藏权限 chattr -a 解除 a 的隐藏权限首先给1.txt加上 i 的权限，可以ls -l 查看1.txt的权限并没有什么不同。[root@aming1 ~]# ls1.txt anaconda-ks.cfg[root@aming1 ~]# chattr +i 1.txt[root@aming1 ~]# ll 1.txt-rw-r–r–. 1 root root 111 5月 13 22:52 1.txt 然后vi编辑添加内容。会有如下提示,提示您正在编辑一个只读的文件。即使强制保存也会保存失败。 连强大的rm -f 都无法删除[root@aming1 ~]# rm -f 1.txtrm: 无法删除”1.txt”: 不允许的操作 移动更是不可以的[root@aming1 ~]# mv 1.txt 111.txtmv: 无法将”1.txt” 移动至”111.txt”: 不允许的操作 touch 也不可以。 如果给一个目录添加隐藏 i 权限，该目录也和文件一样不可以更改，创建新目录文件，删除。但是限制的只是目录本身，如果该目录设置权限之前原有的文件则可以追加文件内容。但不可以更改和删除。 chattr +a 试一下 a的隐藏权限。除了追加文件，可以成功[root@aming1 ~]# head -n2 /etc/passwd &gt;&gt; 1.txt[root@aming1 ~]# cat 1.txtroot:x:0:0:root:/root:/bin/bashbin:x:1:1:bin:/bin:/sbin/nologintouch也是可以的[root@aming1 ~]# touch 1.txt [root@aming1 ~]#经过测试除了追加内容以外更改之前的其他内容是不可以的。 给目录加上a 权限是可以在此目录下添加文件和新目录的， 但是不能删除，更改名字，与手动更改目录下文件内容都是不可以的。-给目录加上a 权限可以在此目录下的文件追加内容。 lsattr 查看隐藏权限 当然设置了隐藏权限也是可以查看的 用lsattr 查看，可以看到i的隐藏权限。[root@aming1 ~]# lsattr 1.txt—-i———– 1.txt 还有 a 权限[root@aming1 ~]# lsattr 1.txt—–a———- 1.txt a 与 i 权限可以同时存在，权限取最小[root@aming1 ~]# lsattr 1.txt—-ia———- 1.txt]]></content>
      <tags>
        <tag>工作日志</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[9月13日 2.10 环境变量 PATH 2.11 cp命令 2.12 mv命令 2.13 文档查看cat/more/less/head/tail]]></title>
    <url>%2F2018%2F12%2F09%2F9%E6%9C%8813%E6%97%A5%20%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8FPATHcp%E5%91%BD%E4%BB%A4mv%E5%91%BD%E4%BB%A4%20%E6%96%87%E6%A1%A3%E6%9F%A5%E7%9C%8Bcat%20more%20less%20head%20tail%2F</url>
    <content type="text"><![CDATA[2.10 环境变量平时在敲命令的时候可以在任何路径下直接执行。而输入其他 文本会提示找不到该文件，这是为什么呢？ 如果命令在以下目录的时候，可以不敲绝对路径。就能生效。这就是：环境变量[root@aminglinux-01 ~]# echo $PATH /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin 当然直接输入命令的绝对路径肯定也是可以生效的。拷贝到别的地方输入绝对路径一样可以生效。 [root@aminglinux-01 ~]# which lsalias ls=’ls –color=auto’ /usr/bin/ls [root@aminglinux-01 ~]# ls /usr/bin/ls/usr/bin/ls[root@aminglinux-01 ~]# cp /usr/bin/ls /tmp/ls2[root@aminglinux-01 ~]# /tmp/ls2anaconda-ks.cfg[root@aminglinux-01 ~]# 但是直接输入ls2会生效吗?是不可以的，看下面输出[root@aminglinux-01 ~]# ls2-bash: ls2: 未找到命令结果是并没有生效，这是因为ls2所在的/tmp/目录并不在（PATH）环境变量里面，现在把目录加到环境变量里面。 PATH=$PATH:/tmp/ 这是个shell意思是把tmp加入到PATH [root@aminglinux-01 ~]# PATH=$PATH:/tmp/ [root@aminglinux-01 ~]# echo $PATH/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/ bin:/root/bin:/tmp/ 这样在输入ls2，就可以生效了。[root@aminglinux-01 ~]# ls2anaconda-ks.cfg[root@aminglinux-01 ~]# 这时候如果在打开新的终端连接系统，在输入ls2，就不再生效了。如果需要在任何时候都会生效，永久生效。需要加到系统配置/etc/profile文件里。添加到最后一行就可以了，如下： [root@aminglinux-01 ~]# vi /etc/profile… if [ “$HISTCONTROL” = “ignorespace” ] ; then export HISTCONTROL=ignorebothelse export HISTCONTROL=ignoredupsfi export PATH USER LOGNAME MAIL HOSTNAME HISTSIZE HISTCONTROL By default, we want umask to get set. This sets it for login shell# Current threshold for system reserved uid/gids is 200# You could check uidgid reservation validity in# /usr/share/doc/setup-*/uidgid fileif [ $UID -gt 199 ] &amp;&amp; [ “/usr/bin/id -gn“ = “/usr/bin/id -un“ ]; thenumask 002 else umask 022fi for i in /etc/profile.d/*.sh ; do if [ -r &quot;$i&quot; ]; then if [ &quot;${-#*i}&quot; != &quot;$-&quot; ]; then . &quot;$i&quot; else . &quot;$i&quot; &gt;/dev/null fi fidone unset iunset -f pathmungePATH=$PATH:/tmp/ *** 在最后加上：PATH=$PATH:/tmp/ 如果想恢复之前的PATH，就去掉/tmp/，复制之前的PATH。命令如下： [root@aminglinux-01 ~]# echo $PATH/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin:/tmp/[root@aminglinux-01 ~]#PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin[root@aminglinux-01 ~]# echo $PATH/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin[root@aminglinux-01 ~]# ls2-bash: ls2: 未找到命令 如果设置了永久保存，就在vi /etc/profile里面把PATH=$PATH:/tmp/删掉重启就可以了。 2.11 cp 拷贝命令 cp ,copy的意思，把源文件拷贝到目标文件,并且可以重命名目标文件名字[root@aming1 ~]# ls123.txt anaconda-ks.cfg[root@aming1 ~]# cp /etc/passwd 456.txt[root@aming1 ~]# ls123.txt 456.txt anaconda-ks.cfg cp 目录也是需要加上-r的。[root@aming1 ~]# cp -r /tmp/aminglinux/ /tmp/aming/[root@aming1 ~]# tree /tmp/aming/tmp/aming└── 111 └── 222 └── 333 [root@aming1 ~]# tree /tmp/aminglinux//tmp/aminglinux/└── 111 └── 222 └── 333 当复制文件已经存在的时候会问是否覆盖[root@aming1 ~]# ls123.txt anaconda-ks.cfg[root@aming1 ~]# cp /etc/passwd 456.txt[root@aming1 ~]# ls123.txt 456.txt anaconda-ks.cfg[root@aming1 ~]# cp /etc/passwd 456.txtcp：是否覆盖”456.txt”？ y[root@aming1 ~]# 那么当复制目录的时候会不会提示覆盖呢 经过测试是如果目录都是空的，就不会有提示，如果目录里有文件就会提示是否覆盖。 2.12 mv移动文件命令 mv ：move的缩写，移动文件命令 同一个目录下移动文件或者目录会给文件或目录更改名字 [root@aminglinux-01 ~]# lsanaconda-ks.cfg[root@aminglinux-01 ~]# mv anaconda-ks.cfg anaconda-ks.cfg.1[root@aminglinux-01 ~]# lsanaconda-ks.cfg.1 也可以移动文件或目录并且改名字。[root@aminglinux-01 tmp]# mv 12.txt /root/2.txt [root@aminglinux-01 tmp]# ls /root/2.txt anaconda-ks.cfg.1[root@aminglinux-01 tmp]# 如果移动的位置已经有一个相同文件名的文件，也是会提示覆盖的。输入mv的绝对路径就不会提示了。[root@aming1 ~]# mv 123.txt 111.txt[root@aming1 ~]# mv 111.txt 111.txtmv: “111.txt” 与”111.txt” 为同一文件[root@aming1 ~]# mv 456.txt 111.txtmv：是否覆盖”111.txt”？ y 另外如果移动相同文件夹里面如果有文件，那么是会报错目录非空。无法覆盖。文件查看cat_more_less_head_tail 2.13 cat 用cat查看一个文件的内容[root@aming1 ~]# cat 111.txt root:x:0:0:root:/root:/bin/bashbin:x:1:1:bin:/bin:/sbin/nologindaemon:x:2:2:daemon:/sbin:/sbin/nologinadm:x:3:4:adm:/var/adm:/sbin/nologinlp:x:4:7:lp:/var/spool/lpd:/sbin/nologinsync:x:5:0:sync:/sbin:/bin/syncshutdown:x:6:0:shutdown:/sbin:/sbin/shutdownhalt:x:7:0:halt:/sbin:/sbin/haltmail:x:8:12:mail:/var/spool/mail:/sbin/nologinoperator:x:11:0:operator:/root:/sbin/nologingames:x:12:100:games:/usr/games:/sbin/nologinftp:x:14:50:FTP User:/var/ftp:/sbin/nologinnobody:x:99:99:Nobody:/:/sbin/nologinsystemd-bus-proxy:x:999:997:systemd Bus Proxy:/:/sbin/nologinsystemd-network:x:192:192:systemd Network Management:/:/sbin/nologindbus:x:81:81:System message bus:/:/sbin/nologinpolkitd:x:998:996:User for polkitd:/:/sbin/nologintss:x:59:59:Account used by the trousers package to sandbox the tcsd daemon:/dev/null:/sbin/nologinpostfix:x:89:89::/var/spool/postfix:/sbin/nologinsshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologinchrony:x:997:995::/var/lib/chrony:/sbin/nologin[root@aming1 ~]# cat -n 显示行号 [root@aming1 ~]# cat -n 111.txt 1 root:x:0:0:root:/root:/bin/bash 2 bin:x:1:1:bin:/bin:/sbin/nologin 3 daemon:x:2:2:daemon:/sbin:/sbin/nologin 4 adm:x:3:4:adm:/var/adm:/sbin/nologin 5 lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin 6 sync:x:5:0:sync:/sbin:/bin/sync 7 shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown 8 halt:x:7:0:halt:/sbin:/sbin/halt 9 mail:x:8:12:mail:/var/spool/mail:/sbin/nologin 10 operator:x:11:0:operator:/root:/sbin/nologin 11 games:x:12:100:games:/usr/games:/sbin/nologin 12 ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin 13 nobody:x:99:99:Nobody:/:/sbin/nologin 14 systemd-bus-proxy:x:999:997:systemd Bus Proxy:/:/sbin/nologin 15 systemd-network:x:192:192:systemd Network Management:/:/sbin/nologin 16 dbus:x:81:81:System message bus:/:/sbin/nologin 17 polkitd:x:998:996:User for polkitd:/:/sbin/nologin 18 tss:x:59:59:Account used by the trousers package to sandbox the tcsd daemon:/dev/null:/sbin/nologin 19 postfix:x:89:89::/var/spool/postfix:/sbin/nologin 20 sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin 21 chrony:x:997:995::/var/lib/chrony:/sbin/nologin[root@aming1 ~]# tac 倒序查看一个文件[root@aming1 ~]# tac 111.txt chrony:x:997:995::/var/lib/chrony:/sbin/nologinsshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologinpostfix:x:89:89::/var/spool/postfix:/sbin/nologintss:x:59:59:Account used by the trousers package to sandbox the tcsd daemon:/dev/null:/sbin/nologinpolkitd:x:998:996:User for polkitd:/:/sbin/nologindbus:x:81:81:System message bus:/:/sbin/nologinsystemd-network:x:192:192:systemd Network Management:/:/sbin/nologinsystemd-bus-proxy:x:999:997:systemd Bus Proxy:/:/sbin/nologinnobody:x:99:99:Nobody:/:/sbin/nologinftp:x:14:50:FTP User:/var/ftp:/sbin/nologingames:x:12:100:games:/usr/games:/sbin/nologinoperator:x:11:0:operator:/root:/sbin/nologinmail:x:8:12:mail:/var/spool/mail:/sbin/nologinhalt:x:7:0:halt:/sbin:/sbin/haltshutdown:x:6:0:shutdown:/sbin:/sbin/shutdownsync:x:5:0:sync:/sbin:/bin/synclp:x:4:7:lp:/var/spool/lpd:/sbin/nologinadm:x:3:4:adm:/var/adm:/sbin/nologindaemon:x:2:2:daemon:/sbin:/sbin/nologinbin:x:1:1:bin:/bin:/sbin/nologinroot:x:0:0:root:/root:/bin/bash 其他用法可以man cat一下。more 也是查看文件内容的，但是不会像cat一样全部显示出来。 它会一屏一屏的显示。按空格键下翻页。 看完之后就自动退出来了。 按Ctrl+b键是向上翻页。[root@aminglinux-01 ~]# more /etc/profile# /etc/profile System wide environment and startup programs, for login setup# Functions and aliases go in /etc/bashrcIt’s NOT a good idea to change this file unless you know what you# are doing. It’s much better to create a custom.sh shell script in# /etc/profile.d/ to make custom changes to your environment, as this# will prevent the need for merging in future updates.pathmunge () { case “:${PATH}:” in :”$1”:) ;; *) if [ “$2” = “after” ] ; then PATH=$PATH:$1 else PATH=$1:$PATH fi esac} –More–(66%)less命令 less的命令的用法包含了more的用法，同时可以用方向键来一行一行的翻页。翻到尾部不会自动退出来。 按q可以退出。 按“g”定位到行首 按“G”定位到行尾 还可以搜索内容输入：/或者？“单词” 比如/and或？and 搜索下面文件内容所有的and都会高亮显示。 按“n”像下查询查找内容 按“N”从下向上查询查找内容head 命令 tail 命令 head 命令查看文件的头十行 tail 命令查看文件的尾十行 tail 和head都是可以输入-n 来指定看几行的。比如只看两行。[root@aming1 ~]# head -n2 111.txt root:x:0:0:root:/root:/bin/bashbin:x:1:1:bin:/bin:/sbin/nologin[root@aming1 ~]# wc -l 命令,显示一个文件的行数 [root@aming1 ~]# wc -l 111.txt21 111.txt 追加重定向：前面命令的输出内容 &gt;&gt; 追加到目标文件内容的后面。 分别查看1.txt与2.txt[root@aming1 ~]# cat 1.txt 11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111[root@aming1 ~]# cat 2.txt 22222222222222222222 把查看1.txt的输出追加重定向到2.txt后查看，[root@aming1 ~]# cat 1.txt &gt;&gt; 2.txt[root@aming1 ~]# cat 2.txt2222222222222222222211111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111]]></content>
      <tags>
        <tag>工作日志</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[9月12日 2.6--2.9 相对与绝对路径 cd命令 创建和删除目录mkdir/rmdir rm命令]]></title>
    <url>%2F2018%2F12%2F09%2F9%E6%9C%8812%E6%97%A5%20%E7%9B%B8%E5%AF%B9%E4%B8%8E%E7%BB%9D%E5%AF%B9%E8%B7%AF%E5%BE%84%20%20cd%E5%91%BD%E4%BB%A4%20%E5%88%9B%E5%BB%BA%E5%92%8C%E5%88%A0%E9%99%A4%E7%9B%AE%E5%BD%95mkdirrmdir%20%20rm%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[绝对路径 ：以根“/”开头的路径都是绝对路径。[root@aminglinux-01 ~]# ls /root/.ssh/authorized_keys/root/.ssh/authorized_keys 不管在那个路径下，都能都能通过绝对路径找到文件。从根“/”开始任何文件都有绝对路径。 相对路径 ：相对于当前目录的路径，不是从根“/”开始的路径[root@aminglinux-01 ~]# cd /etc/sysconfig/ [root@aminglinux-01 sysconfig]# ls network-scripts/ifcfg-ens33 network-scripts/ifcfg-ens33 [root@aminglinux-01 sysconfig]# pwd /etc/sysconfig pwd命令是用来显示当前路径，当前的目录是哪里。 cd 是切换目录的命令2.7 cd命令 cd 切换目录命令。change directory 的缩写 cd - ：这个命令的就是切换上一次目录的所在位置。切换非常方便。 [root@localhost ~]# cd - / [root@localhost /]# cd - /root [root@localhost ~]# cd - /[root@localhost /]# cd -/root[root@localhost ~]# 直接输入命令：cd无论在哪个目录下，输入cd都会回到登陆系统的用户的家目录下。 [root@localhost ~]# pwd /root[root@localhost ~]# cd [root@localhost ~]# pwd /root[root@localhost ~]# 命令：cd ~同样是直接返回用户的家目录 命令：cd ..返回上一层目录 其他选项不常用，可以man cd 来查看用法。2.8 创建和删除目录 创建目录 mkdir mkdir是make directory的缩写 [root@localhost ~]# ls anaconda-ks.cfg[root@localhost ~]# mkdir 1.txt [root@localhost ~]# ls 1.txt anaconda-ks.cfg [root@localhost ~]# mkdir -p 创建连续的文件夹正常用mkdir创建连续的文件夹是不可以的，如下 [root@localhost ~]# mkdir 11/22/33/44/55 mkdir: 无法创建目录”11/22/33/44/55”: 没有那个文件或目录[root@localhost ~]# 加-p 属性即可创建成功 [root@localhost ~]# mkdir -p 11/22/33/44/55[root@localhost ~]# tree.├── 11│ └── 22│ └── 33│ └── 44│ └── 55├── 1.txt└── anaconda-ks.cfg 6 directories, 1 file[root@localhost ~]# mkdir -pv 创建连续的文件夹并显示创建过程 [root@localhost ~]# mkdir -pv 111/222/333/444/555 mkdir: 已创建目录 “111” mkdir: 已创建目录 “111/222” mkdir: 已创建目录 “111/222/333” mkdir: 已创建目录 “111/222/333/444” mkdir: 已创建目录 “111/222/333/444/555” [root@localhost ~]# 删除目录 rmdirrmdir是remove directory的缩写 rmdir 直接运行时不能删除非空目录，也就是只能删除空文件夹，如下 root@localhost ~]# rmdir /tmp/aminglinux/ rmdir: 删除 “/tmp/aminglinux/“ 失败: 目录非空 [root@localhost ~]# touch /tmp/aminglinux/222/aaa/2.txt [root@localhost ~]# rmdir /tmp/aminglinux/222/aaa/ rmdir: 删除 “/tmp/aminglinux/222/aaa/“ 失败: 目录非空 [root@localhost ~]# rmdir -p 也是可以连续删除空文件夹的。但必须是空的，如果是非空则删不掉，只删除空的 [root@aminglinux-01 ~]# mkdir -p /tmp/aminglinux/222/yyyy/uuuu/iiii/ [root@aminglinux-01 ~]# rmdir -pv /tmp/aminglinux/222/yyyy/uuuu/iiii/ rmdir: 正在删除目录 “/tmp/aminglinux/222/yyyy/uuuu/iiii/“ rmdir: 正在删除目录 “/tmp/aminglinux/222/yyyy/uuuu”rmdir: 正在删除目录 “/tmp/aminglinux/222/yyyy”rmdir: 正在删除目录 “/tmp/aminglinux/222”rmdir: 删除目录 “/tmp/aminglinux/222” 失败: 目录非空 mdir只能删除目录，而且必须是空目录，要想全部删除只能先删除里面的文件夹后者是文件。-p 比较危险，一般不用。 2.9 rm命令之前学习的rmdir 删除局限性是比较大的。这回试试rm命令能否顺利删除有文件的目录呢 [root@aminglinux-01 ~]# tree /tmp/aminglinux//tmp/aminglinux/ ├── 111 │ └── 222 │ └── 333 └── 222 └── aaa ├── 1.txt └── bbb └── ccc 7 directories, 1 file[root@aminglinux-01 ~]# rm /tmp/aminglinux/222/ rm: 无法删除”/tmp/aminglinux/222/“: 是一个目录 [root@aminglinux-01 ~]# rm -r /tmp/aminglinux/222/ rm：是否进入目录”/tmp/aminglinux/222/“? y rm：是否进入目录”/tmp/aminglinux/222/aaa”? y rm：是否进入目录”/tmp/aminglinux/222/aaa/bbb”? y rm：是否删除目录 “/tmp/aminglinux/222/aaa/bbb/ccc”？y rm：是否删除目录 “/tmp/aminglinux/222/aaa/bbb”？y rm：是否删除普通空文件 “/tmp/aminglinux/222/aaa/1.txt”？y rm：是否删除目录 “/tmp/aminglinux/222/aaa”？y rm：是否删除目录 “/tmp/aminglinux/222/“？y [root@aminglinux-01 ~]# tree /tmp/aminglinux/ /tmp/aminglinux/└── 111 └── 222 └── 3333 directories, 0 files[root@aminglinux-01 ~]#可以看到rm 是不能直接删有文件的目录的。但是加上-r指令，就可以可以全部删除啦。 可以看到文件1.txt也是被直接删除了。如果加上-f命令就会强制性删除，不会问是否删除文件，这样省去如果文件夹或文件过多一直问下去的麻烦。 总结rm 只删除目录里面的文件 rm -r删除所有目录以及文件 rm -f强制删除文件，不提示是否删除 rm -v显示删除过程 rm -rfv 指令可以叠加使用，效果叠加。]]></content>
      <tags>
        <tag>工作日志</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[9月11日 系统目录 文件类型 ls alias 命令]]></title>
    <url>%2F2018%2F12%2F07%2F%E7%B3%BB%E7%BB%9F%E7%9B%AE%E5%BD%95%20%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B%20ls%E5%91%BD%E4%BB%A4%20alias%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[系统目录结构linux系统目录结构图：http://www.apelearn.com/study_v2/linux_dir_tree.jpg /bin ：里面装的是用户用的命令，root也可以用 /sbin ：里面是只有root能用的命令。 /boot ：系统启动的相关文件，里面有系统启动的关键文件，删除后系统无法启动 /dev ：linux系统下的设备文件 /etc ：配置文件的所在目录/home ：用户的家目录/lib :存系统库文件的/lib64 :存系统的库文件 很多命令都会依赖一些库，查看命令依赖关系：ldd /media : 媒介目录。默认是空的。比如插一个U盘会自动放到这个目录下面去 /mnt ： 临时挂载目录，默认也是空的。可以把新增的光驱或硬盘挂载这个目录下面 /opt ： 空目录/proc ：里面是一些系统进程/root ：root用户的家目录 /run ：一些进程产生的临时文件，重启就会消失的文件/srv ：空的，存服务产生的文件/sys ：存系统内核的相关文件/tmp ：系统的临时目录，任何一个用户都可以在这个文件夹下读写删除文件。 /usr ：用户的文件， /var ：是一个很重要的目录。 经常用的/var/log ，系统日志。 从centOS7系统以后，就不再区分32位和64位版本，都是64位系统。 总结：/bin，/sbin,/etc,/var,/usr/local这几个目录是用的最多的。常用的。 tree命令：以树形的形式显示一个目录下面都有哪些目录和子文件 如果系统没有tree命令就用yum下载一下 [root@aminglinux-01 /]# yum install -y tree tree -L 是可以设置显示最大层数。 下面试一下只显示两层目录下的结构 [root@aming1 /]# tree -L 2.├── bin -&gt; usr/bin ├── boot │ ├── config-3.10.0-514.el7.x86_64 │ ├── grub │ ├── grub2 │ ├── initramfs-0-rescue-b1022dedd3b74686922ac31f3e680f36.img │ ├── initramfs-3.10.0-514.el7.x86_64.img │ ├── initramfs-3.10.0-514.el7.x86_64kdump.img │ ├── initrd-plymouth.img │ ├── symvers-3.10.0-514.el7.x86_64.gz │ ├── System.map-3.10.0-514.el7.x86_64 │ ├── vmlinuz-0-rescue-b1022dedd3b74686922ac31f3e680f36 │ └── vmlinuz-3.10.0-514.el7.x86_64 ├── dev │ ├── agpgart │ ├── autofs │ ├── block │ ├── bsg │ ├── btrfs-control ls命令ls命令是列取目录或者文件的命令 可以列取一下系统根目录看一下Linux系统都有哪些目录 [root@aming1 /]# ls /bin boot dev etc home lib lib64 media mnt opt proc root run sbin srv sys tmp usr varls命令总结ls -l :列取详细信息 ls -i :列取inode ls -lh :看文件大小更直观 ls -la :列出隐藏文件 ls -lta: t是时间的意思，按时间顺序排列 ls -ld :只列出文件夹 ls命令详解ls -l :列取详细信息（ll命令就是ls -l的缩写）在inode使用量前面11位。第一位表示文件类型，后面九位表示文件权限，最后一个（.）是受制于selinux。如果关闭selinux，新建的文件或目录就会没有(.) [root@aminglinux-01 ~]# ls -l 总用量 4 - rw-------. 1 root root 1422 5月 12 23:06 anaconda-ks.cfg 文件类型 权限 .(selinux) 有几个文件使用了这个inode 所有者 所属组 文件大小 最后改动日期 文件名字 ls -i :列取inode 文件名字前面的数字就是inode号，inode号是储存除了文件名以外的所有文件信息，都存在inode之中。 [root@aming1 ~]# ls 123.txt anaconda-ks.cfg test.txt[root@aming1 ~]# ls -i33599795 123.txt 33574987 anaconda-ks.cfg 33599785 test.txt ls -lh :显示文件大小更直观[root@aming1 ~]# ls -l 总用量 12 -rw-r–r–. 1 root root 96 4月 25 21:33 123.txt-rw——-. 1 root root 1422 3月 17 19:03 anaconda-ks.cfg-rw-r–r–. 1 root root 1008 4月 26 15:30 test.txt [root@aming1 ~]# ls -lh 总用量 12K -rw-r–r–. 1 root root 96 4月 25 21:33 123.txt-rw——-. 1 root root 1.4K 3月 17 19:03 anaconda-ks.cfg-rw-r–r–. 1 root root 1008 4月 26 15:30 test.txt ls -la :列出隐藏文件[root@aming1 ~]# ls -la总用量 40dr-xr-x—. 3 root root 194 4月 26 15:30 .dr-xr-xr-x. 17 root root 224 4月 26 15:29 ..-rw-r–r–. 1 root root 96 4月 25 21:33 123.txt-rw——-. 1 root root 1422 3月 17 19:03 anaconda-ks.cfg-rw——-. 1 root root 2550 5月 11 20:55 .bash_history-rw-r–r–. 1 root root 18 12月 29 2013 .bash_logout-rw-r–r–. 1 root root 176 12月 29 2013 .bash_profile-rw-r–r–. 1 root root 176 12月 29 2013 .bashrc-rw-r–r–. 1 root root 100 12月 29 2013 .cshrcdrwx——. 2 root root 48 5月 11 10:42 .ssh-rw-r–r–. 1 root root 129 12月 29 2013 .tcshrc-rw-r–r–. 1 root root 1008 4月 26 15:30 test.txt-rw——-. 1 root root 1609 4月 25 21:33 .viminfo 其中.开头的文件都是隐藏文件或者目录。 还有两个目录 点和点点 。“.”代表是当前目录 “..”代表的是上层目录 ls -lt ，t是时间的意思，按时间顺序排列,时间越近排在越前面[root@aming1 ~]# ls -lt 总用量 12 -rw-r–r–. 1 root root 1008 4月 26 15:30 test.txt -rw-r–r–. 1 root root 96 4月 25 21:33 123.txt -rw——-. 1 root root 1422 3月 17 19:03 anaconda-ks.cfg ls -ld :只列出文件夹 也可以同时使用 ls -liat [root@aming1 ~]# ls -liat 总用量 40 33574979 -rw——-. 1 root root 2550 5月 11 20:55 .bash_history 50332748 drwx——. 2 root root 48 5月 11 10:42 .ssh 33599785 -rw-r–r–. 1 root root 1008 4月 26 15:30 test.txt33574977 dr-xr-x—. 3 root root 194 4月 26 15:30 . 64 dr-xr-xr-x. 17 root root 224 4月 26 15:29 ..33599796 -rw——-. 1 root root 1609 4月 25 21:33 .viminfo 33599795 -rw-r–r–. 1 root root 96 4月 25 21:33 123.txt 33574987 -rw——-. 1 root root 1422 3月 17 19:03 anaconda-ks.cfg 33975719 -rw-r–r–. 1 root root 18 12月 29 2013 .bash_logout33975720 -rw-r–r–. 1 root root 176 12月 29 2013 .bash_profile33975721 -rw-r–r–. 1 root root 176 12月 29 2013 .bashrc33975722 -rw-r–r–. 1 root root 100 12月 29 2013 .cshrc33975723 -rw-r–r–. 1 root root 129 12月 29 2013 .tcshrc[root@aming1 ~]# 其他命令选项使用也有很多，但是不常用，需要的时候可以man一下进行查看 文件类型文件属性前面第一排就是文件类型，就是在权限前面的 常见的就是： - 是普通文件 d 文件夹 还有一些特殊的文件c : 字符串设备 l : 软连接文件 b : 块设备，比如光盘，磁盘 s : 通信文件 [root@aminglinux-01 ~]# ls -l /dev/ 总用量 0 crw-rw—-. 1 root video 10, 175 8月 4 20:53 agpgart crw——-. 1 root root 10, 235 8月 4 20:53 autofs drwxr-xr-x. 2 root root 140 8月 4 20:53 blockdrwxr-xr-x. 2 root root 80 8月 4 20:53 bsgcrw——-. 1 root root 10, 234 8月 4 20:53 btrfs-controldrwxr-xr-x. 3 root root 60 8月 4 20:53 buslrwxrwxrwx. 1 root root 3 8月 4 20:53 cdrom -&gt; sr0drwxr-xr-x. 2 root root 3020 8月 4 20:53 charcrw——-. 1 root root 5, 1 8月 4 20:53 consolesrw-rw-rw-. 1 root root 0 8月 4 20:53 loglrwxrwxrwx. 1 root root 11 8月 4 20:53 core -&gt; /proc/kcore alias命令alias 就是 命令的别名,是命令加选线得组合。可以理解给一个很长的命令设置一个简单外号，这样可以方便操作。 alias的作用就是，可以简写命令。 用which来查看命令的别名 [root@aminglinux-01 ~]# which lsalias ls=’ls –color=auto’ /usr/bin/ls[root@aminglinux-01 ~]# which ll alias ll=’ls -l –color=auto’ /usr/bin/ls 可以输入alias来看系统有别名的命令有哪些 [root@aming1 ~]# alias alias cp=’cp -i’alias egrep=’egrep –color=auto’alias fgrep=’fgrep –color=auto’alias grep=’grep –color=auto’alias l.=’ls -d .* –color=auto’alias ll=’ls -l –color=auto’alias ls=’ls –color=auto’alias mv=’mv -i’alias rm=’rm -i’alias which=’alias | /usr/bin/which –tty-only –read-alias –show-dot –show-tilde’ 自定义一个别名的格式 ：“ alias aming=’ls -lha’ ” [root@aminglinux-01 ~]# aming -bash: aming: 未找到命令[root@aminglinux-01 ~]# alias aming=’ls -lha’[root@aminglinux-01 ~]# aming 总用量 28K dr-xr-x—. 3 root root 147 8月 3 09:24 .dr-xr-xr-x. 17 root root 224 8月 3 21:06 ..-rw——-. 1 root root 1.4K 7月 31 23:06 anaconda-ks.cfg-rw——-. 1 root root 1.4K 8月 4 16:45 .bash_history-rw-r–r–. 1 root root 18 12月 29 2013 .bash_logout-rw-r–r–. 1 root root 176 12月 29 2013 .bash_profile-rw-r–r–. 1 root root 176 12月 29 2013 .bashrc-rw-r–r–. 1 root root 100 12月 29 2013 .cshrcdrwx——. 2 root root 80 8月 3 22:17 .ssh-rw-r–r–. 1 root root 129 12月 29 2013 .tcshrc 可以看到没有设置别名的时候直接输入aming是不起作用的。可以用which来看一下 [root@aminglinux-01 ~]# which aming alias aming=’ls -lha’ /usr/bin/ls取消aming的别名 用unalias命令 [root@aminglinux-01 ~]# unalias aming[root@aminglinux-01 ~]# aming-bash: aming: 未找到命令]]></content>
      <tags>
        <tag>工作日志</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[9月10日 1.13-1.16 单用户模式 救援模式 克隆虚拟机 linux相互登录]]></title>
    <url>%2F2018%2F12%2F06%2F%E7%94%A8%E6%88%B7%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[单用户模式如果忘记了root密码，怎么办，从新装系统是不现实的，可以通过单用户模式来更改root密码 开机时候在启动项还没有跳转开机的时候迅速按上下方向键#选择第一个选项centos linux (3.10.0——514系列）按“e”进入grub界面，grub是一个引导管理工具注意这个需要更改两个地方，光标下移到红色方框位置，找到“ro”只读的意思改成“rw”读写第二个地方在修改的 ‘rw’ 后面加上 init=/sysroot/bin/sh 然后根据下面提示按“Ctrl-x” 就进入下面的界面了，下面的界面类似在安全模式，还没有到系统里面去，原来的系统在sysroot下面 切换到原系统下输入：chroot /sysroot/ 输入passwd root 设置新密码 然后输入：touch /.autorelabel,这步非常重要，不然无法进入系统 设置完成后就可以重启了。重启之后就可以用新的root密码登录了 https://app.yinxiang.com/shard/s63/nl/13934915/873164af-f53d-4998-b4f8-9679ee9302a0 救援模式首先看一下centos7的7个运行级别 [root@localhost ~]# ls -l /usr/lib/systemd/system/runlevel*target刚刚上面说了利用单用户模式进行更改root密码，是在grub没有设置密码或着已知密码的情况下可以更改root密码。如果进不去grub。那么只能用另一种方法，就是进入救援模式设置grub密码 ： http://ask.apelearn.com/question/18012 救援模式的进入首先需要加载光驱里面或者u盘里面的系统。开机后更改bios启动项，改为cd启动或u盘为第一启动项，保存重启。 下图就是进入系统盘启动了，选择第三项，第一项是安装操作系统，第二项是测试选troubleshooting这项 回车之后又出现几项，选第二项 linux system 然后出现这个再按下回车 出现这个界面，选“1” 继续 之后就进入了命令行界面了，输入它提示的chroot /mut/sysimage/ 之后输入命令passwd root 更改密码就可以了。之后就可以重启用新密码登陆了，把启动项改回硬盘启动救援模式不光可以更改root密码，还可以把不小心修改错了系统文件，进救援模式再改回来，重启恢复 克隆虚拟机有时候在做实验的时候需要2台甚至更多的linux系统，如果都要装一便系统比较麻烦浪费时间。这种问题可以用虚拟机克隆来解决。而且可以节省不必要的磁盘空间。 步骤1 在虚拟机右上方菜单栏找到 虚拟机&gt;管理&gt;克隆然后 下一步下一步 选择创建链接克隆，完整克隆就是全都复制一份也比较慢，占空间 2 设置名称和储存位置 3 成功后这边就出现两个虚拟机了 4 开机之后要更改下ip地址，因为是克隆的，不然会有IP冲突,更改IP时UUID也需要删除以下 5 最后更改下两台机器的主机名查看主机名称：hostname 永久更改主机名称：hostnamectl set-hostname aminglinux-02 Linux机器互相登陆如果需要远程连接的系统没有没有关闭selinux，输入getenforce命令，显示Enforcing表示开启，显示Permissive表示关闭。输入命令：setenforce 0,可以临时关闭，重启后恢复。 1 远程登陆命令格式：ssh username@IP 或者ssh -p 指定端口号 username@IP 2 “w”命令查看有几个客户端进行连接 3 linux系统也是可以生产密钥对来进行连接的假如我们用2机器连接1机器，那么肯定2机器上有一个私钥，1机器上有一个公钥。这样的思路就是我们要生成一对儿密钥，然后把公钥写到1机器的/root/.ssh/authorized_keys里面去。 4 linux生成密钥工具 ssh-keygen,假如我们用2机器连接1机器，那么肯定2机器上有一个私钥，1机器上有一个公钥。这样的思路就是我们要生成一对儿密钥，然后把公钥写到1机器的/root/.ssh/authorized_keys里面去。 5 linux生成密钥工具 ssh-keygen查看公钥并且写到要访问的计算机配置文件里。然后把这个复制下来写入到需要远程登陆的机器/root/.ssh/authorized_keys这个文件中之后即可用密钥认证登陆。 https://app.yinxiang.com/shard/s63/nl/13934915/2d4914b3-7275-469d-b0d7-5c2d09c67100]]></content>
      <tags>
        <tag>工作日志</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[9月7日 1.12 linux 远程登录]]></title>
    <url>%2F2018%2F12%2F06%2F1.12%20linux%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E7%99%BB%E5%BD%95%2F</url>
    <content type="text"><![CDATA[下载PuTTY 下载地址：https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html 使用PuTTY 设置PuTTY 修改默认终端保存的显示行数，默认显示200行，在查看的文件如果很长超过200行就非常不方便了，可自定义行数 设置字体，大小适中 修改字符编码。一般用UTF-8，这样在输出中文的时候不会乱码 设置完成后点Session回主页面，点击Save保存 PuTTY的密钥连接 使用PuTTYgen工具 （在windows搜一下，与putty一起下载安装好的） 打开后点击Generate,生成密钥对，在进度条时候鼠标要一直移动，不然会非常慢 公钥复制下来就可以了，私钥必须保存一下点：Save private Key，保存在电脑一个比较安全的地方 把公钥放到linux下 [root@localhost ~]# mkdir /root/.ssh [root@localhost ~]# chmod 700 /root/.ssh [root@localhost ~]# vi /root/.ssh/authorized_keys 然后把公钥复制进去保存退出 还要关闭防火墙selinux [root@localhost ~]# setenforce 0 然后配置私钥到PuTTY,选完了一定要返回首页保存一下，点一下Save，不然下次还要重新配置 然后Open一下，输入用户名密码，以及私钥的加密密码就OK啦 二、Xshell下载 这里是列表文本官网下载地址：https://www.netsarang.com/download/down_form.html?code=522 直接在页面中有红色*号的地方输入个人信息，licensetype 必须选 Home and School use（家庭和个人使用），最主要的是输入邮箱（必须是个人的可以接收邮件的邮箱，会给你发邮件），最后的Productkey可以不用填写，然后点击提交； 之后邮箱会接到一个链接，点开后会直接下载，这样不会出现评估过期等问题 输入IP和端口 在这里可以直接自动登陆保存好登陆的用户及密码红色框部分是可以切换登陆模式，比如密钥登陆等 其他设置，配色方案不要改，其他根据自己的需求去调整 PuTTY优点，可以保存用户名密码，自动连接比较方便。多窗口切换非常方便。 Xshell的密钥验证点击软件的 工具&gt;新建用户密钥生成向导 这样公钥就生成了 这个密钥同样要写到 [root@localhost ~]# vi /root/.ssh/authorized_keys这个里面去的 然后需要在用户身份验证方法改成Public Key模式如操作完成点击连接]]></content>
      <tags>
        <tag>工作日志</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[9月6日 1.6-1.8 配置ip]]></title>
    <url>%2F2018%2F12%2F06%2F1.6%20-1.8%20%E9%85%8D%E7%BD%AEip%2F</url>
    <content type="text"><![CDATA[因为在学习过程和工作的时候直接用键盘鼠标连接服务器是不现实的，所以需要配置固定IP来进行远程连接。 首先把虚拟机的网络改成NET模式，优点是物理机切换网络不影响虚拟机连接外网。除了有限制的网络环境公司或校园网等。 进入系统后先dhclient自动获取一个IP地址。然后ip add 或者ifconfig命令查看网卡信息。 如果dhclient进程占用可以dhclient -r 杀死然后在运行dhclient 如果centOS7里没有ifconfig这个命令，就安装一下：yum install -y net-tools 获取到IP地址之后查看 网关 查看网关命令：route -n 或者点击虚拟机的 编辑&gt;虚拟网络编辑器&gt;NET设置 看下网关 配置静态IP 首先用vi编辑器编辑一下网卡的配置，把刚刚获取到得IP,子网，网关等填写到网卡得配置文件里，可以永久设置静态IP。 * 编辑网卡输入 vi /etc/sysconfig/network-scripts/ifcfg-ens33 TYPE=Ethernet BOOTPROTO=static 默认是dhcp改成静态static DEFROUTE=yes PEERDNS=yes PEERROUTES=yes IPV4_FAILURE_FATAL=no IPV6INIT=yes IPV6_AUTOCONF=yes IPV6_DEFROUTE=yes IPV6_PEERDNS=yes IPV6_PEERROUTES=yes IPV6_FAILURE_FATAL=no IPV6_ADDR_GEN_MODE=stable-privacy NAME=ens33 UUID=a2546330-9655-40b0-b84a-9bec807ac428 DEVICE=ens33 ONBOOT=yes 开机自起 默认是no改成yes IPADDR=192.168.159.128 添加IP NETMASK=255.255.255.0 添加子网 GATEWAY=192.168.159.2 添加网关 DNS1=119.29.29.29按Esc退出编辑模式输入：wq 保存退出 以上是永久设置IP,用以下命令可以暂时设置IP地址 例如 ：ifconfig ens33 192.168.234.129/24 命令行设置ip (重启后失效，改配置文件才会永久生效) 然后重启网络服务systemctl restart network * ping 下百度网址看通不通，用物理机ping下虚拟机的IP看通不通讯。都可以ping通就配置完成 * 如果执行 service network restart 出现以下错误 Restarting network (via systemctl): Job for network.service failed. See &apos;systemctl status network.service&apos; and &apos;journalctl -xn&apos; for details. 这个可能是网卡配置信息得MAC地址不对，ipadd 查看一下网卡得mac地址，然后对比配置文件如果不对需要修改 网络问题排查 如果以上不通讯，说明还是有问题存在的，需要进行网络问题排查 首先确认所在网络环境是否支持虚拟机网卡NET模式，如不支持则更换为桥接模式（虚拟机&gt;设置&gt;网络适配器） 然后重新获取下动态IP然后在网卡配置信息里设置静态IP 如果所在网络环境是可以正常使用NET模式，打开vi /etc/sysconfig/network-scripts/ifcfg-ens33网卡配置文件更改是否正确。 以上方法都不可以恢复，可以删除下虚拟8网卡重新添加 （编辑&gt;虚拟网络编辑器&gt;选中VMnet8移除网络&gt;添加VMnet8模式改为NET） 重新配置静态IP。]]></content>
      <tags>
        <tag>工作日志</tag>
      </tags>
  </entry>
</search>
