<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[10月9日 安装软件包的三种方法]]></title>
    <url>%2F2019%2F01%2F02%2F10%E6%9C%889%E6%97%A5%20%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[安装软件包的三种方法 rpm工具 类似windows的exe安装包，安装简单，安装位置等都是设定好的。#3yum工具 用python开发的工具，安装的也是rpm包 优点是可以自动安装一个包所依赖的一些包。rpm包在安装时候可能会需要依赖另一个包的支持，而安装另一个包，可能还需要另一个的依赖。这时候用yum就可以自动安装上所有的依赖包。方便，简单，快捷。源码包 源代码包，需要编译后安装。rpm工具的使用 找到rpm包 要想使用rpm工具，首先需要有rpm包，下面利用contos7的镜像文件里找一下rpm包。先连接虚拟机里面的光驱，光盘文件选一下contos7的镜像。连接好后开始挂载。挂载到/mnt/下，mount /dev/cdrom /mnt/[root@aminglinux-01 ~]# mount /dev/cdrom /mnt/mount: /dev/sr0 写保护，将以只读方式挂载[root@aminglinux-01 ~]# df -h文件系统 容量 已用 可用 已用% 挂载点/dev/sda3 18G 3.6G 15G 20% /devtmpfs 479M 0 479M 0% /devtmpfs 489M 0 489M 0% /dev/shmtmpfs 489M 6.7M 482M 2% /runtmpfs 489M 0 489M 0% /sys/fs/cgroup/dev/sda1 197M 109M 88M 56% /boottmpfs 98M 0 98M 0% /run/user/0/dev/sr0 4.1G 4.1G 0 100% /mnt 到mnt下看一下里面的内容。也就是光盘里的文件。rpm包是以红色名字显示的。[root@aminglinux-01 ~]# cd /mnt/[root@aminglinux-01 mnt]# lsCentOS_BuildTag EULA images LiveOS repodata RPM-GPG-KEY-CentOS-Testing-7EFI GPL isolinux Packages RPM-GPG-KEY-CentOS-7 TRANS.TBL其中 Packages这个目录下装的就是rpm包文件。 #3rpm包介绍 rpm包名组成xz-devel-5.2.2-1.el7.x86_64.rpm 包名-版本号-发布版本号.64位或32位数系统要求 以这个rpm包为例子，xz-devel就是包名，5.2.2这个是版本号。1.el7是发布版本号。x86_64，运行平台，区分32位，或者64位。也有不需要区分的，都可以用。 contos7已经开始不区分32或者64位的，都是64位系统。一般64位系统可以安装32位的软件。反过来不可以。rpm包的安装 用法： 安装：rpm -ivh rpm包文件 升级：rpm -Uvh rpm包文件 卸载 ：rpm -e 包名 查询安装的包： rpm -qa 查询指定包是否安装 ： rpm -q 查询指定包信息 ： rpm -qi 列出包安装的文件 ： rpm -ql 查看一个文件是由哪个包安装的 rpm -qf 文件绝对路径 rpm安装rpm -ivh rpm包文件 (这个是在当前有rpm包的目录，也可用绝对路径)[root@aminglinux-01 Packages]# rpm -ivh zsh-5.0.2-25.el7.x86_64.rpm准备中… ################################# [100%]正在升级/安装… 1:zsh-5.0.2-25.el7 ################################# [100%][root@aminglinux-01 Packages]# 卸载 ：rpm -e 包名(什么都不提示是正常的)[root@aminglinux-01 Packages]# rpm -e zsh[root@aminglinux-01 Packages]# 查询安装的包： rpm -qapython-perf-3.10.0-514.el7.x86_64perl-XML-Dumper-0.81-17.el7.noarchlogrotate-3.8.6-12.el7.x86_64net-snmp-agent-libs-5.7.2-28.el7.x86_64nss-3.21.0-17.el7.x86_64 —-中间省略，特别多—-dhclient-4.2.5-47.el7.centos.x86_64crontabs-1.11-6.20121102git.el7.noarchlibdrm-2.4.67-3.el7.x86_64 查询指定包是否安装 ： rpm -q (如果安装了，就会有显示，没安装会提示未安装)[root@aminglinux-01 Packages]# rpm -q pppppp-2.4.5-33.el7.x86_64[root@aminglinux-01 Packages]# rpm -q pppp未安装软件包 pppp 查询指定包信息 ： rpm -qi (我们查一下vim-enhanced)[root@aminglinux-01 Packages]# rpm -qi vim-enhancedName : vim-enhancedEpoch : 2Version : 7.4.160Release : 1.el7_3.1Architecture: x86_64Install Date: 2017年08月23日 星期三 20时09分35秒Group : Applications/EditorsSize : 2292098License : VimSignature : RSA/SHA256, 2016年12月22日 星期四 01时14分11秒, Key ID 24c6a8a7f4a80eb5Source RPM : vim-7.4.160-1.el7_3.1.src.rpmBuild Date : 2016年12月22日 星期四 01时00分52秒Build Host : c1bm.rdu2.centos.orgRelocations : (not relocatable)Packager : CentOS BuildSystem http://bugs.centos.orgVendor : CentOSURL : http://www.vim.org/Summary : A version of the VIM editor which includes recent enhancementsDescription :VIM (VIsual editor iMproved) is an updated and improved version of thevi editor. Vi was the first real screen-based editor for UNIX, and isstill very popular. VIM improves on vi by adding new features:multiple windows, multi-level undo, block highlighting and more. Thevim-enhanced package contains a version of VIM with extra, recentlyintroduced features like Python and Perl interpreters. Install the vim-enhanced package if you’d like to use a version of theVIM editor which includes recently added enhancements likeinterpreters for the Python and Perl scripting languages. You’ll alsoneed to install the vim-common package.[root@aminglinux-01 Packages]# yum工具用法 yum安装方法 yum install 包名 如下，上面讲到用rpm安装和卸载会出现依赖问题非常麻烦。如果用yum安装和卸载就会自动安装或卸载所需要的依赖。[root@aminglinux-01 Packages]# rpm -ivh texlive-tools-svn26263.0-38.el7.noarch.rpm错误：依赖检测失败： texlive-base 被 texlive-tools-2:svn26263.0-38.el7.noarch 需要 texlive-kpathsea-bin 被 texlive-tools-2:svn26263.0-38.el7.noarch 需要 tex-kpathsea 被 texlive-tools-2:svn26263.0-38.el7.noarch 需要 tex(color.sty) 被 texlive-tools-2:svn26263.0-38.el7.noarch 需要 yum安装一个包只需要直接跟包名字就可以了。yum install 包名 ，在用texlive这个包试一下。事务概要安装 1 软件包 (+223 依赖软件包) 总下载量：118 M安装大小：226 MIs this ok [y/d/N]: 可以看到自动检测到需要223个依赖包。按y就会下载安装，按n就是不安装。如果这么多依赖用rpm一个一个安装的话会累死，这也是yum的优点。列出可用rpm包 ：yum list yum-plugin-tmprepo.noarch 1.1.31-45.el7 baseyum-plugin-tsflags.noarch 1.1.31-45.el7 baseyum-plugin-upgrade-helper.noarch 1.1.31-45.el7 baseyum-plugin-verify.noarch 1.1.31-45.el7 baseyum-plugin-versionlock.noarch 1.1.31-45.el7 baseyum-rhn-plugin.noarch 2.0.1-10.el7 baseyum-updateonboot.noarch 1.1.31-45.el7 baseyum-utils.noarch 1.1.31-45.el7 basezenity.x86_64 3.22.0-1.el7 base列出的非常多， 左侧是包名字和运行平台， 中间是版本号，和平台号。 最右侧是仓库名字。@开头的是已经安装过的包。/etc/yum.repos.d/这里面是yum仓库的配置文件。[root@localhost ~]# ls /etc/yum.repos.d/CentOS-Base.repo CentOS-CR.repo CentOS-Debuginfo.repo CentOS-fasttrack.repo CentOS-Media.repo CentOS-Sources.repo CentOS-Vault.repo yum模糊搜索包 ：yum search 要搜索的包名字 用搜索vim举例。 yum search vim[root@localhost ~]# yum search vim已加载插件：fastestmirrorLoading mirror speeds from cached hostfile base: mirrors.huaweicloud.com extras: mirrors.huaweicloud.com updates: mirrors.zju.edu.cn==================================================================== N/S matched: vim ====================================================================protobuf-vim.x86_64 : Vim syntax highlighting for Google Protocol Buffers descriptionsvim-X11.x86_64 : The VIM version of the vi editor for the X Window Systemvim-common.x86_64 : The common files needed by any version of the VIM editorvim-enhanced.x86_64 : A version of the VIM editor which includes recent enhancementsvim-filesystem.x86_64 : VIM filesystem layoutvim-minimal.x86_64 : A minimal version of the VIM editor 名称和简介匹配 only，使用“search all”试试。[root@localhost ~]# yum 精确过滤出想要的包名：yum list |grep ‘包名’ 用vim搜索举例 。 yum list |grep ‘vim’ 。不光能精确过滤，还有颜色显示。 yum grouplist 列出安装包组 [root@localhost ~]# yum grouplist已加载插件：fastestmirror没有安装组信息文件Maybe run: yum groups mark convert (see man yum)Loading mirror speeds from cached hostfile base: mirrors.huaweicloud.com extras: mirrors.huaweicloud.com updates: mirrors.zju.edu.cn可用的环境分组： 最小安装 基础设施服务器 计算节点 文件及打印服务器 基本网页服务器 虚拟化主机 带 GUI 的服务器 GNOME 桌面 KDE Plasma Workspaces 开发及生成工作站可用组： 传统 UNIX 兼容性 兼容性程序库 图形管理工具 安全性工具 开发工具 控制台互联网工具 智能卡支持 科学记数法支持 系统管理 系统管理工具完成 中文显示可能无法使用。需要用 LANG=en 转换英文看一下[root@localhost ~]# LANG=en[root@localhost ~]# yum grouplistFailed to set locale, defaulting to CLoaded plugins: fastestmirrorThere is no installed groups file.Maybe run: yum groups mark convert (see man yum)Loading mirror speeds from cached hostfile base: mirrors.huaweicloud.com extras: mirrors.huaweicloud.com updates: mirrors.zju.edu.cnAvailable Environment Groups: Minimal Install Compute Node Infrastructure Server File and Print Server Basic Web Server Virtualization Host Server with GUI GNOME Desktop KDE Plasma Workspaces Development and Creative WorkstationAvailable Groups: Compatibility Libraries Console Internet Tools Development Tools Graphical Administration Tools Legacy UNIX Compatibility Scientific Support Security Tools Smart Card Support System Administration Tools System ManagementDone yum groupinstall 安装组包 用法 ：yum groupinstall 包名 。 如果包名字有空格，用单引号引起来。如：yum groupinstall ‘Development and Creative Workstation’yum 卸载软件包 ：yum remove 包名 卸载软件包也是会把所有的依赖卸载。所以卸载时候尽量不要加-y, 以免出现意外。yum 升级软件包 ：yum update 包名 如果yum update 不加包名会自动升级系统中能升级的所有包。包括系统本身。yum provides “/*/vim” 根据命令搜索包名字 [root@localhost ~]# yum provides “/*/vim”Failed to set locale, defaulting to CLoaded plugins: fastestmirrorLoading mirror speeds from cached hostfile base: mirrors.huaweicloud.com extras: mirrors.huaweicloud.com updates: mirrors.zju.edu.cnbase/7/x86_64/filelists_db | 6.9 MB 00:00:06extras/7/x86_64/filelists_db | 519 kB 00:00:00updates/7/x86_64/filelists_db | 1.3 MB 00:00:00cmake-2.8.12.2-2.el7.x86_64 : Cross-platform make systemRepo : baseMatched from:Filename : /usr/share/cmake/editors/vim 2:docker-unit-test-1.13.1-53.git774336d.el7.centos.x86_64 : Automates deployment of containerized applications - for running unit testsRepo : extrasMatched from:Filename : /var/lib/docker-unit-test/v1.10-migrator-c417a6a022c5023c111662e8280f885f6ac259be/Godeps/_workspace/src/github.com/docker/docker/contrib/syntax/vimFilename : /var/lib/docker-unit-test/contrib/syntax/vimFilename : /var/lib/docker-unit-test/runc-e9c345b3f906d5dc5e8100b05ce37073a811c74a/Godeps/_workspace/src/github.com/docker/docker/contrib/syntax/vimFilename : /var/lib/docker-unit-test/docker-novolume-plugin-385ec70baac3ef356f868f391c8d7818140fbd44/Godeps/_workspace/src/github.com/docker/docker/contrib/syntax/vimFilename : /var/lib/docker-unit-test/containerd-296f1f80d6c6a83cc625163f863e53d3287328ee/vendor/src/github.com/docker/docker/contrib/syntax/vim 2:docker-unit-test-1.13.1-58.git87f2fab.el7.centos.x86_64 : Automates deployment of containerized applications - for running unit testsRepo : extrasMatched from:Filename : /var/lib/docker-unit-test/v1.10-migrator-c417a6a022c5023c111662e8280f885f6ac259be/Godeps/_workspace/src/github.com/docker/docker/contrib/syntax/vimFilename : /var/lib/docker-unit-test/contrib/syntax/vimFilename : /var/lib/docker-unit-test/runc-e9c345b3f906d5dc5e8100b05ce37073a811c74a/Godeps/_workspace/src/github.com/docker/docker/contrib/syntax/vimFilename : /var/lib/docker-unit-test/docker-novolume-plugin-385ec70baac3ef356f868f391c8d7818140fbd44/Godeps/_workspace/src/github.com/docker/docker/contrib/syntax/vimFilename : /var/lib/docker-unit-test/containerd-296f1f80d6c6a83cc625163f863e53d3287328ee/vendor/src/github.com/docker/docker/contrib/syntax/vim 2:docker-unit-test-1.13.1-63.git94f4240.el7.centos.x86_64 : Automates deployment of containerized applications - for running unit testsRepo : extrasMatched from:Filename : /var/lib/docker-unit-test/v1.10-migrator-c417a6a022c5023c111662e8280f885f6ac259be/Godeps/_workspace/src/github.com/docker/docker/contrib/syntax/vimFilename : /var/lib/docker-unit-test/contrib/syntax/vimFilename : /var/lib/docker-unit-test/runc-e9c345b3f906d5dc5e8100b05ce37073a811c74a/Godeps/_workspace/src/github.com/docker/docker/contrib/syntax/vimFilename : /var/lib/docker-unit-test/docker-novolume-plugin-385ec70baac3ef356f868f391c8d7818140fbd44/Godeps/_workspace/src/github.com/docker/docker/contrib/syntax/vimFilename : /var/lib/docker-unit-test/containerd-296f1f80d6c6a83cc625163f863e53d3287328ee/vendor/src/github.com/docker/docker/contrib/syntax/vim git-1.8.3.1-13.el7.x86_64 : Fast Version Control SystemRepo : baseMatched from:Filename : /usr/share/doc/git-1.8.3.1/contrib/vim 2:vim-common-7.4.160-4.el7.x86_64 : The common files needed by any version of the VIM editorRepo : baseMatched from:Filename : /usr/share/vim 2:vim-enhanced-7.4.160-4.el7.x86_64 : A version of the VIM editor which includes recent enhancementsRepo : baseMatched from:Filename : /usr/bin/vim 2:vim-enhanced-7.4.160-2.el7.x86_64 : A version of the VIM editor which includes recent enhancementsRepo : @baseMatched from:Filename : /usr/bin/vim 可以根据命令路径来判断包名字。比如在/bin下或者/sbin下。yum 搭建本地仓库 有些特殊情况下，服务器没有联网，但是想要yum安装一些软件。这时候就需要搭建一个本地的yum仓库来使用。思路是先准备一个有yum包的储存盘，比如光盘。然后把之前的yum仓库文件备份下删除，然后添加新的仓库配置文件。 先备份，然后删除[root@localhost ~]# cp -r /etc/yum.repos.d /etc/yum.repos.d.bak[root@localhost ~]# rm -f /etc/yum.repos.d/* 在/etc/yum.repos.d/下创建dvd.repo ,内容如下：[dvd]name=install dvdbaseurl=file:///mnt 定义rpm包放在那里enable=1 是否可用，1就是可用gpcheck=0 是否检测，0不检测。 之后要清缓存。yum clean all[root@localhost ~]# yum clean allFailed to set locale, defaulting to CLoaded plugins: fastestmirrorCleaning repos: dvdCleaning up everythingCleaning up list of fastest mirrors 然后yum list 查看下(可以看到仓库都变成了dvd)xsettings-kde.x86_64 0.12.3-7.el7 dvdxsom.noarch 0-10.20110809svn.el7 dvdxterm.x86_64 295-3.el7 dvdxulrunner.x86_64 31.6.0-2.el7.centos dvdxvattr.x86_64 1.3-27.el7 dvdxz-devel.x86_64 5.2.2-1.el7 dvdyajl.x86_64 2.0.4-4.el7 dvdyelp.x86_64 1:3.14.2-1.el7 dvdyelp-libs.x86_64 1:3.14.2-1.el7 dvdyelp-xsl.noarch 3.14.0-1.el7 dvdyum 更换国内源 contos7默认yum源指向的是国外的网站，有的时候yum装程序特别的慢。这时候就需要把yum源改成国内的，下载速度就会提升。 首先删除rm -f CentOS-Base.repo 这个源 下载163源 CentOS7-Base-163.repowgethttp://mirrors.163.com/.help/CentOS7-Base-163.repo或者curl -O http://mirrors.163.com/.help/CentOS7-Base-163.repo yum clean all 清缓存 yum list 测试或者安装个wge试一下，就是可以用了。安装扩展源 光安装一个163源不够用，很多rpm都没有。所以安装一个扩展源。 yum install -y epel-release 安装安装好后会在 /etc/yum.repos.d下新生成一个epel.repoepel.repo yum listzvbi.x86_64 0.2.35-1.el7 epelzvbi-devel.x86_64 0.2.35-1.el7 epelzvbi-fonts.noarch 0.2.35-1.el7 epelzziplib.i686 0.13.62-5.el7 basezziplib.x86_64 0.13.62-5.el7 basezziplib-devel.i686 0.13.62-5.el7 baseyum下载rpm包 之前说过搭建本地yum仓库但是是用光驱里面的rpm包做的实验，而不是真正所需要的本地仓库。下面说一下如何用yum下载所需要的rpm包。用法： yum install 包名 –downloadonly 这种用法限于该包还没有安装。已经安装过的会提醒。下载到/var/cache/yum/x86_64/7/仓库名/packages下面。用这个命令可以在已经安装该包的情况下下载rpm包：yum reinstall 包名 –downloadonly 指定下载路径 yum install 包名 –downloadonly –downloaddir=路径 比如用zsh这个包做实验[root@localhost ~]# yum install zsh –downloadonly –downloaddir=/tmp/Failed to set locale, defaulting to CLoaded plugins: fastestmirrorLoading mirror speeds from cached hostfile epel: mirrors.tongji.edu.cnResolving Dependencies–&gt; Running transaction check—&gt; Package zsh.x86_64 0:5.0.2-28.el7 will be installed–&gt; Finished Dependency Resolution Dependencies Resolved ========================================================================================================================================================== Package Arch Version Repository SizeInstalling:zsh x86_64 5.0.2-28.el7 base 2.4 M Transaction SummaryInstall 1 Package Total download size: 2.4 MInstalled size: 5.6 MBackground downloading packages, then exiting:zsh-5.0.2-28.el7.x86_64.rpm | 2.4 MB 00:00:02exiting because “Download Only” specified[root@localhost ~]# ls /tmp/1.txt systemd-private-a44b0f41787b47de9f672a72cec9768d-vmtoolsd.service-FOn2fg yum_save_tx.2018-05-30.11-10.T6z0Ih.yumtxpasswd.sh yum_save_tx.2018-05-30.09-10.cW8ODj.yumtx zsh-5.0.2-28.el7.x86_64.rpm[root@localhost ~]# 源码包安装 约定：以后下载的安装包都放在 /usr/local/src/下 先下载一个httpd的源码包，下载好后是一个压缩包，需要解压。[root@localhost src]# wget http://mirrors.cnnic.cn/apache/httpd/httpd-2.4.33.tar.gz–2018-05-30 11:20:40– http://mirrors.cnnic.cn/apache/httpd/httpd-2.4.33.tar.gzResolving mirrors.cnnic.cn (mirrors.cnnic.cn)… 101.6.8.193, 2402:f000:1:408:8100::1Connecting to mirrors.cnnic.cn (mirrors.cnnic.cn)|101.6.8.193|:80… connected.HTTP request sent, awaiting response… 200 OKLength: 9076901 (8.7M) [application/octet-stream]Saving to: ‘httpd-2.4.33.tar.gz’ 100%[================================================================================================================&gt;] 9,076,901 1.59MB/s in 5.9s 2018-05-30 11:20:46 (1.46 MB/s) - ‘httpd-2.4.33.tar.gz’ saved [9076901/9076901] [root@localhost src]# lshttpd-2.4.33.tar.gz 解压好后，进入目录，找到配置文件README 。这里面是一些软件的说明介绍。 还有一个文件是INSTALL 里面是安装文档。教程。开头介绍了安装步骤。[root@localhost httpd-2.4.33]# cat INSTALL APACHE INSTALLATION OVERVIEW Quick Start - UnixFor complete installation documentation, see [ht]docs/manual/install.html orhttp://httpd.apache.org/docs/2.4/install.html $ ./configure –prefix=PREFIX $ make $ make install $ PREFIX/bin/apachectl start ./configure –help是可以查看安装都有哪些功能可选安装的。 ./configure –prefix=/usr/local/apache2 指定安装目录[root@localhost httpd-2.4.33]# ./configure –prefix=/usr/local/apache2checking for chosen layout… Apachechecking for working mkdir -p… yeschecking for grep that handles long lines and -e… /usr/bin/grepchecking for egrep… /usr/bin/grep -Echecking build system type… x86_64-pc-linux-gnuchecking host system type… x86_64-pc-linux-gnuchecking target system type… x86_64-pc-linux-gnuconfigure:configure: Configuring Apache Portable Runtime library…configure:checking for APR… noconfigure: error: APR not found. Please read the documentation. 直接报错了。 输入 echo $?查看如果是0就是上面命令执行没有问题，如果是1或则别的数说明上面命令报错了。 根据报错安装yum install apr apr-util apr-devel 然后安装yum install gcc 然后 make 然后 make install 卸载源码包的安装就是删除安装文件。]]></content>
      <tags>
        <tag>工作日志</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[9月30日 6.1 压缩打包介绍6.2 gzip压缩工具6.3 bzip2压缩工具6.4 xz压缩工具实]]></title>
    <url>%2F2018%2F12%2F31%2F9%E6%9C%8830%E6%97%A5%20%20%E5%8E%8B%E7%BC%A9%E6%89%93%E5%8C%85%E4%BB%8B%E7%BB%8D%20%20gzip%E5%8E%8B%E7%BC%A9%E5%B7%A5%E5%85%B7%2F</url>
    <content type="text"><![CDATA[压缩打包介绍 众所周知文件压缩后所占的磁盘空间比较小，而且由于文件压缩后大小变小了所以通过网络传输时速度就更快，并且减少了网络带宽资源的占用。在服务器机房里的网络和家用的不一样，一般服务器的网络是上下行对等的。家用网络只有下载速度快，上传速度慢，所以服务器机房的网络带宽比较昂贵，压缩文件就是节省带宽资源的方法之一。在Linux里文件的后缀名可以任意的去自定义，但是最好还是遵循常规的格式去定义文件的后缀，这有利于方便区分、识别文件。 6.2 gzip压缩工具 例如我使用gzip压缩一个1.txt文件： 解压1.txt文件： 因为这个文件在压缩前有一些虚的空间，所以压缩后再解压的文件大小就不一样了，就像海绵一样。gzip可以指定压缩的级别，一共有1-9个级别，默认是6级别，1级别是压缩的最不严谨的，所以压缩出来的文件要大一些，但是耗费的cpu资源比较少。9则是压缩的最严谨的，但是耗费的cpu资源就比较多，一般情况下压缩级别默认即可。 指定压缩级别示例： gunzip命令也可以解压缩文件： 使用file命令查看压缩文件的信息： 使用zcat命令查看gz格式的压缩文件的内容，这个命令实际是先解压再查看： 从以上实验可以知道使用gzip压缩文件后原本的文件会消失从而变成压缩文件，不过gzip加-c选项可以让原本的文件不消失，重新生成一个压缩文件，并且还可以指定压缩文件的存放路径： 相对的解压也可以这么做： 注意：gzip不能压缩目录6.3 bzip2压缩工具这个bzip工具比起gzip来说，要压缩得更狠一些，也就代表着耗费的cpu资源更多，而且这两个工具的压缩算法不一样。最小化安装可能没有这个工具，需要使用yum install -y bzip2命令安装： bzip2和gzip的用法几乎是一模一样的： 解压同样的可以使用两个命令： 可以加-c选项指定压缩文件的存放路径： 相对的解压也可以这么做: bzip2也有压缩级别，可以指定压缩的级别，也是1-9的压缩级别，默认的压缩级别是9，所以一般情况下不需要指定压缩级别。 示例： 可以使用file查看压缩文件的信息： bzcat命令可以查看bz2格式的压缩文件的内容，原理和gzip的zcat命令一样： 6.4 xz压缩工具 xz压缩工具和之前的两个压缩工具的用法也差不多，但是并不经常使用，但是在常用的tar包里面，会经常看到后缀为tar.xz的压缩包，所以此工具也是要了解一下的。 压缩示例： 从压缩的结果可以看出，这个xz工具对文件的压缩比前两个工具更狠，直接压缩到几十k了，相应的更耗费cpu资源。 同样的xz工具也有压缩级别，可以指定压缩的级别，也是1-9的压缩级别，默认的压缩级别是6。解压缩示例： 可以加-c选项指定压缩文件的存放路径： 解压也可以这么做： xzcat命令查看压缩文件的内容： 可以使用file查看压缩文件的信息：]]></content>
      <tags>
        <tag>工作日志</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[9月29日 进入编辑模式vim命令模式 vim实践]]></title>
    <url>%2F2018%2F12%2F31%2F9%E6%9C%8829%E6%97%A5%E8%BF%9B%E5%85%A5%E7%BC%96%E8%BE%91%E6%A8%A1%E5%BC%8F%E5%8F%8A%E5%AE%9E%E6%88%98%2F</url>
    <content type="text"><![CDATA[进入编辑模式所谓编辑模式就是进入可以编辑文件内容的状态，就和进入word文档进入记事本是一样的，最普遍进入编辑模式的方式就是按i，即进入当前光标所在位置的编辑模式。下面介绍几种进入编辑模式的方式：Shift+i也可以进入编辑模式，但是光标会移动到光标所在行的行首。按o键则会往下换一行后进入编辑模式。Shift+o则是往上换一行后进入编辑模式。按a键光标会在当前的字符往后移动一位后，进入编辑模式。 Shift+a光标会移动到光标所在行的行末，并且进入编辑模式。 5.6 vim命令模式 :%s/str1/str2/ 用字符串 str2 替换行中首次出现的字符串 str1 :s/str1/str2/g 用字符串 str2 替换行中所有出现的字符串 str1 :.,$ s/str1/str2/g 用字符串 str2 替换正文当前行到末尾所有出现的字符串 str1 :1,$ s/str1/str2/g 用字符串 str2 替换正文中所有出现的字符串 str1 :g/str1/s//str2/g 功能同上 :m,ns/str1/str2/g 将从m行到n行的str1替换成str2 从上述替换命令可以看到：g 放在命令末尾，表示对搜索字符串的每次出现进行替换,不止匹配每行中的第一次出现；不加 g，表示只对搜索字符串的首次出现进行替换；g 放在命令开头，表示对正文中所有包含搜索字符串的行进行替换操作s 表示后面跟着一串替换的命令% 表示替换范围是所有行，即全文 x保存退出类似于wq，它们的区别是：在没有对文件进行操作的情况下使用wq会更改mtime，使用x则不会更改mtime，除非你对文件进行操作了。 5.7 vim实践 扩展：vim的特殊用法 http://www.apelearn.com/bbs/thread-9334-1-1.htmlvim常用快捷键总结 http://www.apelearn.com/bbs/thread-407-1-1.htmlvim快速删除一段字符 http://www.apelearn.com/bbs/thread-842-1-1.htmlvim乱码 http://www.apelearn.com/bbs/thread-6753-1-1.html小键盘问题 http://www.apelearn.com/bbs/thread-7215-1-1.htmlvim加密 http://www.apelearn.com/bbs/thread-7750-1-1.html]]></content>
      <tags>
        <tag>工作日志</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[9月28日 5.1-4 vim介绍 vim颜色显示和移动光标 vim一般模式下移动光标 vim一般模式下复制、剪切和粘贴]]></title>
    <url>%2F2018%2F12%2F29%2F9%E6%9C%8828%E6%97%A5%20vim%E4%BB%8B%E7%BB%8D%2F</url>
    <content type="text"><![CDATA[Vim是一个类似于Vi的著名的功能强大、高度可定制的文本编辑器，在Vi的基础上改进和增加了很多特性。VIM是自由软件。Vim是从 vi 发展出来的一个文本编辑器。代码补全、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用，和Emacs并列成为类Unix、Linux系统用户最喜欢的文本编辑器。 1.如果你的操作系统没有vim，可以使yum install -y vim-enhanced 命令进行安装： 2.Vim查看文本时是带有颜色显示的，例如我使用vim打开etc目录下的passwd文件： 3.Vim的一般模式，就是还没有按i进入编辑模式的状态，在一般模式下可以复制粘贴行和使用dd删除某一行。 4.Vim的编辑模式，就是按i或a键进入的文件编辑状态，能够编辑文件的内容。 5.Vim的命令模式，就是使用类似less命令去对文件进行操作，包括使用wq保存退出、q退出和q!强制退出等等，这些都属于命令模式。 5.2 vim颜色显示和移动光标由上面使用vim查看passwd文件可知vim是带有颜色显示的，但是如果把passwd文件拷贝到别的目录下，会发现使用vim查看却是没有颜色，例如我拷贝到tmp目录下： 此例说明相同的文件在不同的目录下，可能会导致颜色不显示。在CentOS中每个系统目录的性质不一样，etc目录下的是配置文件而tmp目录下的是临时文件，所以etc下的文件在别的目录不显示颜色也是正常的。 我们再看一个例子，我把etc下的fstap文件拷贝到tmp目录下，然后使用vim查看： 可以看到etc下的文件在tmp下也能显示颜色了，这是因为fstab文件的最上面的内容有以#号开头的，如果在passwd文件里也加上几行以#号开头的内容，那么这几行内容也是会显示颜色的： 这说明其实此文件本身并不是没有颜色，而是文件的内容不具备显示颜色的条件。 不仅可以根据文件内容显示颜色，还可以根据文件的名字，让文件内容显示颜色，例如我把passwd改为passwd.sh： Vim的配置文件是vimrc在etc目录下： Vim比较高级的用法都可以在此配置文件中配置，例如代码高亮、自动缩进等等。 5.3 vim一般模式下移动光标 补充：在使用按键移动光标的时候，加上一个数字，就可以根据这个数字来移动多少位字符。5.4 vim一般模式下复制、剪切和粘贴]]></content>
      <tags>
        <tag>工作日志</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[9月27日 lvm讲解 及磁盘故障安例]]></title>
    <url>%2F2018%2F12%2F28%2F9%E6%9C%8827%E6%97%A5lvs%20%E8%AE%B2%E8%A7%A3%20%E5%8F%8A%E7%A3%81%E7%9B%98%E6%95%85%E9%9A%9C%E5%AE%89%E4%BE%8B%2F</url>
    <content type="text"><![CDATA[lvm讲解LVM是逻辑盘卷管理（LogicalVolumeManager）的简称，它是Linux环境下对磁盘分区进行管理的一种机制，LVM是建立在硬盘和 分区之上的一个逻辑层，来提高磁盘分区管理的灵活性。通过LVM系统管理员可以轻松管理磁盘分区，如：将若干个磁盘分区连接为一个整块的卷组 （volumegroup），形成一个存储池。管理员可以在卷组上随意创建逻辑卷组（logicalvolumes），并进一步在逻辑卷组上创建文件系 统。管理员通过LVM可以方便的调整存储卷组的大小，并且可以对磁盘存储按照组的方式进行命名、管理和分配，例如按照使用用途进行定义：“development”和“sales”，而不是使用物理磁盘名“sda”和“sdb”。而且当系统添加了新的磁盘，通过LVM管理员就不必将磁盘的 文件移动到新的磁盘上以充分利用新的存储空间，而是直接扩展文件系统跨越磁盘即可。 • 首先准备磁盘分区 o fdisk /dev/sdb o n 创建三个新分区 o t 改变分区类型为8e 命令(输入 m 获取帮助)：nPartition type: p primary (2 primary, 0 extended, 2 free) e extendedSelect (default p): p分区号 (3,4，默认 3)：起始 扇区 (6293504-20971519，默认为 6293504)：将使用默认值 6293504Last 扇区, +扇区 or +size{K,M,G} (6293504-20971519，默认为 20971519)：+1g不支持的后缀：“g”。支持：10^N: KB (千字节), MB (兆字节), GB (吉字节) 2^N: K (约千字节), M (约兆字节), G (约吉字节)Last 扇区, +扇区 or +size{K,M,G} (6293504-20971519，默认为 20971519)：+1G分区 3 已设置为 Linux 类型，大小设为 1 GiB 命令(输入 m 获取帮助)：t分区号 (1-3，默认 3)：3Hex 代码(输入 L 列出所有代码)：8e已将分区“Linux”的类型更改为“Linux LVM” 命令(输入 m 获取帮助)：p 磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区Units = 扇区 of 1 * 512 = 512 bytes扇区大小(逻辑/物理)：512 字节 / 512 字节I/O 大小(最小/最佳)：512 字节 / 512 字节磁盘标签类型：dos磁盘标识符：0x34aa2b57 设备 Boot Start End Blocks Id System/dev/sdb1 2048 4196351 2097152 83 Linux/dev/sdb2 4196352 6293503 1048576 8e Linux LVM/dev/sdb3 6293504 8390655 1048576 8e Linux LVM 命令(输入 m 获取帮助)：• 准备物理卷o pvcreate /dev/sdb1o pvcreate /dev/sdb2o pvcreate /dev/sdb3o pvdisplay 列出当前的物理卷o pvremove /dev/sdb3 删除物理卷默认系统没有安装lvm ,yum安装一下[root@localhost ~]# pvcreate /dev/sdb2-bash: pvcreate: 未找到命令[root@localhost ~]# yum install -y lvm2已加载插件：fastestmirrorbase | 3.6 kB 00:00:00extras | 3.4 kB 00:00:00updates | 3.4 kB 00:00:00extras/7/x86_64/primary_db | 191 kB 00:00:02Loading mirror speeds from cached hostfile安装完成后运行pvcreate /dev/sdb2报错[root@localhost ~]# pvcreate /dev/sdb2 Device /dev/sdb2 not found (or ignored by filtering).[root@localhost ~]#实际上系统里面还没有新建两个lvm的文件[root@localhost ~]# fdisk -l /dev/sdb 磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区Units = 扇区 of 1 * 512 = 512 bytes扇区大小(逻辑/物理)：512 字节 / 512 字节I/O 大小(最小/最佳)：512 字节 / 512 字节磁盘标签类型：dos磁盘标识符：0x34aa2b57 设备 Boot Start End Blocks Id System/dev/sdb1 2048 4196351 2097152 83 Linux/dev/sdb2 4196352 6293503 1048576 8e Linux LVM/dev/sdb3 6293504 8390655 1048576 8e Linux LVM[root@localhost ~]#[root@localhost ~]# ls /dev/sdb2ls: 无法访问/dev/sdb2: 没有那个文件或目录这时候运行下partprobe就可以了[root@localhost ~]# partprobeWarning: 无法以读写方式打开 /dev/sr0 (只读文件系统)。/dev/sr0 已按照只读方式打开。[root@localhost ~]# partprobe /dev/sdb[root@localhost ~]# ls /dev/sdb2/dev/sdb2再次运行 pvcreate /dev/sdb2[root@localhost ~]# pvcreate /dev/sdb2 Physical volume “/dev/sdb2” successfully created.[root@localhost ~]# pvcreate /dev/sdb3 Physical volume “/dev/sdb3” successfully created.[root@localhost ~]#创建完物理卷之后用pvdisplay查看或者pvs查看[root@localhost ~]# pvdisplay “/dev/sdb2” is a new physical volume of “1.00 GiB” — NEW Physical volume — PV Name /dev/sdb2 VG Name PV Size 1.00 GiB Allocatable NO PE Size 0 Total PE 0 Free PE 0 Allocated PE 0 PV UUID C6Uu8B-N7Ws-UGVs-L4FA-IsCJ-JhbW-0pOA4t “/dev/sdb3” is a new physical volume of “1.00 GiB” — NEW Physical volume — PV Name /dev/sdb3 VG Name PV Size 1.00 GiB Allocatable NO PE Size 0 Total PE 0 Free PE 0 Allocated PE 0 PV UUID pDgD89-BQRT-SigZ-08x4-Knd5-C6Mf-qhy3P6 [root@localhost ~]# • 创建完物理卷之后，下面开始创建卷组创建卷组命令：vgcreate 卷组名字 /dev/sdb2 /dev/sdb3[root@localhost ~]# vgcreate vg1 /dev/sdb2 /dev/sdb3 Volume group “vg1” successfully created[root@localhost ~]# 查看卷组命令：vgdisplay [root@localhost ~]# vgdisplay — Volume group — VG Name vg1 System ID Format lvm2 Metadata Areas 2 Metadata Sequence No 1 VG Access read/write VG Status resizable MAX LV 0 Cur LV 0 Open LV 0 Max PV 0 Cur PV 2 Act PV 2 VG Size 1.99 GiB PE Size 4.00 MiB Total PE 510 Alloc PE / Size 0 / 0 Free PE / Size 510 / 1.99 GiB VG UUID 96JUV1-IK7V-hud2-Rrxd-krvz-u44H-J9sMpC [root@localhost ~]# vgs VG #PV #LV #SN Attr VSize VFree vg1 2 0 0 wz–n- 1.99g 1.99g[root@localhost ~]#• 有了卷组之后就可以创建逻辑卷了用法 ：lvcreate -L 大小 名字 从哪个卷组创建[root@localhost ~]# lvcreate -L 100M -n lv1 vg1 Logical volume “lv1” created.[root@localhost ~]#• 之后就可以格式化了[root@localhost ~]# mkfs.ext4 /dev/vg1/lv1mke2fs 1.42.9 (28-Dec-2013)文件系统标签=OS type: Linux块大小=1024 (log=0)分块大小=1024 (log=0)Stride=0 blocks, Stripe width=0 blocks25688 inodes, 102400 blocks5120 blocks (5.00%) reserved for the super user第一个数据块=1Maximum filesystem blocks=3368550413 block groups8192 blocks per group, 8192 fragments per group1976 inodes per groupSuperblock backups stored on blocks: 8193, 24577, 40961, 57345, 73729 Allocating group tables: 完成正在写入inode表: 完成Creating journal (4096 blocks): 完成Writing superblocks and filesystem accounting information: 完成 [root@localhost ~]#• 挂载[root@localhost ~]# mount /dev/vg1/lv1 /mnt/[root@localhost ~]# df -h文件系统 容量 已用 可用 已用% 挂载点/dev/sda3 18G 1.2G 17G 7% /devtmpfs 479M 0 479M 0% /devtmpfs 489M 0 489M 0% /dev/shmtmpfs 489M 6.7M 482M 2% /runtmpfs 489M 0 489M 0% /sys/fs/cgroup/dev/mapper/vg1-lv1 93M 1.6M 85M 2% /mnt/dev/sda1 197M 109M 88M 56% /boottmpfs 98M 0 98M 0% /run/user/0扩容逻辑卷• lvresize -L 300M /dev/vg1/lv1 重新设置卷大小• e2fsck -f /dev/vg1/lv1 检查磁盘错误（ext4执行）• resize2fs /dev/vg1/lv1 更新逻辑卷信息（ext4执行）• xfs_growfs /dev/vg1/lv1 xfs文件系统需要执行• 首先卸载挂载逻辑卷[root@localhost ~]# umount /mnt/[root@localhost ~]# df -h文件系统 容量 已用 可用 已用% 挂载点/dev/sda3 18G 1.2G 17G 7% /devtmpfs 479M 0 479M 0% /devtmpfs 489M 0 489M 0% /dev/shmtmpfs 489M 6.7M 482M 2% /runtmpfs 489M 0 489M 0% /sys/fs/cgroup/dev/sdb1 1.9G 6.0M 1.8G 1% /mnt/dev/sda1 197M 109M 88M 56% /boottmpfs 98M 0 98M 0% /run/user/0 • 在执行扩容 lvresize -L 300M /dev/vg1/lv1[root@localhost ~]# lvresize -L 300M /dev/vg1/lv1 Size of logical volume vg1/lv1 changed from 100.00 MiB (25 extents) to 300.00 MiB (75 extents). Logical volume vg1/lv1 successfully resized.• 检查磁盘错误看看有没有问题[root@localhost ~]# e2fsck -f /dev/vg1/lv1e2fsck 1.42.9 (28-Dec-2013)第一步: 检查inode,块,和大小第二步: 检查目录结构第3步: 检查目录连接性Pass 4: Checking reference counts第5步: 检查簇概要信息/dev/vg1/lv1: 11/25688 files (9.1% non-contiguous), 8896/102400 blocks[root@localhost ~]# • 然后更新逻辑卷信息，不然看不到逻辑卷增加[root@localhost ~]# resize2fs /dev/vg1/lv1resize2fs 1.42.9 (28-Dec-2013)Resizing the filesystem on /dev/vg1/lv1 to 307200 (1k) blocks.The filesystem on /dev/vg1/lv1 is now 307200 blocks long. [root@localhost ~]#• 挂载一下[root@localhost ~]# mount /dev/vg1/lv1 /mnt/[root@localhost ~]# df -h文件系统 容量 已用 可用 已用% 挂载点/dev/sda3 18G 1.2G 17G 7% /devtmpfs 479M 0 479M 0% /devtmpfs 489M 0 489M 0% /dev/shmtmpfs 489M 6.7M 482M 2% /runtmpfs 489M 0 489M 0% /sys/fs/cgroup/dev/mapper/vg1-lv1 287M 2.0M 266M 1% /mnt/dev/sda1 197M 109M 88M 56% /boottmpfs 98M 0 98M 0% /run/user/0[root@localhost ~]#• xfs格式扩容先卸载然后重新格式化逻辑卷[root@localhost ~]# umount /mnt/[root@localhost ~]# mkfs.xfs -f /dev/vg1/lv1meta-data=/dev/vg1/lv1 isize=512 agcount=4, agsize=6400 blks = sectsz=512 attr=2, projid32bit=1 = crc=1 finobt=0, sparse=0data = bsize=4096 blocks=25600, imaxpct=25 = sunit=0 swidth=0 blksnaming =version 2 bsize=4096 ascii-ci=0 ftype=1log =internal log bsize=4096 blocks=855, version=2 = sectsz=512 sunit=0 blks, lazy-count=1realtime =none extsz=4096 blocks=0, rtextents=0[root@localhost ~]# 然后挂在上在扩容一下：lvresize -L 200M /dev/vg1/lv1[root@localhost ~]# lvs LV VG Attr LSize Pool Origin Data% Meta% Move Log Cpy%Sync Convert lv1 vg1 -wi-a—– 100.00m[root@localhost ~]# lvresize -L 200M /dev/vg1/lv1 Size of logical volume vg1/lv1 changed from 100.00 MiB (25 extents) to 200.00 MiB (50 extents). Logical volume vg1/lv1 successfully resized.[root@localhost ~]# lvs LV VG Attr LSize Pool Origin Data% Meta% Move Log Cpy%Sync Convert lv1 vg1 -wi-a—– 200.00m[root@localhost ~]# df -h文件系统 容量 已用 可用 已用% 挂载点/dev/sda3 18G 1.2G 17G 7% /devtmpfs 479M 0 479M 0% /devtmpfs 489M 0 489M 0% /dev/shmtmpfs 489M 6.7M 482M 2% /runtmpfs 489M 0 489M 0% /sys/fs/cgroup/dev/mapper/vg1-lv1 97M 5.2M 92M 6% /mnt/dev/sda1 197M 109M 88M 56% /boottmpfs 98M 0 98M 0% /run/user/0 这时候文件系统还是没有变化的。需要在执行一下xfs_growfs /dev/vg1/lv1[root@localhost ~]# xfs_growfs /dev/vg1/lv1meta-data=/dev/mapper/vg1-lv1 isize=512 agcount=4, agsize=6400 blks = sectsz=512 attr=2, projid32bit=1 = crc=1 finobt=0 spinodes=0data = bsize=4096 blocks=25600, imaxpct=25 = sunit=0 swidth=0 blksnaming =version 2 bsize=4096 ascii-ci=0 ftype=1log =internal bsize=4096 blocks=855, version=2 = sectsz=512 sunit=0 blks, lazy-count=1realtime =none extsz=4096 blocks=0, rtextents=0data blocks changed from 25600 to 51200[root@localhost ~]# df -h文件系统 容量 已用 可用 已用% 挂载点/dev/sda3 18G 1.2G 17G 7% /devtmpfs 479M 0 479M 0% /devtmpfs 489M 0 489M 0% /dev/shmtmpfs 489M 6.7M 482M 2% /runtmpfs 489M 0 489M 0% /sys/fs/cgroup/dev/mapper/vg1-lv1 197M 5.3M 192M 3% /mnt/dev/sda1 197M 109M 88M 56% /boottmpfs 98M 0 98M 0% /run/user/0 缩减逻辑卷（xfs不支持）• 先umount• e2fsck -f /dev/vg1/lv1 检查磁盘错误（ext）• resize2fs /dev/vg1/lv1 100M 更新逻辑卷信息（ext）• lvresize -L 100M /dev/vg1/lv1 从新设置卷大小• 先卸载挂载[root@localhost ~]# umount /mnt/[root@localhost ~]# df -h文件系统 容量 已用 可用 已用% 挂载点/dev/sda3 18G 1.2G 17G 7% /devtmpfs 479M 0 479M 0% /devtmpfs 489M 0 489M 0% /dev/shmtmpfs 489M 6.7M 482M 2% /runtmpfs 489M 0 489M 0% /sys/fs/cgroup/dev/sdb1 1.9G 6.0M 1.8G 1% /mnt/dev/sda1 197M 109M 88M 56% /boottmpfs 98M 0 98M 0% /run/user/0 • e2fsck -f /dev/vg1/lv1 检查磁盘错误（ext[root@localhost ~]# e2fsck -f /dev/vg1/lv1e2fsck 1.42.9 (28-Dec-2013)第一步: 检查inode,块,和大小第二步: 检查目录结构第3步: 检查目录连接性Pass 4: Checking reference counts第5步: 检查簇概要信息/dev/vg1/lv1: 11/75088 files (9.1% non-contiguous), 15637/307200 blocks[root@localhost ~]# • resize2fs /dev/vg1/lv1 100M 更新逻辑卷信息（ext）[root@localhost ~]# resize2fs /dev/vg1/lv1 100Mresize2fs 1.42.9 (28-Dec-2013)Resizing the filesystem on /dev/vg1/lv1 to 102400 (1k) blocks.The filesystem on /dev/vg1/lv1 is now 102400 blocks long. [root@localhost ~]# • lvresize -L 100M /dev/vg1/lv1 从新设置卷大小[root@localhost ~]# lvresize -L 100M /dev/vg1/lv1 WARNING: Reducing active logical volume to 100.00 MiB. THIS MAY DESTROY YOUR DATA (filesystem etc.)Do you really want to reduce vg1/lv1? [y/n]: y Size of logical volume vg1/lv1 changed from 300.00 MiB (75 extents) to 100.00 MiB (25 extents). Logical volume vg1/lv1 successfully resized.[root@localhost ~]# • 挂载[root@localhost ~]# mount /dev/vg1/lv1 /mnt/[root@localhost ~]# df -h文件系统 容量 已用 可用 已用% 挂载点/dev/sda3 18G 1.2G 17G 7% /devtmpfs 479M 0 479M 0% /devtmpfs 489M 0 489M 0% /dev/shmtmpfs 489M 6.7M 482M 2% /runtmpfs 489M 0 489M 0% /sys/fs/cgroup/dev/mapper/vg1-lv1 93M 1.6M 85M 2% /mnt/dev/sda1 197M 109M 88M 56% /boottmpfs 98M 0 98M 0% /run/user/0[root@localhost ~]#扩展卷组 （有问题） • fdisk /dev/sdb 新增一个分区 类型8e• pvcreate /dev/sdb4 创建物理分区• vgextend vg1 /dev/sdb4 把sdb4加到vg1里面去• lvresize -L 100M /dev/vg1/lv1 重新设置卷大小磁盘 /dev/sdb：10.7 GB, 10737418240 字节，20971520 个扇区Units = 扇区 of 1 * 512 = 512 bytes扇区大小(逻辑/物理)：512 字节 / 512 字节I/O 大小(最小/最佳)：512 字节 / 512 字节磁盘标签类型：dos磁盘标识符：0x34aa2b57 设备 Boot Start End Blocks Id System/dev/sdb1 2048 4196351 2097152 83 Linux/dev/sdb2 4196352 6293503 1048576 8e Linux LVM/dev/sdb3 6293504 8390655 1048576 8e Linux LVM/dev/sdb4 8390656 12584959 2097152 5 Extended/dev/sdb5 8392704 10489855 1048576 83 Linux 命令(输入 m 获取帮助)：t分区号 (1-5，默认 5)：5Hex 代码(输入 L 列出所有代码)：8e已将分区“Linux”的类型更改为“Linux LVM” 命令(输入 m 获取帮助)：wThe partition table has been altered! Calling ioctl() to re-read partition table. WARNING: Re-reading the partition table failed with error 16: 设备或资源忙.The kernel still uses the old table. The new table will be used atthe next reboot or after you run partprobe(8) or kpartx(8)正在同步磁盘。[root@localhost ~]# pvcreate /dev/sdb5 Device /dev/sdb5 not found (or ignored by filtering).[root@localhost ~]#• 如果出现这种报错用partprobe命令更新一下。partprobe：将磁盘分区表变化信息通知内核，请求操作系统重新加载分区表。 -d 不更新内核 -s 显示磁盘分区汇总信息 -h 显示帮助信息 -v 显示版本信息eg： partprobe /dev/sdb当磁盘分区信息完整时，手动删除/dev/disk/by-id目录下对应的wwn链接文件，执行partprobe操作，系统会自己创建删除的链接文件。通过udevadmin monitor命令可以监控到相关信息。 ##磁盘故障小案例• 之前写到vi /etc/fstab 这个配置文件里面添加了一行配置。[root@localhost ~]# vi /etc/fstab # /etc/fstab Created by anaconda on Mon Aug 14 23:56:24 2017 Accessible filesystems, by reference, are maintained under ‘/dev/disk’ See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info UUID=58f4e3c9-b84f-4689-be51-3396d2231926 / xfs defaults 0 0UUID=4203cad2-52e1-4a3a-9dd6-2f7e78c28805 /boot xfs defaults 0 0UUID=9877b5cd-7fed-450f-9153-1ee3ec839d77 swap swap defaults 0 0/dev/sdb1 /mnt ext4 defaults 0 0• 然后做lvm实验的时候改动了这个分区，导致开机报错。无法正常开机。提示输入root密码• 输入密码后进入系统，找到这个文件把最后一行删掉，重启即可恢复。]]></content>
  </entry>
  <entry>
    <title><![CDATA[磁盘格式化 挂载及增加交换空间]]></title>
    <url>%2F2018%2F12%2F27%2F9%E6%9C%8826%E6%97%A5%E7%A3%81%E7%9B%98%E6%8C%82%E8%BD%BD%E6%A0%BC%E5%BC%8F%E5%8C%96%2F</url>
    <content type="text"><![CDATA[fdisk磁盘分区首先添加一块磁盘服务器上面磁盘是支持热插拔的。直接插上新加的硬盘就可以了。 但是在虚拟机上需要关机加磁盘，在开机，不然无法识别。 虚拟机可以直接添加（虚拟机》设置》硬盘》添加，然后一路下一步） 添加好后fdisk -l 命令 查看系统磁盘[root@aming1 ~]# fdisk -l 磁盘 /dev/sdb：21.5 GB, 21474836480 字节，41943040 个扇区Units = 扇区 of 1 * 512 = 512 bytes扇区大小(逻辑/物理)：512 字节 / 512 字节I/O 大小(最小/最佳)：512 字节 / 512 字节 磁盘 /dev/sda：21.5 GB, 21474836480 字节，41943040 个扇区Units = 扇区 of 1 * 512 = 512 bytes扇区大小(逻辑/物理)：512 字节 / 512 字节I/O 大小(最小/最佳)：512 字节 / 512 字节磁盘标签类型：dos磁盘标识符：0x000c93ac 设备 Boot Start End Blocks Id System/dev/sda1 * 2048 411647 204800 83 Linux/dev/sda2 411648 4605951 2097152 82 Linux swap / Solaris/dev/sda3 4605952 41943039 18668544 83 Linux 可以看到增加了一个sdb 有20G的空间 fdisk /dev/sdb 划分分区fdisk后面跟硬盘路径，在虚拟机里面是/dev/sdb,在其他设备可能不是。 [root@aming1 ~]# fdisk /dev/sdb欢迎使用 fdisk (util-linux 2.23.2)。 更改将停留在内存中，直到您决定将更改写入磁盘。使用写入命令前请三思。 Device does not contain a recognized partition table使用磁盘标识符 0x421577a6 创建新的 DOS 磁盘标签。 命令(输入 m 获取帮助)：按下m 命令(输入 m 获取帮助)：m命令操作 a toggle a bootable flag b edit bsd disklabel c toggle the dos compatibility flag d delete a partition g create a new empty GPT partition table G create an IRIX (SGI) partition table l list known partition types m print this menu n add a new partition o create a new empty DOS partition table p print the partition table q quit without saving changes s create a new empty Sun disklabel t change a partition’s system id u change display/entry units v verify the partition table w write table to disk and exit x extra functionality (experts only) 常用选项：n :增加一个新的分区 p :列出分区 w :保存 d :删除 首先 p 列出分区命令(输入 m 获取帮助)：p 磁盘 /dev/sdb：21.5 GB, 21474836480 字节，41943040 个扇区Units = 扇区 of 1 * 512 = 512 bytes扇区大小(逻辑/物理)：512 字节 / 512 字节I/O 大小(最小/最佳)：512 字节 / 512 字节磁盘标签类型：dos磁盘标识符：0x421577a6 设备 Boot Start End Blocks Id System 然后 n 增加一个分区按n之后会出现选择分区类型，p 是主分区，e是扩展分区fdisk分区工具，它的分区格式为MBR，特点是，最多分4个主分区，磁盘大小不能超过2T。如果想要多个分区，只能分扩展分区，然后在扩展分区里面划分逻辑分区。 命令(输入 m 获取帮助)：nPartition type: p primary (0 primary, 0 extended, 4 free) e extendedSelect (default p): 先选择p 主分区,分两个G得空间，如下操作。Select (default p): p分区号 (1-4，默认 1)：1起始 扇区 (2048-41943039，默认为 2048)：将使用默认值 2048Last 扇区, +扇区 or +size{K,M,G} (2048-41943039，默认为 41943039)：+2G分区 1 已设置为 Linux 类型，大小设为 2 GiB 之后p 列出分区,可以看到分好了命令(输入 m 获取帮助)：p 磁盘 /dev/sdb：21.5 GB, 21474836480 字节，41943040 个扇区Units = 扇区 of 1 * 512 = 512 bytes扇区大小(逻辑/物理)：512 字节 / 512 字节I/O 大小(最小/最佳)：512 字节 / 512 字节磁盘标签类型：dos磁盘标识符：0x22016dd4 设备 Boot Start End Blocks Id System/dev/sdb1 2048 4196351 2097152 83 Linux如果分了四个主分区之后就不可以在分区了，下面看一下命令(输入 m 获取帮助)：p 磁盘 /dev/sdb：21.5 GB, 21474836480 字节，41943040 个扇区Units = 扇区 of 1 * 512 = 512 bytes扇区大小(逻辑/物理)：512 字节 / 512 字节I/O 大小(最小/最佳)：512 字节 / 512 字节磁盘标签类型：dos磁盘标识符：0x8ef30a04 设备 Boot Start End Blocks Id System/dev/sdb1 2048 4196351 2097152 83 Linux/dev/sdb2 4196352 8390655 2097152 83 Linux/dev/sdb3 8390656 10487807 1048576 83 Linux/dev/sdb4 10487808 16779263 3145728 83 Linux 命令(输入 m 获取帮助)：nIf you want to create more than four partitions, you must replace aprimary partition with an extended partition first.删除一个主分区，在分配一个10个G的扩展分区命令(输入 m 获取帮助)：nPartition type: p primary (3 primary, 0 extended, 1 free) e extendedSelect (default e): e已选择分区 4起始 扇区 (12584960-41943039，默认为 12584960)：将使用默认值 12584960Last 扇区, +扇区 or +size{K,M,G} (12584960-41943039，默认为 41943039)：+10G分区 4 已设置为 Extended 类型，大小设为 10 GiB 命令(输入 m 获取帮助)：p 磁盘 /dev/sdb：21.5 GB, 21474836480 字节，41943040 个扇区Units = 扇区 of 1 * 512 = 512 bytes扇区大小(逻辑/物理)：512 字节 / 512 字节I/O 大小(最小/最佳)：512 字节 / 512 字节磁盘标签类型：dos磁盘标识符：0xe38cbaff 设备 Boot Start End Blocks Id System/dev/sdb1 2048 4196351 2097152 83 Linux/dev/sdb2 4196352 10487807 3145728 83 Linux/dev/sdb3 10487808 12584959 1048576 83 Linux/dev/sdb4 12584960 33556479 10485760 5 Extended 逻辑分区的添加逻辑分区是在扩展分区里面在进行分区的，可以分很多。所以逻辑分区的大小不能超过扩展分区。 添加第一个逻辑分区命令(输入 m 获取帮助)：nAll primary partitions are in use添加逻辑分区 5起始 扇区 (12587008-33556479，默认为 12587008)：将使用默认值 12587008Last 扇区, +扇区 or +size{K,M,G} (12587008-33556479，默认为 33556479)：+2G分区 5 已设置为 Linux 类型，大小设为 2 GiB 命令(输入 m 获取帮助)：p 磁盘 /dev/sdb：21.5 GB, 21474836480 字节，41943040 个扇区Units = 扇区 of 1 * 512 = 512 bytes扇区大小(逻辑/物理)：512 字节 / 512 字节I/O 大小(最小/最佳)：512 字节 / 512 字节磁盘标签类型：dos磁盘标识符：0xe38cbaff 设备 Boot Start End Blocks Id System/dev/sdb1 2048 4196351 2097152 83 Linux/dev/sdb2 4196352 10487807 3145728 83 Linux/dev/sdb3 10487808 12584959 1048576 83 Linux/dev/sdb4 12584960 33556479 10485760 5 Extended/dev/sdb5 12587008 16781311 2097152 83 Linux 如果主分区有空余，并且有扩展分区的情况下。在进行分区的时候会提示是要分主分区，还是要分逻辑分区 命令(输入 m 获取帮助)：nPartition type: p primary (2 primary, 1 extended, 1 free) l logical (numbered from 5)d 删除一个分区删除1分区命令(输入 m 获取帮助)：d分区号 (1-4，默认 4)：4分区 4 已删除 p查看下分区列表，已经没有1分区了。命令(输入 m 获取帮助)：p 磁盘 /dev/sdb：21.5 GB, 21474836480 字节，41943040 个扇区Units = 扇区 of 1 * 512 = 512 bytes扇区大小(逻辑/物理)：512 字节 / 512 字节I/O 大小(最小/最佳)：512 字节 / 512 字节磁盘标签类型：dos磁盘标识符：0x8ef30a04 设备 Boot Start End Blocks Id System/dev/sdb2 4196352 8390655 2097152 83 Linux/dev/sdb3 8390656 10487807 1048576 83 Linux/dev/sdb4 12584960 33556479 10485760 5 Extended/dev/sdb5 12587008 16781311 2097152 83 Linux/dev/sdb6 16783360 20977663 2097152 83 Linux 删除逻辑分区5结果发现，逻辑分区6没了，5还在，仔细看之前的分区6变成了分区5。5已经被删除了。 命令(输入 m 获取帮助)：d分区号 (1-6，默认 6)：5分区 5 已删除 命令(输入 m 获取帮助)：p 磁盘 /dev/sdb：21.5 GB, 21474836480 字节，41943040 个扇区Units = 扇区 of 1 * 512 = 512 bytes扇区大小(逻辑/物理)：512 字节 / 512 字节I/O 大小(最小/最佳)：512 字节 / 512 字节磁盘标签类型：dos磁盘标识符：0xe38cbaff 设备 Boot Start End Blocks Id System/dev/sdb2 4196352 10487807 3145728 83 Linux/dev/sdb3 10487808 12584959 1048576 83 Linux/dev/sdb4 12584960 33556479 10485760 5 Extended/dev/sdb5 16783360 20977663 2097152 83 Linux w 保存操作w ,保存后退出命令(输入 m 获取帮助)：wThe partition table has been altered! Calling ioctl() to re-read partition table.正在同步磁盘。[root@aming1 ~]# parted分区gpt格式上面学习了fdisk分区工具，它的分区格式为MBR，特点是，最多分4个主分区，磁盘大小不能超过2T。而GPT分区格式，突破了这些限制，它没有主分区、扩展分区、逻辑分区之分，在一块磁盘上最多可以分128个分区出来，支持大于2T的分区，最大卷可达18EB。 相信，随着存储级别的升级，将来的分区格式逐渐会淘汰MBR，而GPT成为主流。 在命令行输入parted后，进入parted命令的交互模式。输入help会显示帮助信息。[root@aming1 ~]# partedGNU Parted 3.1使用 /dev/sdaWelcome to GNU Parted! Type ‘help’ to view a list of commands.(parted) help align-check TYPE N check partition N for TYPE(min|opt) alignment help [COMMAND] print general help, or help on COMMAND mklabel,mktable LABEL-TYPE create a new disklabel (partition table) mkpart PART-TYPE [FS-TYPE] START END make a partition name NUMBER NAME name partition NUMBER as NAME print [devices|free|list,all|NUMBER] display the partition table, available devices, free space, all found partitions, or a particular partition quit exit program rescue START END rescue a lost partition near START and END rm NUMBER delete partition NUMBER select DEVICE choose the device to edit disk_set FLAG STATE change the FLAG on selected device disk_toggle [FLAG] toggle the state of FLAG on selected device set NUMBER FLAG STATE change the FLAG on partition NUMBER toggle [NUMBER [FLAG]] toggle the state of FLAG on partition NUMBER unit UNIT set the default unit to UNIT version display the version number and copyright information of GNU Parted(parted)用法：1，将磁盘上原有的分区删除掉：进入：# parted /dev/sdb查看：（parted）p 删除：（parted）rm 1 [root@aming1 ~]# parted /dev/sdbGNU Parted 3.1使用 /dev/sdbWelcome to GNU Parted! Type ‘help’ to view a list of commands. (parted) pModel: VMware, VMware Virtual S (scsi)Disk /dev/sdb: 21.5GBSector size (logical/physical): 512B/512BPartition Table: msdosDisk Flags: Number Start End Size Type File system 标志 2 2149MB 5370MB 3221MB primary 3 5370MB 6443MB 1074MB primary 4 6443MB 17.2GB 10.7GB extended 5 8593MB 10.7GB 2147MB logical (parted) rm 2(parted) rm 3(parted) rm 4(parted) rm 5错误: 分区不存在。(parted) pModel: VMware, VMware Virtual S (scsi)Disk /dev/sdb: 21.5GBSector size (logical/physical): 512B/512BPartition Table: msdosDisk Flags: Number Start End Size Type File system 标志 2,将磁盘格式变成gpt的格式（因为parted只能针对gpt格式的磁盘进行操作）转换：（parted） mklabel gpt(parted) mklabel gpt警告: The existing disk label on /dev/sdb will be destroyed and all data on this disk will be lost. Do you want to continue?是/Yes/否/No? yes 分区：（parted） mkpart primary 1 500 （分第一个主分区500MB）(parted) mkpart primary 1 500(parted) pModel: VMware, VMware Virtual S (scsi)Disk /dev/sdb: 21.5GBSector size (logical/physical): 512B/512BPartition Table: gptDisk Flags: Number Start End Size File system Name 标志 1 1049kB 500MB 499MB primary (parted) 分区：（parted） mkpart primary 501 1000 (分第二个主分区500MB) (parted) mkpart primary 501 1000(parted) pModel: VMware, VMware Virtual S (scsi)Disk /dev/sdb: 21.5GBSector size (logical/physical): 512B/512BPartition Table: gptDisk Flags: Number Start End Size File system Name 标志 1 1049kB 500MB 499MB primary 2 501MB 1000MB 499MB primary分区：（parted） mkpart logical 1001 2000 (分第三个逻辑分区1000MB) （parted的逻辑分区不用先分扩展分区，直接一步到位）(parted) mkpart logical 1001 2000(parted) pModel: VMware, VMware Virtual S (scsi)Disk /dev/sdb: 21.5GBSector size (logical/physical): 512B/512BPartition Table: gptDisk Flags: Number Start End Size File system Name 标志 1 1049kB 500MB 499MB primary 2 501MB 1000MB 499MB primary 3 1001MB 2000MB 998MB logical 查看：（parted） p 退出：（parted）quit ( parted分区自动保存，不用手动保存 ) ##磁盘格式化首先看一下CentOS7支持那些磁盘格式：cat /etc/filesystems[root@aming1 ~]# cat /etc/filesystemsxfsext4ext3ext2nodev procnodev devptsiso9660vfathfshfsplus*[root@aming1 ~]# xfs是centOS7的默认文件系统。在centOS6以及以前的系统使用的是ext的文件系统。 可以用 mount 命令查看目前磁盘的文件系统（会出来很多，主要看倒数第二行） [root@aming1 ~]# mount debugfs on /sys/kernel/debug type debugfs (rw,relatime)hugetlbfs on /dev/hugepages type hugetlbfs (rw,relatime,seclabel)/dev/sda1 on /boot type xfs (rw,relatime,seclabel,attr2,inode64,noquota) —————————————————-主要看这行——————-tmpfs on /run/user/0 type tmpfs (rw,nosuid,nodev,relatime,seclabel,size=99996k,mode=700) 磁盘格式化命令：mke2fs, mkfs.ext2, mkfs.ext3, mkfs.ext4, mkfs.xfs这几个命令的作用都是一样的。mke2fs -t ext2/3/4等于mkfs.ext2, mkfs.ext3, mkfs.ext4, 如果想格成xfs格式只能用mkfs.xfs来格，系统不支持mke2fs -t xfs。 mke2fs 用法-t :指定文件系统类型。-b ：分区时设定块大小。可以后面跟指定 1024B ，2048B,4096B-m : 更改磁盘预留boot空间大小（一般默认预留5%，磁盘空间越大，越浪费）-i : 指定”字节/inode”的比例-t :指定文件系统类型。 [root@localhost ~]# mke2fs -t ext4 /dev/sdb1mke2fs 1.42.9 (28-Dec-2013)文件系统标签=OS type: Linux块大小=4096 (log=2)分块大小=4096 (log=2)Stride=0 blocks, Stripe width=0 blocks131072 inodes, 524288 blocks26214 blocks (5.00%) reserved for the super user第一个数据块=0Maximum filesystem blocks=53687091216 block groups32768 blocks per group, 32768 fragments per group8192 inodes per groupSuperblock backups stored on blocks:32768, 98304, 163840, 229376, 294912 Allocating group tables: 完成正在写入inode表: 完成Creating journal (16384 blocks): 完成Writing superblocks and filesystem accounting information: 完成-b ：分区时设定块大小。可以后面跟指定 1024B ，2048B,4096B [root@localhost ~]# mke2fs -b 8192 /dev/sdb1Warning: blocksize 8192 not usable on most systems.mke2fs 1.42.9 (28-Dec-2013)mke2fs: 8192-byte blocks too big for system (max 4096)无论如何也要继续? (y,n) yWarning: 8192-byte blocks too big for system (max 4096), forced to continuewarning: 32 blocks unused. 文件系统标签=OS type: Linux块大小=8192 (log=3)分块大小=8192 (log=3)Stride=0 blocks, Stripe width=0 blocks131072 inodes, 262112 blocks13105 blocks (5.00%) reserved for the super user第一个数据块=0Maximum filesystem blocks=2684026884 block groups65528 blocks per group, 65528 fragments per group32768 inodes per groupSuperblock backups stored on blocks:65528, 196584 Allocating group tables: 完成正在写入inode表: 完成Writing superblocks and filesystem accounting information: 完成 -m : 更改磁盘预留boot空间大小（一般默认预留5%，磁盘空间越大，越浪费） [root@localhost ~]# mke2fs -m 0.1 /dev/sdb1mke2fs 1.42.9 (28-Dec-2013)文件系统标签=OS type: Linux块大小=4096 (log=2)分块大小=4096 (log=2)Stride=0 blocks, Stripe width=0 blocks131072 inodes, 524288 blocks524 blocks (0.10%) reserved for the super user第一个数据块=0Maximum filesystem blocks=53687091216 block groups32768 blocks per group, 32768 fragments per group8192 inodes per groupSuperblock backups stored on blocks: 32768, 98304, 163840, 229376, 294912 Allocating group tables: 完成正在写入inode表: 完成Writing superblocks and filesystem accounting information: 完成 [root@localhost ~]#-i : 指定”字节/inode”的比例 （inode会变多） [root@localhost ~]# mke2fs -i 8192 -t ext4 /dev/sdb1mke2fs 1.42.9 (28-Dec-2013)文件系统标签=OS type: Linux块大小=4096 (log=2)分块大小=4096 (log=2)Stride=0 blocks, Stripe width=0 blocks262144 inodes, 524288 blocks26214 blocks (5.00%) reserved for the super user第一个数据块=0Maximum filesystem blocks=53687091216 block groups32768 blocks per group, 32768 fragments per group16384 inodes per groupSuperblock backups stored on blocks: 32768, 98304, 163840, 229376, 294912 Allocating group tables: 完成正在写入inode表: 完成Creating journal (16384 blocks): 完成Writing superblocks and filesystem accounting information: 完成 [root@localhost ~]#blkid 查看还没有挂载的磁盘，查看UUID[root@aming1 ~]# blkid/dev/sdb1: PARTLABEL=”primary” PARTUUID=”7c0640c1-40d5-489a-987f-4f61ffcb3e2d”/dev/sdb2: PARTLABEL=”primary” PARTUUID=”cce11e2d-b1cf-42e5-aab3-d90cf838aa4c”/dev/sdb3: PARTLABEL=”logical” PARTUUID=”56a37982-891f-4dd1-b5c3-21d97d1fc8e3”/dev/sda1: UUID=”404e395a-be3a-4061-8ad0-e32e271a0679” TYPE=”xfs”/dev/sda2: UUID=”0932d791-1484-41bc-972b-71091c2c6410” TYPE=”swap”/dev/sda3: UUID=”475a482e-19df-4629-abaf-6b989d1572ba” TYPE=”xfs” mkfs.xfs 没用什么特殊用法，后面直接跟分区就可以了。 磁盘有没有分区都可以直接格式化！ 磁盘挂载用法：mount 需要挂在的路径 挂载点mount /dev/sdb 挂载点mount /dev/sdb 挂载点[root@localhost ~]# df -h文件系统 容量 已用 可用 已用% 挂载点/dev/sda3 18G 1.1G 17G 7% /devtmpfs 479M 0 479M 0% /devtmpfs 489M 0 489M 0% /dev/shmtmpfs 489M 6.7M 482M 2% /runtmpfs 489M 0 489M 0% /sys/fs/cgroup/dev/sda1 197M 109M 88M 56% /boottmpfs 98M 0 98M 0% /run/user/0[root@localhost ~]# mount /dev/sdb1 /mnt/[root@localhost ~]# df -h文件系统 容量 已用 可用 已用% 挂载点/dev/sda3 18G 1.1G 17G 7% /devtmpfs 479M 0 479M 0% /devtmpfs 489M 0 489M 0% /dev/shmtmpfs 489M 6.7M 482M 2% /runtmpfs 489M 0 489M 0% /sys/fs/cgroup/dev/sda1 197M 109M 88M 56% /boottmpfs 98M 0 98M 0% /run/user/0/dev/sdb1 1.9G 6.0M 1.8G 1% /mnt可以看到最后一行已经有sdb1了。 挂载磁盘的卸载 umount /dev/sdb1[root@localhost ~]# mount /dev/sdb1 /mnt/[root@localhost ~]# umount /dev/sdb1如果提示目标忙，加 -l 参数 mount 选项mount -t 类型 -o 挂接方式 源路径 目标路径-t 详细选项: 光盘或光盘镜像：iso9660 DOS fat16文件系统：msdos Windows 9x fat32文件系统：vfat Windows NT ntfs文件系统：ntfs Mount Windows文件网络共享：smbfs（需内核支持）推荐cifs UNIX(LINUX) 文件网络共享：nfs -o 详细选项: loop ：用来把一个文件当成硬盘分区挂接上系统 ro ：采用只读方式挂接设备 rw ：采用读写方式挂接设备 iocharset ：指定访问文件系统所用字符集,例如iocharset=utf8 remount ：重新挂载 使用实例: 挂载windows文件共享: mount -t smbfs -o username=admin,password=888888 //192.168.1.2/c$ /mnt/samba mount -t cifs -o username=xxx,password=xxx //IP/sharename /mnt/dirname 挂载Linux文件nfs共享: mount -t nfs -o rw 192.168.1.2:/usr/www /usr/www 挂载ISO镜像: mount -o loop -t iso9660 /usr/mydisk.iso /home/ping.bao/cd 挂载USB移动硬盘: mount -t ntfs /dev/sdc1 /root/usb 挂载CDROM: mount /dev/cdrom /home/ping.bao/cd 取消挂载: umount /dev/cdrom /home/ping.bao/cd 单用户模式重新挂载根分区： mount -o remount,rw / ro : 表示按只读挂在权限rw ：表示按可读可写权限挂载async/sync : async表示与磁盘和内存不同步，系统每隔一段时间就会把内存数据写入磁盘中，而sync则会时时同步内存和磁盘中的数据。t : 指定分区类型user/nouser : 表示允许/不允许root外其他的用户挂载分区，为了安全，使用nouser。vi /etc/fstab 这个文件是系统启动都挂载了那些磁盘，都写在这个配置文件里里面。可以自己手动添加。[root@localhost ~]# vi /etc/fstab /etc/fstab Created by anaconda on Mon Aug 14 23:56:24 2017 Accessible filesystems, by reference, are maintained under ‘/dev/disk’ See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info UUID=58f4e3c9-b84f-4689-be51-3396d2231926 / xfs defaults 0 0UUID=4203cad2-52e1-4a3a-9dd6-2f7e78c28805 /boot xfs defaults 0 0UUID=9877b5cd-7fed-450f-9153-1ee3ec839d77 swap swap defaults 0 0/dev/sdb1 /mnt ext4 defaults 0 0 手动增加swap空间首先虚拟一些空间 dd if=/dev/zero of=/tmp/newdisk bs=1M count=100[root@localhost ~]# dd if=/dev/zero of=/tmp/newdisk bs=1M count=100记录了100+0 的读入记录了100+0 的写出104857600字节(105 MB)已复制，0.978038 秒，107 MB/秒dd :是用来操作磁盘的if :指定去哪里读/dev/zero ：linux可以调用无限大的zeroof : 写入到哪里去bs : 块大小count=100 : 就是100个块查看调取的空间[root@localhost ~]# du -sh /tmp/newdisk100M /tmp/newdisk用mkswap格式化[root@localhost ~]# mkswap -f /tmp/newdisk正在设置交换空间版本 1，大小 = 102396 KiB无标签，UUID=3522cba1-6012-4596-a8d1-bb38a47a5dd2[root@localhost ~]#之后把空间加到swap里面先查看swap空间大小root@localhost ~]# free -m total used free shared buff/cache availableMem: 976 108 603 6 264 690Swap: 2047 0 2047swapon /tmp/newdisk 把空间加载到现有磁盘空间去[root@localhost ~]# swapon /tmp/newdiskswapon: /tmp/newdisk：不安全的权限 0644，建议使用 0600。[root@localhost ~]# free -m total used free shared buff/cache availableMem: 976 108 603 6 264 690Swap: 2147 0 2147[root@localhost ~]#swapoff /tmp/newdisk 把空间卸载掉[root@localhost ~]# swapoff /tmp/newdisk[root@localhost ~]# free -m total used free shared buff/cache availableMem: 976 108 603 6 264 690Swap: 2047 0 2047dd工具使用场景]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F12%2F26%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[9月25日 磁盘管理]]></title>
    <url>%2F2018%2F12%2F26%2F9%E6%9C%8825%E6%97%A5%20%E7%A3%81%E7%9B%98%E7%AE%A1%E7%90%86%2F</url>
    <content type="text"><![CDATA[df命令用法：df汇报文件系统磁盘空间的使用情况[root@localhost ~]# df文件系统 1K-块 已用 可用 已用% 挂载点/dev/sda3 18658304 1130452 17527852 7% /devtmpfs 490164 0 490164 0% /devtmpfs 499968 0 499968 0% /dev/shmtmpfs 499968 6804 493164 2% /runtmpfs 499968 0 499968 0% /sys/fs/cgroup/dev/sda1 201380 111440 89940 56% /boottmpfs 99996 0 99996 0% /run/user/0df -h 可以更人性化的显示磁盘空间大小 [root@localhost ~]# df -h文件系统 容量 已用 可用 已用% 挂载点/dev/sda3 18G 1.1G 17G 7% /devtmpfs 479M 0 479M 0% /devtmpfs 489M 0 489M 0% /dev/shmtmpfs 489M 6.7M 482M 2% /runtmpfs 489M 0 489M 0% /sys/fs/cgroup/dev/sda1 197M 109M 88M 56% /boottmpfs 98M 0 98M 0% /run/user/0 * 只要是带tmpfs字眼的文件系统都是临时的文件系统，如果在这里面写了东西，重启之后就会消失。 * 需要关注的是/dev/的文件系统 * 查看内存和虚拟内存的方法：free [root@aming1 ~]# freetotal used free shared buff/cache availableMem: 999936 111756 730560 6836 157620 717696Swap: 2097148 0 2097148[root@aming1 ~]# free -htotal used free shared buff/cache availableMem: 976M 109M 713M 6.7M 153M 700MSwap: 2.0G 0B 2.0Gdf -i 查看inode 使用量 * 如果inode写满了，磁盘空间还有剩余空间的话也是不能写入了。 [root@localhost ~]# df -i文件系统 Inode 已用(I) 可用(I) 已用(I)% 挂载点/dev/sda3 9334272 27933 9306339 1% /devtmpfs 122541 377 122164 1% /devtmpfs 124992 1 124991 1% /dev/shmtmpfs 124992 444 124548 1% /runtmpfs 124992 16 124976 1% /sys/fs/cgroup/dev/sda1 102400 330 102070 1% /boottmpfs 124992 1 124991 1% /run/user/0du 查看文件大小用法：du -sh * 之所以加 -sh 是如果不加的话得不到想要的结果，如下： [root@aming1 ~]# du 111/0 111/222/3330 111/2220 111/[root@aming1 ~]# du -s64 .[root@aming1 ~]# du -sh64K . * 还有就是ls 查看的大小与du查看的大小是不一样的 * 这里面涉及到块的概念。ls查询的是实际大小，du 查看的是占用空间。 [root@aming1 ~]# ls -lh anaconda-ks.cfg-rw——-. 1 root root 1.4K 3月 17 19:03 anaconda-ks.cfg[root@aming1 ~]# du -sh anaconda-ks.cfg4.0K anaconda-ks.cfg 磁盘分区格式化的时候会分给每个块的大小是4k，这个大小是可以调整的，默认是4k 。即使一个文件的大小不足4k,但是也要存放到块里，占用了一个块，所以实际1.4k大小的文件，占用了4k的空间。fdisk磁盘分区首先添加一块磁盘 * 服务器上面磁盘是支持热插拔的。直接插上新加的硬盘就可以了。 * 但是在虚拟机上需要关机加磁盘，在开机，不然无法识别。 * 虚拟机可以直接添加（虚拟机》设置》硬盘》添加，然后一路下一步） 添加好后fdisk -l 命令 查看系统磁盘 [root@aming1 ~]# fdisk -l 磁盘 /dev/sdb：21.5 GB, 21474836480 字节，41943040 个扇区Units = 扇区 of 1 * 512 = 512 bytes扇区大小(逻辑/物理)：512 字节 / 512 字节I/O 大小(最小/最佳)：512 字节 / 512 字节 磁盘 /dev/sda：21.5 GB, 21474836480 字节，41943040 个扇区Units = 扇区 of 1 * 512 = 512 bytes扇区大小(逻辑/物理)：512 字节 / 512 字节I/O 大小(最小/最佳)：512 字节 / 512 字节磁盘标签类型：dos磁盘标识符：0x000c93ac 设备 Boot Start End Blocks Id System/dev/sda1 * 2048 411647 204800 83 Linux/dev/sda2 411648 4605951 2097152 82 Linux swap / Solaris/dev/sda3 4605952 41943039 18668544 83 Linux 可以看到增加了一个sdb 有20G的空间fdisk /dev/sdb 划分分区fdisk后面跟硬盘路径，在虚拟机里面是/dev/sdb,在其他设备可能不是。 [root@aming1 ~]# fdisk /dev/sdb欢迎使用 fdisk (util-linux 2.23.2)。 更改将停留在内存中，直到您决定将更改写入磁盘。使用写入命令前请三思。 Device does not contain a recognized partition table使用磁盘标识符 0x421577a6 创建新的 DOS 磁盘标签。 命令(输入 m 获取帮助)：按下m 命令(输入 m 获取帮助)：m命令操作a toggle a bootable flagb edit bsd disklabelc toggle the dos compatibility flagd delete a partitiong create a new empty GPT partition tableG create an IRIX (SGI) partition tablel list known partition typesm print this menun add a new partitiono create a new empty DOS partition tablep print the partition tableq quit without saving changess create a new empty Sun disklabelt change a partition’s system idu change display/entry unitsv verify the partition tablew write table to disk and exitx extra functionality (experts only)常用选项： * n :增加一个新的分区 * p :列出分区 * w :保存 * d :删除 首先 p 列出分区 命令(输入 m 获取帮助)：p 磁盘 /dev/sdb：21.5 GB, 21474836480 字节，41943040 个扇区Units = 扇区 of 1 * 512 = 512 bytes扇区大小(逻辑/物理)：512 字节 / 512 字节I/O 大小(最小/最佳)：512 字节 / 512 字节磁盘标签类型：dos磁盘标识符：0x421577a6 设备 Boot Start End Blocks Id System然后 n 增加一个分区 * 按n之后会出现选择分区类型，p 是主分区，e是扩展分区 fdisk分区工具，它的分区格式为MBR，特点是，最多分4个主分区，磁盘大小不能超过2T。如果想要多个分区，只能分扩展分区，然后在扩展分区里面划分逻辑分区。 命令(输入 m 获取帮助)：nPartition type:p primary (0 primary, 0 extended, 4 free)e extendedSelect (default p): * 先选择p 主分区,分两个G得空间，如下操作。 Select (default p): p分区号 (1-4，默认 1)：1起始 扇区 (2048-41943039，默认为 2048)：将使用默认值 2048Last 扇区, +扇区 or +size{K,M,G} (2048-41943039，默认为 41943039)：+2G分区 1 已设置为 Linux 类型，大小设为 2 GiB * 之后p 列出分区,可以看到分好了 命令(输入 m 获取帮助)：p 磁盘 /dev/sdb：21.5 GB, 21474836480 字节，41943040 个扇区Units = 扇区 of 1 * 512 = 512 bytes扇区大小(逻辑/物理)：512 字节 / 512 字节I/O 大小(最小/最佳)：512 字节 / 512 字节磁盘标签类型：dos磁盘标识符：0x22016dd4 设备 Boot Start End Blocks Id System/dev/sdb1 2048 4196351 2097152 83 Linux * 如果分了四个主分区之后就不可以在分区了，下面看一下 命令(输入 m 获取帮助)：p 磁盘 /dev/sdb：21.5 GB, 21474836480 字节，41943040 个扇区Units = 扇区 of 1 * 512 = 512 bytes扇区大小(逻辑/物理)：512 字节 / 512 字节I/O 大小(最小/最佳)：512 字节 / 512 字节磁盘标签类型：dos磁盘标识符：0x8ef30a04 设备 Boot Start End Blocks Id System/dev/sdb1 2048 4196351 2097152 83 Linux/dev/sdb2 4196352 8390655 2097152 83 Linux/dev/sdb3 8390656 10487807 1048576 83 Linux/dev/sdb4 10487808 16779263 3145728 83 Linux 命令(输入 m 获取帮助)：nIf you want to create more than four partitions, you must replace aprimary partition with an extended partition first. * 删除一个主分区，在分配一个10个G的扩展分区 命令(输入 m 获取帮助)：nPartition type:p primary (3 primary, 0 extended, 1 free)e extendedSelect (default e): e已选择分区 4起始 扇区 (12584960-41943039，默认为 12584960)：将使用默认值 12584960Last 扇区, +扇区 or +size{K,M,G} (12584960-41943039，默认为 41943039)：+10G分区 4 已设置为 Extended 类型，大小设为 10 GiB 命令(输入 m 获取帮助)：p 磁盘 /dev/sdb：21.5 GB, 21474836480 字节，41943040 个扇区Units = 扇区 of 1 * 512 = 512 bytes扇区大小(逻辑/物理)：512 字节 / 512 字节I/O 大小(最小/最佳)：512 字节 / 512 字节磁盘标签类型：dos磁盘标识符：0xe38cbaff 设备 Boot Start End Blocks Id System/dev/sdb1 2048 4196351 2097152 83 Linux/dev/sdb2 4196352 10487807 3145728 83 Linux/dev/sdb3 10487808 12584959 1048576 83 Linux/dev/sdb4 12584960 33556479 10485760 5 Extended逻辑分区的添加逻辑分区是在扩展分区里面在进行分区的，可以分很多。所以逻辑分区的大小不能超过扩展分区。 * 添加第一个逻辑分区 命令(输入 m 获取帮助)：nAll primary partitions are in use添加逻辑分区 5起始 扇区 (12587008-33556479，默认为 12587008)：将使用默认值 12587008Last 扇区, +扇区 or +size{K,M,G} (12587008-33556479，默认为 33556479)：+2G分区 5 已设置为 Linux 类型，大小设为 2 GiB 命令(输入 m 获取帮助)：p 磁盘 /dev/sdb：21.5 GB, 21474836480 字节，41943040 个扇区Units = 扇区 of 1 * 512 = 512 bytes扇区大小(逻辑/物理)：512 字节 / 512 字节I/O 大小(最小/最佳)：512 字节 / 512 字节磁盘标签类型：dos磁盘标识符：0xe38cbaff 设备 Boot Start End Blocks Id System/dev/sdb1 2048 4196351 2097152 83 Linux/dev/sdb2 4196352 10487807 3145728 83 Linux/dev/sdb3 10487808 12584959 1048576 83 Linux/dev/sdb4 12584960 33556479 10485760 5 Extended/dev/sdb5 12587008 16781311 2097152 83 Linux * 如果主分区有空余，并且有扩展分区的情况下。在进行分区的时候会提示是要分主分区，还是要分逻辑分区 命令(输入 m 获取帮助)：nPartition type:p primary (2 primary, 1 extended, 1 free)l logical (numbered from 5)d 删除一个分区 删除1分区 命令(输入 m 获取帮助)：d分区号 (1-4，默认 4)：4分区 4 已删除 * p查看下分区列表，已经没有1分区了。 命令(输入 m 获取帮助)：p 磁盘 /dev/sdb：21.5 GB, 21474836480 字节，41943040 个扇区Units = 扇区 of 1 * 512 = 512 bytes扇区大小(逻辑/物理)：512 字节 / 512 字节I/O 大小(最小/最佳)：512 字节 / 512 字节磁盘标签类型：dos磁盘标识符：0x8ef30a04 设备 Boot Start End Blocks Id System/dev/sdb2 4196352 8390655 2097152 83 Linux/dev/sdb3 8390656 10487807 1048576 83 Linux/dev/sdb4 12584960 33556479 10485760 5 Extended/dev/sdb5 12587008 16781311 2097152 83 Linux/dev/sdb6 16783360 20977663 2097152 83 Linux * 删除逻辑分区5 结果发现，逻辑分区6没了，5还在，仔细看之前的分区6变成了分区5。5已经被删除了。 命令(输入 m 获取帮助)：d分区号 (1-6，默认 6)：5分区 5 已删除 命令(输入 m 获取帮助)：p 磁盘 /dev/sdb：21.5 GB, 21474836480 字节，41943040 个扇区Units = 扇区 of 1 * 512 = 512 bytes扇区大小(逻辑/物理)：512 字节 / 512 字节I/O 大小(最小/最佳)：512 字节 / 512 字节磁盘标签类型：dos磁盘标识符：0xe38cbaff 设备 Boot Start End Blocks Id System/dev/sdb2 4196352 10487807 3145728 83 Linux/dev/sdb3 10487808 12584959 1048576 83 Linux/dev/sdb4 12584960 33556479 10485760 5 Extended/dev/sdb5 16783360 20977663 2097152 83 Linuxw 保存操作 * w ,保存后退出 命令(输入 m 获取帮助)：wThe partition table has been altered! Calling ioctl() to re-read partition table.正在同步磁盘。[root@aming1 ~]#parted分区gpt格式上面学习了fdisk分区工具，它的分区格式为MBR，特点是，最多分4个主分区，磁盘大小不能超过2T。而GPT分区格式，突破了这些限制，它没有主分区、扩展分区、逻辑分区之分，在一块磁盘上最多可以分128个分区出来，支持大于2T的分区，最大卷可达18EB。 相信，随着存储级别的升级，将来的分区格式逐渐会淘汰MBR，而GPT成为主流。 * 在命令行输入parted后，进入parted命令的交互模式。输入help会显示帮助信息。 [root@aming1 ~]# partedGNU Parted 3.1使用 /dev/sdaWelcome to GNU Parted! Type ‘help’ to view a list of commands.(parted) helpalign-check TYPE N check partition N for TYPE(min|opt) alignmenthelp [COMMAND] print general help, or help on COMMANDmklabel,mktable LABEL-TYPE create a new disklabel (partition table)mkpart PART-TYPE [FS-TYPE] START END make a partitionname NUMBER NAME name partition NUMBER as NAMEprint [devices|free|list,all|NUMBER] display the partition table, available devices, free space, all found partitions, or a particular partitionquit exit programrescue START END rescue a lost partition near START and ENDrm NUMBER delete partition NUMBERselect DEVICE choose the device to editdisk_set FLAG STATE change the FLAG on selected devicedisk_toggle [FLAG] toggle the state of FLAG on selected deviceset NUMBER FLAG STATE change the FLAG on partition NUMBERtoggle [NUMBER [FLAG]] toggle the state of FLAG on partition NUMBERunit UNIT set the default unit to UNITversion display the version number and copyright information of GNU Parted(parted)用法：1，将磁盘上原有的分区删除掉： * 进入：# parted /dev/sdb 查看：（parted）p删除：（parted）rm 1 [root@aming1 ~]# parted /dev/sdbGNU Parted 3.1使用 /dev/sdbWelcome to GNU Parted! Type ‘help’ to view a list of commands. (parted) pModel: VMware, VMware Virtual S (scsi)Disk /dev/sdb: 21.5GBSector size (logical/physical): 512B/512BPartition Table: msdosDisk Flags: Number Start End Size Type File system 标志2 2149MB 5370MB 3221MB primary3 5370MB 6443MB 1074MB primary4 6443MB 17.2GB 10.7GB extended5 8593MB 10.7GB 2147MB logical (parted) rm 2(parted) rm 3(parted) rm 4(parted) rm 5错误: 分区不存在。(parted) pModel: VMware, VMware Virtual S (scsi)Disk /dev/sdb: 21.5GBSector size (logical/physical): 512B/512BPartition Table: msdosDisk Flags: Number Start End Size Type File system 标志 2,将磁盘格式变成gpt的格式（因为parted只能针对gpt格式的磁盘进行操作） * 转换：（parted） mklabel gpt (parted) mklabel gpt警告: The existing disk label on /dev/sdb will be destroyed and all data on this disk will be lost. Do you want to continue?是/Yes/否/No? yes * 分区：（parted） mkpart primary 1 500 （分第一个主分区500MB） (parted) mkpart primary 1 500(parted) pModel: VMware, VMware Virtual S (scsi)Disk /dev/sdb: 21.5GBSector size (logical/physical): 512B/512BPartition Table: gptDisk Flags: Number Start End Size File system Name 标志1 1049kB 500MB 499MB primary (parted) * 分区：（parted） mkpart primary 501 1000 (分第二个主分区500MB) (parted) mkpart primary 501 1000(parted) pModel: VMware, VMware Virtual S (scsi)Disk /dev/sdb: 21.5GBSector size (logical/physical): 512B/512BPartition Table: gptDisk Flags: Number Start End Size File system Name 标志1 1049kB 500MB 499MB primary2 501MB 1000MB 499MB primary * 分区：（parted） mkpart logical 1001 2000 (分第三个逻辑分区1000MB) （parted的逻辑分区不用先分扩展分区，直接一步到位） (parted) mkpart logical 1001 2000(parted) pModel: VMware, VMware Virtual S (scsi)Disk /dev/sdb: 21.5GBSector size (logical/physical): 512B/512BPartition Table: gptDisk Flags: Number Start End Size File system Name 标志1 1049kB 500MB 499MB primary2 501MB 1000MB 499MB primary3 1001MB 2000MB 998MB logical * 查看：（parted） p * 退出：（parted）quit ( parted分区自动保存，不用手动保存 ) 磁盘格式化 * 首先看一下CentOS7支持那些磁盘格式：cat /etc/filesystems [root@aming1 ~]# cat /etc/filesystemsxfsext4ext3ext2nodev procnodev devptsiso9660vfathfshfsplus*[root@aming1 ~]# * xfs是centOS7的默认文件系统。在centOS6以及以前的系统使用的是ext的文件系统。 * 可以用 mount 命令查看目前磁盘的文件系统（会出来很多，主要看倒数第二行） [root@aming1 ~]# mount debugfs on /sys/kernel/debug type debugfs (rw,relatime)hugetlbfs on /dev/hugepages type hugetlbfs (rw,relatime,seclabel)/dev/sda1 on /boot type xfs (rw,relatime,seclabel,attr2,inode64,noquota) —————————————————-主要看这行——————-tmpfs on /run/user/0 type tmpfs (rw,nosuid,nodev,relatime,seclabel,size=99996k,mode=700)磁盘格式化命令：mke2fs, mkfs.ext2, mkfs.ext3, mkfs.ext4, mkfs.xfs这几个命令的作用都是一样的。mke2fs -t ext2/3/4等于mkfs.ext2, mkfs.ext3, mkfs.ext4, 如果想格成xfs格式只能用mkfs.xfs来格，系统不支持mke2fs -t xfs。mke2fs 用法 * -t :指定文件系统类型。 * -b ：分区时设定块大小。可以后面跟指定 1024B ，2048B,4096B * -m : 更改磁盘预留boot空间大小（一般默认预留5%，磁盘空间越大，越浪费） * -i : 指定”字节/inode”的比例 -t :指定文件系统类型。 [root@localhost ~]# mke2fs -t ext4 /dev/sdb1mke2fs 1.42.9 (28-Dec-2013)文件系统标签=OS type: Linux块大小=4096 (log=2)分块大小=4096 (log=2)Stride=0 blocks, Stripe width=0 blocks131072 inodes, 524288 blocks26214 blocks (5.00%) reserved for the super user第一个数据块=0Maximum filesystem blocks=53687091216 block groups32768 blocks per group, 32768 fragments per group8192 inodes per groupSuperblock backups stored on blocks:32768, 98304, 163840, 229376, 294912 Allocating group tables: 完成正在写入inode表: 完成Creating journal (16384 blocks): 完成Writing superblocks and filesystem accounting information: 完成-b ：分区时设定块大小。可以后面跟指定 1024B ，2048B,4096B [root@localhost ~]# mke2fs -b 8192 /dev/sdb1Warning: blocksize 8192 not usable on most systems.mke2fs 1.42.9 (28-Dec-2013)mke2fs: 8192-byte blocks too big for system (max 4096)无论如何也要继续? (y,n) yWarning: 8192-byte blocks too big for system (max 4096), forced to continuewarning: 32 blocks unused. 文件系统标签=OS type: Linux块大小=8192 (log=3)分块大小=8192 (log=3)Stride=0 blocks, Stripe width=0 blocks131072 inodes, 262112 blocks13105 blocks (5.00%) reserved for the super user第一个数据块=0Maximum filesystem blocks=2684026884 block groups65528 blocks per group, 65528 fragments per group32768 inodes per groupSuperblock backups stored on blocks:65528, 196584 Allocating group tables: 完成正在写入inode表: 完成Writing superblocks and filesystem accounting information: 完成 -m : 更改磁盘预留boot空间大小（一般默认预留5%，磁盘空间越大，越浪费）]]></content>
      <tags>
        <tag>工作日志</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[9月21日 su及sudo的用法 限制root 远程登录]]></title>
    <url>%2F2018%2F12%2F25%2F9%E6%9C%8821%E6%97%A5%20su%20%E5%8F%8Asudo%20%E9%99%90%E5%88%B6root%20%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%2F</url>
    <content type="text"><![CDATA[su 切换用户命令* 用法：su - username 中间要加上“-” ，如果不加切换不彻底。试一下加与不加的区别。 [root@localhost ~]# pwd/root [root@localhost ~]# su user1 [user1@localhost root]$ pwd/root[user1@localhost root]$ su - user1密码：上一次登录：四 8月 17 09:24:20 CST 2017pts/0 上[user1@localhost ~]$ pwd/home/user1who 命令查看当前登陆用户。[root@aming1 ~]# whoroot pts/0 2018-05-20 14:50 (192.168.159.1) * 用 su - -c &quot;命令&quot; username 可以指定用户来运行一条命令而不需要登陆该用户。 比如用su - -c 到aming3用户下创建一个aming.112文件。[root@localhost ~]# su - -c “touch /tmp/aming.112” user3[root@localhost ~]# ls -lt /tmp/ |head总用量 4-rw-r–r–. 1 user3 grp1 0 8月 17 09:28 aming.112drwx——. 3 root root 17 8月 17 09:17 systemd-private-962282525abe4fc2ab6e64178898e746-vmtoolsd.service-QxhA0Gdrwx——. 3 root root 17 8月 16 09:41 systemd-private-b722b0a8816847f48d10110cb8143b36-vmtoolsd.service-i4Qxrzdrwx——. 3 root root 17 8月 15 19:02 systemd-private-120e72494534457f832c658a3c0fe839-vmtoolsd.service-TjInFDdrwx——. 3 root root 17 8月 15 00:18 systemd-private-2a54bfd43862496f9954bc45a0ed32f5-vmtoolsd.service-dGG7hcdrwx——. 3 root root 17 8月 15 00:04 systemd-private-782e234483844c55bea315a060f5d536-vmtoolsd.service-xP7CVe-rwx——. 1 root root 836 8月 15 00:03 ks-script-qSyJ_w-rw——-. 1 root root 0 8月 14 23:56 yum.log[root@localhost ~]# date2017年 08月 17日 星期四 09:29:26 CST[root@localhost ~]# id user3uid=1005(user3) gid=1000(grp1) 组=1000(grp1)sudo 临时赋予指定用户的权限，而不用输入该用户的密码。为了更加安全，可以用sudo命令来进行临时赋予指定用户的权限，一般情况下赋予root权限。这样不需要每个人都知道root的密码保证了安全。 * 先看看sudo的配置文件visudo 命令查看 要用visudo命令来进行查看，这样可以检测到有没有语法错误，此文件是非常重要的，如果用vi 改错了， 也不会有提示。这样比较危险和麻烦。[root@localhost ~]# visudo## Sudoers allows particular users to run various commands as## the root user, without needing the root password.#### Examples are provided at the bottom of the file for collections## of related commands, which can then be delegated out to particular## users or groups.#### This file must be edited with the ‘visudo’ command.## Host Aliases## Groups of machines. You may prefer to use hostnames (perhaps using## wildcards for entire domains) or IP addresses instead.# Host_Alias FILESERVERS = fs1, fs2# Host_Alias MAILSERVERS = smtp, smtp2## User Aliases## These aren’t often necessary, as you can use regular groups## (ie, from files, LDAP, NIS, etc) in this file - just use %groupname## rather than USERALIAS# User_Alias ADMINS = jsmith, mikem## Command Aliases## These are groups of related commands…## Networking# Cmnd_Alias NETWORKING = /sbin/route, /sbin/ifconfig, /bin/ping, /sbin/dhclient, /usr/bin/net, /sbin/iptables, /usr/bin/rfcomm, /usr/bin/wvdial, /sbin/iwconfig, /sbin/mii-tool”/etc/sudoers.tmp” 111L, 3907C这个配置文件里最重要的配置在这条：允许root用户在任何地方运行所有命令## Allow root to run any commands anywhereroot ALL=(ALL) ALL * 如果让user1用户也在所有地方运行某些命令，需要在下面加上一行。 * Allow root to run any commands anywhereroot ALL=(ALL) ALLuser1 ALL=(ALL) ls,mv,cat 或者写ALL代表可以运行所有目录**:wq保存后有报错visudo：&gt;&gt;&gt; /etc/sudoers：syntax error 在行 92 附近&lt;&lt;&lt;现在做什么？选项有：重新编辑 sudoers 文件(e)退出，不保存对 sudoers 文件的更改(x)退出并将更改保存到 sudoers 文件(危险！)(Q)————————————这个就是visudo命令的好处，提示92行有语法错误。按“e”重新编辑————————————输入:set nu来查看行数88 ## The COMMANDS section may have other options added to it.89 ##90 ## Allow root to run any commands anywhere91 root ALL=(ALL) ALL92 user1 ALL=(ALL) ls,mv,cat93 ## Allows members of the ‘sys’ group to run networking, software,————————————正确的语法如下**90 ## Allow root to run any commands anywhere91 root ALL=(ALL) ALL （root ALL=(ALL) ALL的意思是限制在哪里登陆。all就是没有限制，也可以写成IP 访问部门多的时候用IP段来限制登陆 , ）92 user1 ALL=(ALL) /usr/bin/ls, /usr/bin/mv, /usr/bin/cat (这个位置要加绝对路径)93 ## Allows members of the ‘sys’ group to run networking, software, * 普通ls命令是查看不了root目录的，更改完配置文件，用sudo就可以了。第一次需要输入用户的密码。 [user1@localhost ~]$ ls /root/ls: 无法打开目录/root/: 权限不够 [user1@localhost ~]$ sudo ls /root/We trust you have received the usual lecture from the local SystemAdministrator. It usually boils down to these three things:#1) Respect the privacy of others.#2) Think before you type.#3) With great power comes great responsibility.[sudo] password for user1:anaconda-ks.cfg[user1@localhost ~]$如果想用sudo 第一次不输入密码，需要在visudo里配置“NOPASSWD:”## Allow root to run any commands anywhereroot ALL=(ALL) ALLuser1 ALL=(ALL) /usr/bin/ls, /usr/bin/mv, /usr/bin/catuser2 ALL=(ALL) NOPASSWD: /usr/bin/ls, /usr/bin/mv, /usr/bin/cat已经不用输入密码了[root@localhost ~]# su - user2[user2@localhost ~]$ ls /root/ls: 无法打开目录/root/: 权限不够[user2@localhost ~]$ sudo ls /root/anaconda-ks.cfg[user2@localhost ~]$增加命令别名 Cmnd_Alias AMING_CMD = /usr/bin/ls, /usr/bin/mv, /usr/bin/cat * 模仿系统写一个命令别名。 Networking# Cmnd_Alias NETWORKING = /sbin/route, /sbin/ifconfig, /bin/ping, /sbin/dhclient, /usr/bin/net, /sbin/iptables, /usr/bin/rfcomm, /usr/bin/wvdial, /sbin/iwconfig, /sbin/mii-toolCmnd_Alias AMING_CMD = /usr/bin/ls, /usr/bin/mv, /usr/bin/cat写好后那么AMING_CMD这个命令就代表了，ls,mv，cat,这三条命令。然后可以把以下内容## Allow root to run any commands anywhereroot ALL=(ALL) ALLuser1 ALL=(ALL) /usr/bin/ls, /usr/bin/mv, /usr/bin/cat换成## Allow root to run any commands anywhereroot ALL=(ALL) ALLuser1 ALL=(ALL) AMING_CMD这样增加也是可以的。 ##限制root远程登陆 如果公司每个人用root密码来进行远程登陆，这样就非常危险的。如果密码泄露，其他人就可以远程登陆到root下。所以要限制root用户进行远程登陆,限制之后可以使用sudo su - 来进行切换root用户 * 首先在visudo里面设置用户组别名，把用户都加入进去 User_Alias ADMINS = jsmith, mikemUser_Alias AMINGS = user1, user2, user3 * 然后设置输入sudo su -命令不用输入密码。并且设置该用户可以使用su命令。 Allow root to run any commands anywhereroot ALL=(ALL) ALLAMINGS ALL=(ALL) NOPASSWD: /usr/bin/su * 测试下结果,没问题 [root@localhost ~]# su - user1上一次登录：四 8月 17 10:34:39 CST 2017pts/0 上[user1@localhost ~]$ sudo su -上一次登录：四 8月 17 10:36:13 CST 2017pts/0 上[root@localhost ~]# whoamiroot设置完成后，开始禁用root远程登陆修改配置文件/etc/ssh/sshd_config在文件中找到#PermitRootLogin yes修改为PermitRootLogin no （去掉#号） 保存配置文件后重启服务 systemctl restart sshd.service 重启服务命令]]></content>
      <tags>
        <tag>工作日志</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[9月20日 3.4/5/6 usermod 更改用户属性的命令及用户密码管理和mkpasswd命令]]></title>
    <url>%2F2018%2F12%2F25%2F9%E6%9C%8820%E6%97%A5%20usermod%20%E6%9B%B4%E6%94%B9%E7%94%A8%E6%88%B7%E5%B1%9E%E6%80%A7%E7%9A%84%E5%91%BD%E4%BB%A4%E5%8F%8A%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81%E7%AE%A1%E7%90%86%E5%92%8Cmkpasswd%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[用户密码管理passwd 更改用户密码* 更改root密码直接输入 passwd [root@aming1 ~]# passwd更改用户 root 的密码 。新的 密码：重新输入新的 密码：passwd：所有的身份验证令牌已经成功更新。 * 更改用户密码需要passwd 加上用户名字(passwd 因为有set_uid 所以可以让普通用户更改自己密码的权限) [root@aming1 ~]# passwd aming更改用户 aming 的密码 。新的 密码：重新输入新的 密码：passwd：所有的身份验证令牌已经成功更新。 * 一键更改密码命令(这种用法通常在写脚本的时候会用的到) 一键更改密码：echo “密码” | passwd –stdin 用户名 [root@aming1 ~]# echo “123456” |passwd –stdin aming更改用户 aming 的密码 。passwd：所有的身份验证令牌已经成功更新。一键更改密码：echo -e “密码\n密码” |passwd 用户名 * echo -e 对转义字符的输出不一样，比如echo “\n”会直接输出\n，而echo -e “\n”会输出一个换行。 [root@aming1 ~]# echo “123456\n123456”123456\n123456[root@aming1 ~]# echo -e “123456\n123456”123456123456[root@aming1 ~]# echo -e “123456\t123456”123456 123456 [root@aming1 ~]# echo -e “123456\n123456”123456123456[root@aming1 ~]# echo -e “123456\n123456” |passwd aming更改用户 aming 的密码 。新的 密码：无效的密码： 密码少于 8 个字符重新输入新的 密码：passwd：所有的身份验证令牌已经成功更新。锁定账户 passwd -l 账户 [root@aming1 ~]# passwd -l aming锁定用户 aming 的密码 。passwd: 操作成功[root@aming1 ~]# passwd -u aming解锁用户 aming 的密码。passwd: 操作成功 passwd -l aming 锁定aming用户passwd –u aming 解锁aming用户usermod –L aming 也是锁定用户usermod –U aming 解锁用户mkpasswd 生成密码的小工具用来生成密码的小工具，默认系统没有的，需要安装一个包，yum install –y expect * 默认生成9位的高强度的字符串。 [root@aming1 ~]# mkpasswdi48ESr(wj * 生成12位字符 mkpasswd -l 12 [root@localhost ~]# mkpasswd -l 122hrWZ$jdxqj0 * 生成3个特殊字符mkpasswd -l 12 –s 3 [root@localhost ~]# mkpasswd -l 12 -s 35wi8Foh=:Vo\ * 生成0个特殊字符 mkpasswd -l 12 –s 0 [root@localhost ~]# mkpasswd -l 12 -s 0b0bfIodJzd8x]]></content>
      <tags>
        <tag>工作日志</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[9月19日 linux 互传文件 用户管理及配置密码文件]]></title>
    <url>%2F2018%2F12%2F23%2F9%E6%9C%8819%E6%97%A5linux%20%E4%BA%92%E4%BC%A0%E6%96%87%E4%BB%B6%20%E5%8F%8A%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86%20%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[linux和windows互传文件* 首先需要安装一个包 yum install -y lrzsz * 安装完成之后输入 sz 111.txt 就会弹出一个框，选择把文件放到windows的哪一个文件夹下。 用户配置文件和密码文件* cat /etc/passwd 用户核心的配置文件 如果密码文件如果删除了，所有用户就登不上去了。 [root@aming1 ~]# cat /etc/passwdroot:x:0:0:root:/root:/bin/bashbin:x:1:1:bin:/bin:/sbin/nologindaemon:x:2:2:daemon:/sbin:/sbin/nologinadm:x:3:4:adm:/var/adm:/sbin/nologinlp:x:4:7:lp:/var/spool/lpd:/sbin/nologinsync:x:5:0:sync:/sbin:/bin/syncshutdown:x:6:0:shutdown:/sbin:/sbin/shutdownhalt:x:7:0:halt:/sbin:/sbin/haltmail:x:8:12:mail:/var/spool/mail:/sbin/nologinoperator:x:11:0:operator:/root:/sbin/nologingames:x:12:100:games:/usr/games:/sbin/nologinftp:x:14:50:FTP User:/var/ftp:/sbin/nologinnobody:x:99:99:Nobody:/:/sbin/nologinsystemd-bus-proxy:x:999:997:systemd Bus Proxy:/:/sbin/nologinsystemd-network:x:192:192:systemd Network Management:/:/sbin/nologindbus:x:81:81:System message bus:/:/sbin/nologinpolkitd:x:998:996:User for polkitd:/:/sbin/nologintss:x:59:59:Account used by the trousers package to sandbox the tcsd daemon:/dev/null:/sbin/nologinpostfix:x:89:89::/var/spool/postfix:/sbin/nologinsshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologinchrony:x:997:995::/var/lib/chrony:/sbin/nologinaming:x:1000:1000::/home/aming:/bin/bashaming2:x:1001:1001::/home/aming2:/bin/bash * /etc/passwd 用“ : ”分为7段，每个字段都有具体的含义 ·第一个字段为用户名·第二字段之前是存放的是该账号的密码.早期的Unix系统口令确实存放在这里，因为安全因素，后来就存放到了/etc/shadow中了，所·以用“x”来代替·第三个字段为一个数字，表示用户的“uid”。·第四个字段也是数字，表示为组标识号，称为“gid”·第五个字段为注释说明，没有实际意义。·第七段是用户的shell。如果是/sbin/nologin。则不允许登陆。 * etc/shadow 密码配置文件 [root@aming1 ~]# cat /etc/shadowroot:$6$TPvL1jnqi26yNubi$CnNodDe5nuT4WHIybkUvhS0.lSBNJUvYTov8VtEztJ0LKjo9cvAE2yFSzhzqom6bttBzgdC/9s7l8LDPmGjSD1::0:99999:7:::bin::17110:0:99999:7:::daemon::17110:0:99999:7:::adm::17110:0:99999:7:::lp::17110:0:99999:7:::sync::17110:0:99999:7:::shutdown::17110:0:99999:7:::halt::17110:0:99999:7:::mail::17110:0:99999:7:::operator::17110:0:99999:7:::games::17110:0:99999:7:::ftp::17110:0:99999:7:::nobody::17110:0:99999:7:::systemd-bus-proxy:!!:17607::::::systemd-network:!!:17607::::::dbus:!!:17607::::::polkitd:!!:17607::::::tss:!!:17607::::::postfix:!!:17607::::::sshd:!!:17607::::::chrony:!!:17607::::::aming:!!:17666:0:99999:7:::aming2:!!:17666:0:99999:7::: * /etc/shadow 分为9个字段。 ·第一段为用户名，与/etc/passwd 对应·第二个字段为用户密码。是加密的。使用SHA-512加密方式加密的密码。无法反编译，即使相同的密码加密字符也会不同。如果!!代表密码为空是不能登陆的，如果是*则代表该用户是锁定的。·第三个字段是上次更改密码的日期。这个数字以1970年1月1日和上次更改密码的日期计算而来。单位是“天”。·第四段是要过多少天才可以更改密码。默认是0，就不受限制。·第五段为密码多少天后到期。·第六段为密码到期前多少天来进行提醒。·第七段为账号失效期限，比如设置为3，如果密码到期，再过3天，这个账号会被锁定而失效。·第8段为生命周期，也是从1970年1月1日开始算的，如果过期账号则作废。·第九段是保留段，没有实际意义。在这里第二段的加密字符即使密码相同加密字符也是不一样的，采用的是SHA-512加密方式。 aming:$6$MesREyTp$J/IgN6.oT7uBJ292J.LLGC1dMQkN7ckgq0Olz/zDchzs6rQdWSee2o0fiJt8wPIHCNX4bNTOrsQsqsCTqhSPm.:17670:0:99999:7:::aming2:$6$l.NeS.LF$EQGwaMvyhvJnAz0eoAbUDXsTwEwbHvAOlqjFHCTWOUykSf0mzC6j0HwEFzUpvcSOZM6R2.jvN8qTsupdC2ho4.:17670:0:99999:7::: 用户管理用法如下useradd 增加用户* -u：自定义UID * -g：自定义用户组 * -d: 自定义用户家目录 * -M：表示不建立家目录 * -s ：表示自定义shell 添加用户，默认uid是从1000开始的。 [root@aming1 ~]# useradd aming3[root@aming1 ~]# tail -n3 /etc/passwdaming:x:1000:1000::/home/aming:/bin/bashaming2:x:1001:1001::/home/aming2:/bin/bashaming3:x:1002:1002::/home/aming3:/bin/bash[root@aming1 ~]# -u 与 -g 自定义UID与用户组 [root@aming1 ~]# tail -3 /etc/groupaming:x:1000:aming2:x:1001:aming3:x:1002:[root@aming1 ~]# useradd -u 1111 -g aming linyu1[root@aming1 ~]# tail -n2 /etc/passwdaming3:x:1002:1002::/home/aming3:/bin/bashlinyu1:x:1111:1000::/home/linyu1:/bin/bash 用 -d -s 自定义家目录与shell [root@aming1 ~]# useradd -u 1113 -g aming -d /home/linyu111 -s /sbin/nologin linyu3[root@aming1 ~]# tail -n2 /etc/passwdlinyu2:x:1112:1000::/home/aming:/sbin/nologinlinyu3:x:1113:1000::/home/linyu111:/sbin/nologin -M：表示不建立家目录(并不是该用户没有家目录，只是没有创建) [root@aming1 ~]# useradd -M user1[root@aming1 ~]# tail -n1 /etc/passwduser1:x:1114:1114::/home/user1:/bin/bash[root@aming1 ~]# ls /home/aming aming2 aming3 linyu1 linyu111 用户的家目录是可以更改的。可vi编辑etc/passwd 直接更改，家目录是可以手动创建的。但是新建用户的家目录光有空文件夹不行，里面还要有bash ，不然会显示不正常。,在ls -la /etc/skel/ 有用户配置文件的模板，这里有模板，cp到新建的家目录里就可以了。然后赋予该目录有该用户与组的权限！ [root@aming1 ~]# ls -la /etc/skel/总用量 24drwxr-xr-x. 2 root root 62 3月 17 18:59 .drwxr-xr-x. 77 root root 8192 5月 19 15:02 ..-rw-r–r–. 1 root root 18 8月 3 2016 .bash_logout-rw-r–r–. 1 root root 193 8月 3 2016 .bash_profile-rw-r–r–. 1 root root 231 8月 3 2016 .bashrc cp /etc/skel/.bash* /home/useruserdel 删除用户的命令。 [root@aming1 ~]# userdel linyu3[root@aming1 ~]# tail -n3 /etc/passwdlinyu1:x:1111:1000::/home/linyu1:/bin/bashlinyu2:x:1112:1000::/home/aming:/sbin/nologinuser1:x:1114:1114::/home/user1:/bin/bash[root@aming1 ~]# ls /home/aming aming2 aming3 linyu1 linyu111 可以看到删除用户后，用户的家目录并没有被删除。（留给管理员，确定这个家目录没有用了之后在手动删掉。） * userdel -r 选项可以连同用户家目录同时删除。 用户组管理 * groupadd 增加组命令 [root@aming1 ~]# groupadd grp1[root@aming1 ~]# tail -n1 /etc/groupgrp1:x:1002: * 用-g自定义新建用户组的gid 。groupadd -g 1006 group4 [root@localhost ~]# groupadd -g 1006 group4[root@localhost ~]# tail -n5 /etc/groupchrony:x:995:grp1:x:1000:grp2:x:1001:grp3:x:1002:group4:x:1006:一般新建的组或者用户都是从1000 gid/uid开始的。1000以前都是为系统来保留的。 * 用户组管理文件 （还有用户组的密码文件在etc/gshadow） [root@aming1 ~]# cat /etc/grouproot:x:0:bin:x:1:daemon:x:2:sys:x:3:adm:x:4:games:x:20:tape:x:30:video:x:39:ftp:x:50:lock:x:54:audio:x:63: utempter:x:35:ssh_keys:x:999:input:x:998:systemd-journal:x:190:systemd-bus-proxy:x:997:systemd-network:x:192:dbus:x:81:polkitd:x:996:tss:x:59:dip:x:40:postdrop:x:90:postfix:x:89:sshd:x:74:chrony:x:995:aming:x:1000:aming2:x:1001:[root@aming1 ~]# * groupdel 删除组命令 [root@aming1 ~]# groupdel grp1[root@aming1 ~]# tail -n2 /etc/grogroff/ group group-[root@aming1 ~]# tail -n2 /etc/groupaming:x:1000:aming2:x:1001: 不能直接删除有用户的组。需要先删除用户，在删除用户组。 * 系统自动备份用户，用户组管理及密码文件 [root@localhost ~]# ls /etc/passwd/etc/passwd[root@localhost ~]# ls /etc/passwdpasswd passwd-[root@localhost ~]# ls /etc/shadowshadow shadow-[root@localhost ~]# ls /etc/shadowshadow shadow-[root@localhost ~]# ls /etc/gsgshadow gshadow- gss/后面带“-”号的文件就是系统自动备份的文件。如果误删了配置文件可以copy一份带“-”号的进行恢复。不过备份文件可能稍有误差，比如刚刚建立的用户还没有备份。恢复的时候就没有哪些没来得及备份的用户。usermod 更改用户属性的命令以下是用法： * usermod – u 111 username 更改uid * usermod -g 1010 username 更改 gid * usermod –d /home/safasfa username 更改家目录 * usermod -s /sbin/nologin username 更改shell * usermod –G 添加扩展组 * 每个用户可以通过 id username命令来查看一个用户的uid，gid,组，扩展组的。 [root@aming1 ~]# id aming2uid=1001(aming2) gid=1001(aming2) 组=1001(aming2) * usermod –G 添加扩展组 [root@aming1 ~]# usermod -G aming aming2 [root@aming1 ~]# id aming2uid=1001(aming2) gid=1001(aming2) 组=1001(aming2),1000(aming) 增加多个扩展组， [root@aming1 ~]# usermod -G aming,grp1 aming2 [root@aming1 ~]# id aming2uid=1001(aming2) gid=1001(aming2) 组=1001(aming2),1000(aming),1115(grp1) 如果不像上面那样添加，直接-G添加就会把之前的扩展组替换掉。用 -g 则不会。]]></content>
      <tags>
        <tag>工作日志</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[9月18日 2.23/24/25 find 命令 2.26 文件名后缀]]></title>
    <url>%2F2018%2F12%2F23%2F9%E6%9C%8818%E6%97%A5%20find%20%E5%91%BD%E4%BB%A4%20%E6%96%87%E4%BB%B6%E5%90%8D%E5%90%8E%E7%BC%80%2F</url>
    <content type="text"><![CDATA[查找文件命令 find作用： 如果只知道一个文件的大概位置。就可以用find来查找。用法：find 位置 - type 类型 文件名[root@aminglinux ~]# find /etc/ -name “sshd_config”/etc/ssh/sshd_config * 如果想查找etc下包含sshd的所有目录和文件 [root@aminglinux ~]# find /etc/ -name “sshd*”/etc/rc.d/init.d/sshd/etc/pam.d/sshd/etc/sysconfig/sshd/etc/ssh/sshd_config * 用find -type d -name 只查找目录 [root@aminglinux ~]# find /etc/ -type d -name “sshd*”[root@aminglinux ~]# * 只查找文件 find -type f -name “sshd*” [root@aminglinux ~]# find /etc/ -type f -name “sshd*”/etc/rc.d/init.d/sshd/etc/pam.d/sshd/etc/sysconfig/sshd/etc/ssh/sshd_config[root@aminglinux ~]#find其他用法 三个time -mtime -ctime -atime * 用法 find / -type -name -mtime -ctime -atime * 首先用stat 命令，查看一个文件的详细信息 [root@aminglinux ~]# stat 333.txtFile: “333.txt”Size: 0 Blocks: 0 IO Block: 4096 普通空文件 Device: 803h/2051d Inode: 791054 Links: 1Access: (0644/-rw-r–r–) Uid: ( 0/ root) Gid: ( 0/ root)Access最近访问: 2017-03-25 04:39:31.455979690 +0800Modify最近更改: 2017-03-25 04:39:31.455979690 +0800Change最近改动: 2017-03-25 04:39:31.455979690 +0800 [root@aminglinux ~]#Access最近访问是：-atime （访问一次就会变化）Modify最近更改是：-mtine （改文件内容）Change最近改动是：-ctime （改权限如果改动文件内容ctime也会跟着变化） * 了解了 三个time后，可以用进行find 利用三个time查找。 * find / -type f -mtime -1(一天以内的意思) 如下可以看到一天之内更改的文件非常多 [root@aminglinux ~]# find / -type f -mtime -1/proc/1516/pagemap/proc/1516/attr/current/proc/1516/attr/prev/proc/1516/attr/exec/proc/1516/attr/fscreate/proc/1516/attr/keycreate/proc/1516/attr/sockcreate/proc/1516/wchan/proc/1516/stack/proc/1516/schedstat/proc/1516/cpuset/proc/1516/cgroup/proc/1516/oom_score/proc/1516/oom_adj/proc/1516/oom_score_adj/proc/1516/loginuid/proc/1516/sessionid/proc/1516/coredump_filter/proc/1516/io * find / -type f -mtime +1(一天以上的意思) * find / -type f -mmin -60(查看60分钟以内的) * 还可以加多个判断条件，起到并且的意思,首先要是文件，然后要一天内改动的，然后要名字包含.conf的 find /etc/ -type f -ctime -1 -name “*.conf” [root@aming1 ~]# find /etc/ -type f -ctime -1 -name “*.conf”/etc/resolv.conf * 使用 -o 还可以加多个判断条件，起到或者的意思，查找文件，或者一天内改动，或者名字包含.conf [root@aming1 ~]# find /etc/ -type f -o -ctime -1 -o -name “*.conf”find常用选项 -type -name -mtime 偶尔使用 -o * 查找一个文件的硬链接 find / -inum 33623781 [root@aming1 ~]# touch 2.txt[root@aming1 ~]# ln 2.txt /tmp/2.txt_heard[root@aming1 ~]# ls -li 总用量 850332746 drwxr-xr-x. 2 root root 19 5月 15 21:21 11133599786 -rw-r–r–. 1 root root 130 5月 15 21:09 1.txt33623781 -rw-r–r–. 2 root root 0 5月 16 10:50 2.txt33574987 -rw——-. 1 root root 1422 3月 17 19:03 anaconda-ks.cfg[root@aming1 ~]# find / -inum 33623781/root/2.txt/tmp/2.txt_heard[root@aming1 ~]# * 查找一个小时内改动的文件 [root@aming1 ~]# find /root/ -type f -mmin -60/root/2.txtfind 选项exec * 作用：把前面查找出的内容，作为参数在后面让命令执行。 * 用法 find /root/ -type f -mmin -120 -exec ls -l {} ; [root@aming1 ~]# find /root/ -type f -mmin -60/root/2.txt[root@aming1 ~]# find /tmp/ -type f -mmin -120 -exec ls -l {} \;-rw-r–r–. 2 root root 0 5月 16 10:50 /tmp/2.txt_heard 文件名后缀首先在linux系统下是区分命令大小写的。[root@aming1 ~]# LS-bash: LS: 未找到命令在linux系统下文件也是有后缀名的，但是后缀名并不代表这是个什么文件类型。一般会压缩文件为.gz 配置文件为 .conf 这个不绝对，后缀并不代表什么。]]></content>
      <tags>
        <tag>工作日志</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[9月17日 特殊权限 set_uid set_gid stick_bit 软链接与硬链接]]></title>
    <url>%2F2018%2F12%2F17%2F9%E6%9C%8817%E6%97%A5%20%20%E7%89%B9%E6%AE%8A%E6%9D%83%E9%99%90%20set_uid%20%20set_gid%20stick_bit%2F</url>
    <content type="text"><![CDATA[特殊权限 set_uidset_uid 的作用：可以在普通用户用到这个命令的时候临时授予普通用户拥有root权限。 之前用到的一个命令就是更改密码的时候用到的passwd命令[root@aminglinux-01 ~]# which passwd/usr/bin/passwd[root@aminglinux-01 ~]# ls -l /usr/bin/passwd-rwsr-xr-x. 1 root root 27832 6月 10 2014 /usr/bin/passwd 可以看到这个文件是红色的，并且在所有者的第三位权限是个s 这个权限是rws，这个s的权限就是：set_uid我们平时普通用户也是可以用passwd来更改密码的。那首先看看密码文件的权限是怎么样的[root@aminglinux-01 ~]# ls -l /etc/shadow———-. 1 root root 662 8月 9 21:38 /etc/shadow 所有人都没有任何权限，（ 当然root是有至高无上的权利的） 可以看到这个保存密码的文件是非常严谨的，但是普通用户依然有修改密码的权限。所谓的set_uid就是在执行命令时临时赋予root权限给没权限的用户。 给一个文件设置set_uid前提是这个文件是一个可执行的2进制文件。file 加命令的绝对路径，可以查看文件类型，比如是可读的test文件还是不可读的二进制文,如下显示的就是二进制文件。[root@aming1 ~]# file /usr/bin/passwd /usr/bin/passwd: setuid ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.32, BuildID[sha1]=1e5735bf7b317e60bcb907f1989951f6abd50e8d, stripped[root@aming1 ~]#怎样添加set_uid的权限：chmod u+s 可执行加二进制文件 比如给ls添加set_uid权限[root@aminglinux-01 ~]# which lsalias ls=’ls –color=auto’/usr/bin/ls [root@aminglinux-01 ~]# chmod u+s /usr/bin/ls[root@aminglinux-01 ~]# ls -l /usr/bin/ls-rwsr-xr-x. 1 root root 117656 11月 6 2016 /usr/bin/ls 创建一个普通用户，用普通用户运行ls命令查看root目录是没有权限的[root@aming1 ~]# useradd aming[root@aming1 ~]# su - aming[aming@aming1 ~]$ ls /root/ls: 无法打开目录/root/: 权限不够 返回root用户给ls添加上set_uid之后在试试,就可以用ls命令了，就是临时用了一下root权限。。[aming@aming1 ~]$ su - root密码：上一次登录：二 5月 15 20:44:43 CST 2018从 192.168.159.1pts/0 上[root@aming1 ~]# chmod u+s /usr/bin/ls[root@aming1 ~]# ls -l /usr/bin/ls-rwsr-xr-x. 1 root root 117656 11月 6 2016 /usr/bin/ls[root@aming1 ~]# su - aming上一次登录：二 5月 15 22:35:46 CST 2018pts/0 上[aming@aming1 ~]$ ls /root/111 1.txt anaconda-ks.cfg[aming@aming1 ~]$ 当权限是大写的S时候，说明文件之前没有x权限。比如下面[root@aming1 ~]# chmod u=rws /usr/bin/ls[root@aming1 ~]# ls -l /usr/bin/ls-rwSr-xr-x. 1 root root 117656 11月 6 2016 /usr/bin/ls[root@aming1 ~]# chmod u+x /usr/bin/ls[root@aming1 ~]# ls -l /usr/bin/ls-rwsr-xr-x. 1 root root 117656 11月 6 2016 /usr/bin/ls 目录也是可以加set_uid权限的，不过没有什么意义，目录有不能执行。 特殊权限 set_gid 功能：这个特殊权限与set_uid类似，只不过作用在用户组的权限上。普通用户临时拥有root组的权限。 用法：chmod g+s 可执行加二进制文件 可以再用ls命令设置看一下，s权限作用在了用户组的位置上，文件显示为黄色。 目录也是可以加上set_gid 权限的。并且在加上权限后，更改目录的所属组时候，在此目录新建的子文件或者子目录，所属组都是跟父目录保持一致的。取消set_gid后，在创建就不会跟父目录保持一致。[root@aminglinux-01 ~]# chown linyu aaa/[root@aminglinux-01 ~]# chmod g+s aaa/[root@aminglinux-01 ~]# ls -ld aaa/drwxr-sr-x. 2 linyu root 6 8月 9 22:08 aaa/[root@aminglinux-01 ~]# mkdir aaa/aming11.txt[root@aminglinux-01 ~]# mkdir aaa/aming12/[root@aminglinux-01 ~]# ls -l aaa/总用量 0drwxr-sr-x. 2 root linyu 6 8月 10 19:47 aming11.txtdrwxr-sr-x. 2 root linyu 6 8月 10 19:47 aming12特殊权限 stick_bit 功能：特殊权限是“t”,这个t就是防删除位。防止某个用户创建的文件被其他用户删除。root用户除外。 用法：chmod o+t 目录 这个用到的相对比较多，/tmp/目录就是有stick_bit权限的。[root@aminglinux-01 ~]# ls -ld /tmp/drwxrwxrwt. 13 root root 4096 8月 10 19:37 /tmp/ /tmp/最后一位权限是“t”,这个t就是防删除位。 /tmp/默认是777权限，这样每一个用户都可以更改删除文件，这样如果一个用户把另一个用户的文件删除了，这样就乱套了。所以有了stick_bit权限，其他用户看是可以得，更改，删，是不可以的。首先用aming用户在tmp下创建[root@aming1 ~]# su - aming上一次登录：二 5月 15 22:38:42 CST 2018pts/0 上[aming@aming1 ~]$ cd /tmp/[aming@aming1 tmp]$ lssystemd-private-f5ee0732c20c480e948ac5116d7bc899-vmtoolsd.service-ZjwF4b[aming@aming1 tmp]$ touch /tmp/1.txt 然后切换为aming2用户对tmp下1.txt进行删除，追加，更改，都是不可以的。[root@aming1 ~]# su - aming2—title: 9月6日 1.6-1.8 配置ip tags: 工作日志最后一次失败的登录：二 5月 15 23:10:37 CST 2018pts/0 上最有一次成功登录后有 1 次失败的登录尝试。[aming2@aming1 ~]$ vi /tmp/1.txt ———————————————-此处vi编辑会提示该文件为只读。[aming2@aming1 ~]$ head -n2 /etc/passwd &gt;&gt; /tmp/1.txt-bash: /tmp/1.txt: 权限不够[aming2@aming1 ~]$ rm /tmp/1.txtrm：是否删除有写保护的普通空文件 “/tmp/1.txt”？yrm: 无法删除”/tmp/1.txt”: 不允许的操作 父目录的权限决定子目录/文件是否能被改动。果文件或目录设置了stick_bit权限，在文件或目录权限777的情况下。其他用户也只能修改，不能删除。更改特殊权限的另一种方式：用权限代表的数字权限更改 set_uid set_gid stick_bit 用数字权限表示分别就是 4 2 1 假如之前的权限是755 ，chmod u+s 用数字表示就是 chmod 4755 ,特殊权限的数字直接加到普通权限的前面 。 chmod g+s 用数字表示就是2755chmod o+t 用数字表示就是1755 软链接软连接就像windows里的快捷方式。用法：ln -s 文件 软连接文件 比如：给yum.log 做一个软链接[root@aminglinux-01 ~]# ln -s /tmp/yum.log /root/aaa/yum.log[root@aminglinux-01 ~]# ls -l /root/aaa/总用量 0-rw-r–r–. 1 root root 0 8月 10 19:44 aming1.txtlrwxrwxrwx. 1 root root 12 8月 10 23:04 yum.log -&gt; /tmp/yum.log[root@aminglinux-01 ~]#注意事项： 删除软连接的时候，如果软连接是个目录，删除时敲软连接名字时候 候千万别打最后面的斜杠，否则删除的就是被链接目录的本身。 软连接如果被删除源文件并不会受到任何影响。但是源文件被删除，或者目录有改动，那么软连接文件会失效。 /bin就是usr/bin的软链接。[root@aminglinux-01 ~]# ls -l /binlrwxrwxrwx. 1 root root 7 7月 31 22:54 /bin -&gt; usr/bin 软链接的优点：可以非常的节省空间。而且快捷方便。可以把另一块大空间的磁盘分区软链接到当前正在使用快不够用的文件夹中，实现快捷添加磁盘空间。软链接文件也是有大小的，它的大小根据源文件路径的长度来变化，源文件所在目录越长越深，其软连接的大小就会越大，当然在大也就是几B大小。 软链接不仅可以链接文件，还可以链接目录[root@aminglinux-01 ~]# ln -s /tmp/111 /root/aming[root@aminglinux-01 ~]# ls -l /root/aminglrwxrwxrwx. 1 root root 8 8月 10 23:12 /root/aming -&gt; /tmp/111[root@aminglinux-01 ~]# 软链接有绝对路径页游相对路径，相对路径仅限于当前目录。相对路径有一些弊端。尽量使用绝对路径。因为软连接文件一旦移动位置就会导致软连接失效。 软链接的用途例子：如果一个分区空间满了，而服务只读那个分区。这样就可以把当前分区的文件cp到更大的分区里面。然后做一个软链接到当前分区。这样服务依然可以读取到文件。还有效的利用了磁盘空间。硬链接 什么是硬链接： 硬链接支持对文件做硬链接。不支持目录。 硬链接的inode号，时间，大小都是一样的。用法： ln 源文件 硬链接 创建一个456.txt文件的硬链接,如下：[root@aminglinux-01 ~]# ln 456.txt 456_heard.txt[root@aminglinux-01 ~]# ls -li总用量 833575032 -rw-rw-r–. 2 root root 0 8月 9 22:14 456_heard.txt33575032 -rw-rw-r–. 2 root root 0 8月 9 22:14 456.txt[root@aminglinux-01 ~]# 可以看到硬链接的源文件456.txt和硬链接后的文件heard_456.txt,两者inode号，时间，大小都是一样的。 所以硬链接实际上是两个文件是同一个文件。不分源文件和链接文件。两者是互相硬链接。删除其中一个并不影响文件本身。 一个文件可以创建多个硬链接。 文件名只是文件本身的一个外皮。真正的文件本身是inode号记住的文件。删除其中一个外皮对文件本身并没有影响。但是外皮需要最后留一个。否则这个文件就真的被删除啦。 硬链接是不会占用双份空间的，因为使用相同的inode。 硬链接无法跨分区建立，因为每一个分区都有一套自己的inode，在格式化分区时都是预先设置好的。 无法手动硬链接目录。系统自带硬链接目录。]]></content>
      <tags>
        <tag>工作日志</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[9月14日 2.14 文件和目录权限chmod 2.15 更改所有者和所属组chown 2.16 umask 2.17 隐藏权限lsattr/chattr]]></title>
    <url>%2F2018%2F12%2F16%2F9%E6%9C%8814%E6%97%A5%202.14%20%E6%96%87%E4%BB%B6%E5%92%8C%E7%9B%AE%E5%BD%95%E6%9D%83%E9%99%90chmod%20%20%E6%9B%B4%E6%94%B9%E6%89%80%E6%9C%89%E8%80%85%E5%92%8C%E6%89%80%E5%B1%9E%E7%BB%84chown%20umask%20%E9%9A%90%E8%97%8F%E6%9D%83%E9%99%90lsattrchattr%2F</url>
    <content type="text"><![CDATA[之前学习的ls -l命令时候，学习了列出每个位置都是什么。[root@aming1 ~]# ls -l 111.txt-rw-r–r–. 1 root root 1008 5月 13 22:26 111.txt 开头除了第一位是文件类型外，后面九位都是权限位。 在inode使用量前面11位。第一位表示文件类型，后面九位表示文件权限，最后一个（.）是受制于selinux。如果关闭selinux，新建的文件或目录就会没有(.) 在九位权限位置里，前三位代表所有者权限，中间三位是所属组权限，后三位是其他用户权限。 其中rwxr 读 数字用4代表 w 写 数字用2代表 x 执行 数字用1代表 权限一般也用数字表示，比如764，就是所有者（u）rwx,所属组（g）rw-，其他用户（o）r–r+w+x=7rwxrwxrwx=777修改权限命令: chmod chmod 更改权限 change mode 的缩写 语法：chmod 777 文件/目录名字[root@aming1 ~]# ls -l 111.txt -rw-r–r–. 1 root root 1008 5月 13 22:26 111.txt[root@aming1 ~]# chmod 777 111.txt[root@aming1 ~]# ls -l 111.txt -rwxrwxrwx. 1 root root 1008 5月 13 22:26 111.txt 或者：chmod u=rwx,g=rw,o=r 文件/目录名字[root@aming1 ~]# ls -l 111.txt-rw-r–r–. 1 root root 1008 5月 13 22:26 111.txt[root@aming1 ~]# chmod 777 111.txt[root@aming1 ~]# ls -l 111.txt-rwxrwxrwx. 1 root root 1008 5月 13 22:26 111.txt[root@aming1 ~]# chmod u=rwx,g=rw,o=r 111.txt[root@aming1 ~]# ls -l 111.txt-rwxrw-r–. 1 root root 1008 5月 13 22:26 111.txt chmod -R操作只对目录或文件本身生效。如需目录及子文件子目录全部生效需要加-R加上-R 命令可以同时更改目录及目录下所有的权限。 [root@aminglinux-01 ~]# chmod 700 /tmp/aming1/[root@aminglinux-01 ~]# ls -l /tmp/ 总用量 236 -rwxr-xr-x. 1 root root 117656 8月 9 09:19 111drwx——. 3 root root 17 8月 9 09:23 aming1drwxr-xr-x. 4 root root 31 8月 9 09:34 aming2 [root@aminglinux-01 ~]# ls -l /tmp/aming1/总用量 0 drwxr-xr-x. 3 root root 30 8月 9 09:40 111[root@aminglinux-01 ~]# chmod -R 777 /tmp/aming1/[root@aminglinux-01 ~]# ls -l /tmp/aming1/总用量 0 drwxrwxrwx. 3 root root 30 8月 9 09:40 111[root@aminglinux-01 ~]# ls -l /tmp/ 总用量 236 -rwxr-xr-x. 1 root root 117656 8月 9 09:19 111 drwxrwxrwx. 3 root root 17 8月 9 09:23 aming1 drwxr-xr-x. 4 root root 31 8月 9 09:34 aming2 还有一个用法是 chmod a+x 文件/目录名字意思是u，g，o同时加上x权限。 a-x,就是全部去掉x权限。 也是可以，u+w，u-x，g+w，g-w等等都可以用。[root@aminglinux-01 ~]# chmod 700 /tmp/aming1/ [root@aminglinux-01 ~]# ls -l /tmp/总用量 236 drwx——. 3 root root 17 8月 9 09:23 aming1 [root@aminglinux-01 ~]# chmod a+x /tmp/aming1/[root@aminglinux-01 ~]# ls -l /tmp/总用量 236 drwx–x–x. 3 root root 17 8月 9 09:23 aming1 [root@aminglinux-01 ~]# chmod a-x /tmp/aming1/[root@aminglinux-01 ~]# ls -l /tmp/总用量 236 drw——-. 3 root root 17 8月 9 09:23 aming1 [root@aminglinux-01 ~]# 2.15 chown 更改所有者和所属组 chown = change owner 更改所有者 chown 不仅可以更改所有者，也可以更改所属组。 cat /etc/passwd 来查看系统用户都有哪些。 用法：chown 所有者:所属组 文件名/目录下面修改一下新建文件的所有者。[root@aminglinux-01 ~]# touch /tmp/lunyu.log[root@aminglinux-01 ~]# ls -l /tmp/lunyu.log-rw-r–r–. 1 root root 0 8月 9 21:45 /tmp/lunyu.log[root@aminglinux-01 ~]# chown linyu /tmp/lunyu.log[root@aminglinux-01 ~]# ls -l /tmp/lunyu.log-rw-r–r–. 1 linyu root 0 8月 9 21:45 /tmp/lunyu.log[root@aminglinux-01 ~]# 更改所属组命令：chgrp，用法同上。但是chown既可以更改所有者也可以同时或者单独更改所属组 chown 同时或者单独更改所属组[root@aminglinux-01 ~]# chown linyu:games /tmp/lunyu.log[root@aminglinux-01 ~]# ls -l /tmp/lunyu.log-rw-r–r–. 1 linyu games 0 8月 9 21:45 /tmp/lunyu.log [root@aminglinux-01 ~]# chown :root /tmp/lunyu.log[root@aminglinux-01 ~]# ls -l /tmp/lunyu.log-rw-r–r–. 1 linyu root 0 8月 9 21:45 /tmp/lunyu.log chown -R 命令同样可以一次性更改目录及子目录和文件的所有者和所属组。2.16 umask linux在创建一个文件或者目录时候都会有一个默认的权限。这个是怎么来的呢。 运行一下 umask [root@aminglinux-01 ~]# umask0022这个是root用户下的umask值，通过这个值可以确定文件以及目录默认是什么权限。 首先创建一个目录和文件。然后修改一下啊umask值，在创建一个目录和文件。然后对比一下看有什么联系。[root@aminglinux-01 ~]# touch 123.txt[root@aminglinux-01 ~]# mkdir aaa[root@aminglinux-01 ~]# ls -l总用量 8-rw-r–r–. 1 root root 0 8月 9 22:08 123.txtdrwxr-xr-x. 2 root root 6 8月 9 22:08 aaa 在0022时候，文件默认是：644，目录默认是：755[root@aminglinux-01 ~]# umask 002[root@aminglinux-01 ~]# umask0002[root@aminglinux-01 ~]# touch 456.txt[root@aminglinux-01 ~]# mkdir bbb[root@aminglinux-01 ~]# ls -l总用量 8-rw-r–r–. 1 root root 0 8月 9 22:08 123.txt-rw-rw-r–. 1 root root 0 8月 9 22:14 456.txtdrwxr-xr-x. 2 root root 6 8月 9 22:08 aaadrwxrwxr-x. 2 root root 6 8月 9 22:14 bbb[root@aminglinux-01 ~]#在0002时候，文件默认是：664，目录默认是：775 得出答案是：在0022时候，文件默认是：644，目录默认是：755在0002时候，文件默认是：664，目录默认是：775 首先目录，必须会有x权限，因为想查看这个目录，首先都要进入查看，所以有x权限。所以默认权限最大的话就是7.文件不需要必须有x权限，所以默认6就可以满足。 由此规律得出：目录：777-022=755 777-002=775 文件：666-022=644 666-002=664 这个规律合乎逻辑但是不一定是准确的。 如果我们设置umask 为 003。按照之前的算法666-003=663。实际上经过测试是664[root@aminglinux-01 ~]# umask 003[root@aminglinux-01 ~]# touch 888.txt[root@aminglinux-01 ~]# ls -l 888.txt-rw-rw-r–. 1 root root 0 8月 9 22:27 888.txt[root@aminglinux-01 ~]# 那么之前的算法就是有漏洞的。 正确的算法是：文件 666（rw-rw-rw-）- 003(——-wx)=rw-rw-r– 也就是664目录 777（rwxrwxrwx）- 002(——-w-)=rwxrwxr-x 也就是775 2.17 隐藏权限chattr 设置隐藏权限 用法：chattr +i 在文件以及目录+i权限时候，是不可以更改，移动，删除等操作，不能做任何操作 用法：chattr +a 在文件以及目录+a权限时候，是不能移动，删除等操作，但是文件可以追加内容，目录里可以新加文件或目录。 chattr -i 解除 i 的隐藏权限 chattr -a 解除 a 的隐藏权限首先给1.txt加上 i 的权限，可以ls -l 查看1.txt的权限并没有什么不同。[root@aming1 ~]# ls1.txt anaconda-ks.cfg[root@aming1 ~]# chattr +i 1.txt[root@aming1 ~]# ll 1.txt-rw-r–r–. 1 root root 111 5月 13 22:52 1.txt 然后vi编辑添加内容。会有如下提示,提示您正在编辑一个只读的文件。即使强制保存也会保存失败。 连强大的rm -f 都无法删除[root@aming1 ~]# rm -f 1.txtrm: 无法删除”1.txt”: 不允许的操作 移动更是不可以的[root@aming1 ~]# mv 1.txt 111.txtmv: 无法将”1.txt” 移动至”111.txt”: 不允许的操作 touch 也不可以。 如果给一个目录添加隐藏 i 权限，该目录也和文件一样不可以更改，创建新目录文件，删除。但是限制的只是目录本身，如果该目录设置权限之前原有的文件则可以追加文件内容。但不可以更改和删除。 chattr +a 试一下 a的隐藏权限。除了追加文件，可以成功[root@aming1 ~]# head -n2 /etc/passwd &gt;&gt; 1.txt[root@aming1 ~]# cat 1.txtroot:x:0:0:root:/root:/bin/bashbin:x:1:1:bin:/bin:/sbin/nologintouch也是可以的[root@aming1 ~]# touch 1.txt [root@aming1 ~]#经过测试除了追加内容以外更改之前的其他内容是不可以的。 给目录加上a 权限是可以在此目录下添加文件和新目录的， 但是不能删除，更改名字，与手动更改目录下文件内容都是不可以的。-给目录加上a 权限可以在此目录下的文件追加内容。 lsattr 查看隐藏权限 当然设置了隐藏权限也是可以查看的 用lsattr 查看，可以看到i的隐藏权限。[root@aming1 ~]# lsattr 1.txt—-i———– 1.txt 还有 a 权限[root@aming1 ~]# lsattr 1.txt—–a———- 1.txt a 与 i 权限可以同时存在，权限取最小[root@aming1 ~]# lsattr 1.txt—-ia———- 1.txt]]></content>
      <tags>
        <tag>工作日志</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[9月13日 2.10 环境变量 PATH 2.11 cp命令 2.12 mv命令 2.13 文档查看cat/more/less/head/tail]]></title>
    <url>%2F2018%2F12%2F09%2F9%E6%9C%8813%E6%97%A5%20%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8FPATHcp%E5%91%BD%E4%BB%A4mv%E5%91%BD%E4%BB%A4%20%E6%96%87%E6%A1%A3%E6%9F%A5%E7%9C%8Bcat%20more%20less%20head%20tail%2F</url>
    <content type="text"><![CDATA[2.10 环境变量平时在敲命令的时候可以在任何路径下直接执行。而输入其他 文本会提示找不到该文件，这是为什么呢？ 如果命令在以下目录的时候，可以不敲绝对路径。就能生效。这就是：环境变量[root@aminglinux-01 ~]# echo $PATH /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin 当然直接输入命令的绝对路径肯定也是可以生效的。拷贝到别的地方输入绝对路径一样可以生效。 [root@aminglinux-01 ~]# which lsalias ls=’ls –color=auto’ /usr/bin/ls [root@aminglinux-01 ~]# ls /usr/bin/ls/usr/bin/ls[root@aminglinux-01 ~]# cp /usr/bin/ls /tmp/ls2[root@aminglinux-01 ~]# /tmp/ls2anaconda-ks.cfg[root@aminglinux-01 ~]# 但是直接输入ls2会生效吗?是不可以的，看下面输出[root@aminglinux-01 ~]# ls2-bash: ls2: 未找到命令结果是并没有生效，这是因为ls2所在的/tmp/目录并不在（PATH）环境变量里面，现在把目录加到环境变量里面。 PATH=$PATH:/tmp/ 这是个shell意思是把tmp加入到PATH [root@aminglinux-01 ~]# PATH=$PATH:/tmp/ [root@aminglinux-01 ~]# echo $PATH/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/ bin:/root/bin:/tmp/ 这样在输入ls2，就可以生效了。[root@aminglinux-01 ~]# ls2anaconda-ks.cfg[root@aminglinux-01 ~]# 这时候如果在打开新的终端连接系统，在输入ls2，就不再生效了。如果需要在任何时候都会生效，永久生效。需要加到系统配置/etc/profile文件里。添加到最后一行就可以了，如下： [root@aminglinux-01 ~]# vi /etc/profile… if [ “$HISTCONTROL” = “ignorespace” ] ; then export HISTCONTROL=ignorebothelse export HISTCONTROL=ignoredupsfi export PATH USER LOGNAME MAIL HOSTNAME HISTSIZE HISTCONTROL By default, we want umask to get set. This sets it for login shell# Current threshold for system reserved uid/gids is 200# You could check uidgid reservation validity in# /usr/share/doc/setup-*/uidgid fileif [ $UID -gt 199 ] &amp;&amp; [ “/usr/bin/id -gn“ = “/usr/bin/id -un“ ]; thenumask 002 else umask 022fi for i in /etc/profile.d/*.sh ; do if [ -r &quot;$i&quot; ]; then if [ &quot;${-#*i}&quot; != &quot;$-&quot; ]; then . &quot;$i&quot; else . &quot;$i&quot; &gt;/dev/null fi fidone unset iunset -f pathmungePATH=$PATH:/tmp/ *** 在最后加上：PATH=$PATH:/tmp/ 如果想恢复之前的PATH，就去掉/tmp/，复制之前的PATH。命令如下： [root@aminglinux-01 ~]# echo $PATH/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin:/tmp/[root@aminglinux-01 ~]#PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin[root@aminglinux-01 ~]# echo $PATH/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin[root@aminglinux-01 ~]# ls2-bash: ls2: 未找到命令 如果设置了永久保存，就在vi /etc/profile里面把PATH=$PATH:/tmp/删掉重启就可以了。 2.11 cp 拷贝命令 cp ,copy的意思，把源文件拷贝到目标文件,并且可以重命名目标文件名字[root@aming1 ~]# ls123.txt anaconda-ks.cfg[root@aming1 ~]# cp /etc/passwd 456.txt[root@aming1 ~]# ls123.txt 456.txt anaconda-ks.cfg cp 目录也是需要加上-r的。[root@aming1 ~]# cp -r /tmp/aminglinux/ /tmp/aming/[root@aming1 ~]# tree /tmp/aming/tmp/aming└── 111 └── 222 └── 333 [root@aming1 ~]# tree /tmp/aminglinux//tmp/aminglinux/└── 111 └── 222 └── 333 当复制文件已经存在的时候会问是否覆盖[root@aming1 ~]# ls123.txt anaconda-ks.cfg[root@aming1 ~]# cp /etc/passwd 456.txt[root@aming1 ~]# ls123.txt 456.txt anaconda-ks.cfg[root@aming1 ~]# cp /etc/passwd 456.txtcp：是否覆盖”456.txt”？ y[root@aming1 ~]# 那么当复制目录的时候会不会提示覆盖呢 经过测试是如果目录都是空的，就不会有提示，如果目录里有文件就会提示是否覆盖。 2.12 mv移动文件命令 mv ：move的缩写，移动文件命令 同一个目录下移动文件或者目录会给文件或目录更改名字 [root@aminglinux-01 ~]# lsanaconda-ks.cfg[root@aminglinux-01 ~]# mv anaconda-ks.cfg anaconda-ks.cfg.1[root@aminglinux-01 ~]# lsanaconda-ks.cfg.1 也可以移动文件或目录并且改名字。[root@aminglinux-01 tmp]# mv 12.txt /root/2.txt [root@aminglinux-01 tmp]# ls /root/2.txt anaconda-ks.cfg.1[root@aminglinux-01 tmp]# 如果移动的位置已经有一个相同文件名的文件，也是会提示覆盖的。输入mv的绝对路径就不会提示了。[root@aming1 ~]# mv 123.txt 111.txt[root@aming1 ~]# mv 111.txt 111.txtmv: “111.txt” 与”111.txt” 为同一文件[root@aming1 ~]# mv 456.txt 111.txtmv：是否覆盖”111.txt”？ y 另外如果移动相同文件夹里面如果有文件，那么是会报错目录非空。无法覆盖。文件查看cat_more_less_head_tail 2.13 cat 用cat查看一个文件的内容[root@aming1 ~]# cat 111.txt root:x:0:0:root:/root:/bin/bashbin:x:1:1:bin:/bin:/sbin/nologindaemon:x:2:2:daemon:/sbin:/sbin/nologinadm:x:3:4:adm:/var/adm:/sbin/nologinlp:x:4:7:lp:/var/spool/lpd:/sbin/nologinsync:x:5:0:sync:/sbin:/bin/syncshutdown:x:6:0:shutdown:/sbin:/sbin/shutdownhalt:x:7:0:halt:/sbin:/sbin/haltmail:x:8:12:mail:/var/spool/mail:/sbin/nologinoperator:x:11:0:operator:/root:/sbin/nologingames:x:12:100:games:/usr/games:/sbin/nologinftp:x:14:50:FTP User:/var/ftp:/sbin/nologinnobody:x:99:99:Nobody:/:/sbin/nologinsystemd-bus-proxy:x:999:997:systemd Bus Proxy:/:/sbin/nologinsystemd-network:x:192:192:systemd Network Management:/:/sbin/nologindbus:x:81:81:System message bus:/:/sbin/nologinpolkitd:x:998:996:User for polkitd:/:/sbin/nologintss:x:59:59:Account used by the trousers package to sandbox the tcsd daemon:/dev/null:/sbin/nologinpostfix:x:89:89::/var/spool/postfix:/sbin/nologinsshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologinchrony:x:997:995::/var/lib/chrony:/sbin/nologin[root@aming1 ~]# cat -n 显示行号 [root@aming1 ~]# cat -n 111.txt 1 root:x:0:0:root:/root:/bin/bash 2 bin:x:1:1:bin:/bin:/sbin/nologin 3 daemon:x:2:2:daemon:/sbin:/sbin/nologin 4 adm:x:3:4:adm:/var/adm:/sbin/nologin 5 lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin 6 sync:x:5:0:sync:/sbin:/bin/sync 7 shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown 8 halt:x:7:0:halt:/sbin:/sbin/halt 9 mail:x:8:12:mail:/var/spool/mail:/sbin/nologin 10 operator:x:11:0:operator:/root:/sbin/nologin 11 games:x:12:100:games:/usr/games:/sbin/nologin 12 ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin 13 nobody:x:99:99:Nobody:/:/sbin/nologin 14 systemd-bus-proxy:x:999:997:systemd Bus Proxy:/:/sbin/nologin 15 systemd-network:x:192:192:systemd Network Management:/:/sbin/nologin 16 dbus:x:81:81:System message bus:/:/sbin/nologin 17 polkitd:x:998:996:User for polkitd:/:/sbin/nologin 18 tss:x:59:59:Account used by the trousers package to sandbox the tcsd daemon:/dev/null:/sbin/nologin 19 postfix:x:89:89::/var/spool/postfix:/sbin/nologin 20 sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin 21 chrony:x:997:995::/var/lib/chrony:/sbin/nologin[root@aming1 ~]# tac 倒序查看一个文件[root@aming1 ~]# tac 111.txt chrony:x:997:995::/var/lib/chrony:/sbin/nologinsshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologinpostfix:x:89:89::/var/spool/postfix:/sbin/nologintss:x:59:59:Account used by the trousers package to sandbox the tcsd daemon:/dev/null:/sbin/nologinpolkitd:x:998:996:User for polkitd:/:/sbin/nologindbus:x:81:81:System message bus:/:/sbin/nologinsystemd-network:x:192:192:systemd Network Management:/:/sbin/nologinsystemd-bus-proxy:x:999:997:systemd Bus Proxy:/:/sbin/nologinnobody:x:99:99:Nobody:/:/sbin/nologinftp:x:14:50:FTP User:/var/ftp:/sbin/nologingames:x:12:100:games:/usr/games:/sbin/nologinoperator:x:11:0:operator:/root:/sbin/nologinmail:x:8:12:mail:/var/spool/mail:/sbin/nologinhalt:x:7:0:halt:/sbin:/sbin/haltshutdown:x:6:0:shutdown:/sbin:/sbin/shutdownsync:x:5:0:sync:/sbin:/bin/synclp:x:4:7:lp:/var/spool/lpd:/sbin/nologinadm:x:3:4:adm:/var/adm:/sbin/nologindaemon:x:2:2:daemon:/sbin:/sbin/nologinbin:x:1:1:bin:/bin:/sbin/nologinroot:x:0:0:root:/root:/bin/bash 其他用法可以man cat一下。more 也是查看文件内容的，但是不会像cat一样全部显示出来。 它会一屏一屏的显示。按空格键下翻页。 看完之后就自动退出来了。 按Ctrl+b键是向上翻页。[root@aminglinux-01 ~]# more /etc/profile# /etc/profile System wide environment and startup programs, for login setup# Functions and aliases go in /etc/bashrcIt’s NOT a good idea to change this file unless you know what you# are doing. It’s much better to create a custom.sh shell script in# /etc/profile.d/ to make custom changes to your environment, as this# will prevent the need for merging in future updates.pathmunge () { case “:${PATH}:” in :”$1”:) ;; *) if [ “$2” = “after” ] ; then PATH=$PATH:$1 else PATH=$1:$PATH fi esac} –More–(66%)less命令 less的命令的用法包含了more的用法，同时可以用方向键来一行一行的翻页。翻到尾部不会自动退出来。 按q可以退出。 按“g”定位到行首 按“G”定位到行尾 还可以搜索内容输入：/或者？“单词” 比如/and或？and 搜索下面文件内容所有的and都会高亮显示。 按“n”像下查询查找内容 按“N”从下向上查询查找内容head 命令 tail 命令 head 命令查看文件的头十行 tail 命令查看文件的尾十行 tail 和head都是可以输入-n 来指定看几行的。比如只看两行。[root@aming1 ~]# head -n2 111.txt root:x:0:0:root:/root:/bin/bashbin:x:1:1:bin:/bin:/sbin/nologin[root@aming1 ~]# wc -l 命令,显示一个文件的行数 [root@aming1 ~]# wc -l 111.txt21 111.txt 追加重定向：前面命令的输出内容 &gt;&gt; 追加到目标文件内容的后面。 分别查看1.txt与2.txt[root@aming1 ~]# cat 1.txt 11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111[root@aming1 ~]# cat 2.txt 22222222222222222222 把查看1.txt的输出追加重定向到2.txt后查看，[root@aming1 ~]# cat 1.txt &gt;&gt; 2.txt[root@aming1 ~]# cat 2.txt2222222222222222222211111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111]]></content>
      <tags>
        <tag>工作日志</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[9月12日 2.6--2.9 相对与绝对路径 cd命令 创建和删除目录mkdir/rmdir rm命令]]></title>
    <url>%2F2018%2F12%2F09%2F9%E6%9C%8812%E6%97%A5%20%E7%9B%B8%E5%AF%B9%E4%B8%8E%E7%BB%9D%E5%AF%B9%E8%B7%AF%E5%BE%84%20%20cd%E5%91%BD%E4%BB%A4%20%E5%88%9B%E5%BB%BA%E5%92%8C%E5%88%A0%E9%99%A4%E7%9B%AE%E5%BD%95mkdirrmdir%20%20rm%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[绝对路径 ：以根“/”开头的路径都是绝对路径。[root@aminglinux-01 ~]# ls /root/.ssh/authorized_keys/root/.ssh/authorized_keys 不管在那个路径下，都能都能通过绝对路径找到文件。从根“/”开始任何文件都有绝对路径。 相对路径 ：相对于当前目录的路径，不是从根“/”开始的路径[root@aminglinux-01 ~]# cd /etc/sysconfig/ [root@aminglinux-01 sysconfig]# ls network-scripts/ifcfg-ens33 network-scripts/ifcfg-ens33 [root@aminglinux-01 sysconfig]# pwd /etc/sysconfig pwd命令是用来显示当前路径，当前的目录是哪里。 cd 是切换目录的命令2.7 cd命令 cd 切换目录命令。change directory 的缩写 cd - ：这个命令的就是切换上一次目录的所在位置。切换非常方便。 [root@localhost ~]# cd - / [root@localhost /]# cd - /root [root@localhost ~]# cd - /[root@localhost /]# cd -/root[root@localhost ~]# 直接输入命令：cd无论在哪个目录下，输入cd都会回到登陆系统的用户的家目录下。 [root@localhost ~]# pwd /root[root@localhost ~]# cd [root@localhost ~]# pwd /root[root@localhost ~]# 命令：cd ~同样是直接返回用户的家目录 命令：cd ..返回上一层目录 其他选项不常用，可以man cd 来查看用法。2.8 创建和删除目录 创建目录 mkdir mkdir是make directory的缩写 [root@localhost ~]# ls anaconda-ks.cfg[root@localhost ~]# mkdir 1.txt [root@localhost ~]# ls 1.txt anaconda-ks.cfg [root@localhost ~]# mkdir -p 创建连续的文件夹正常用mkdir创建连续的文件夹是不可以的，如下 [root@localhost ~]# mkdir 11/22/33/44/55 mkdir: 无法创建目录”11/22/33/44/55”: 没有那个文件或目录[root@localhost ~]# 加-p 属性即可创建成功 [root@localhost ~]# mkdir -p 11/22/33/44/55[root@localhost ~]# tree.├── 11│ └── 22│ └── 33│ └── 44│ └── 55├── 1.txt└── anaconda-ks.cfg 6 directories, 1 file[root@localhost ~]# mkdir -pv 创建连续的文件夹并显示创建过程 [root@localhost ~]# mkdir -pv 111/222/333/444/555 mkdir: 已创建目录 “111” mkdir: 已创建目录 “111/222” mkdir: 已创建目录 “111/222/333” mkdir: 已创建目录 “111/222/333/444” mkdir: 已创建目录 “111/222/333/444/555” [root@localhost ~]# 删除目录 rmdirrmdir是remove directory的缩写 rmdir 直接运行时不能删除非空目录，也就是只能删除空文件夹，如下 root@localhost ~]# rmdir /tmp/aminglinux/ rmdir: 删除 “/tmp/aminglinux/“ 失败: 目录非空 [root@localhost ~]# touch /tmp/aminglinux/222/aaa/2.txt [root@localhost ~]# rmdir /tmp/aminglinux/222/aaa/ rmdir: 删除 “/tmp/aminglinux/222/aaa/“ 失败: 目录非空 [root@localhost ~]# rmdir -p 也是可以连续删除空文件夹的。但必须是空的，如果是非空则删不掉，只删除空的 [root@aminglinux-01 ~]# mkdir -p /tmp/aminglinux/222/yyyy/uuuu/iiii/ [root@aminglinux-01 ~]# rmdir -pv /tmp/aminglinux/222/yyyy/uuuu/iiii/ rmdir: 正在删除目录 “/tmp/aminglinux/222/yyyy/uuuu/iiii/“ rmdir: 正在删除目录 “/tmp/aminglinux/222/yyyy/uuuu”rmdir: 正在删除目录 “/tmp/aminglinux/222/yyyy”rmdir: 正在删除目录 “/tmp/aminglinux/222”rmdir: 删除目录 “/tmp/aminglinux/222” 失败: 目录非空 mdir只能删除目录，而且必须是空目录，要想全部删除只能先删除里面的文件夹后者是文件。-p 比较危险，一般不用。 2.9 rm命令之前学习的rmdir 删除局限性是比较大的。这回试试rm命令能否顺利删除有文件的目录呢 [root@aminglinux-01 ~]# tree /tmp/aminglinux//tmp/aminglinux/ ├── 111 │ └── 222 │ └── 333 └── 222 └── aaa ├── 1.txt └── bbb └── ccc 7 directories, 1 file[root@aminglinux-01 ~]# rm /tmp/aminglinux/222/ rm: 无法删除”/tmp/aminglinux/222/“: 是一个目录 [root@aminglinux-01 ~]# rm -r /tmp/aminglinux/222/ rm：是否进入目录”/tmp/aminglinux/222/“? y rm：是否进入目录”/tmp/aminglinux/222/aaa”? y rm：是否进入目录”/tmp/aminglinux/222/aaa/bbb”? y rm：是否删除目录 “/tmp/aminglinux/222/aaa/bbb/ccc”？y rm：是否删除目录 “/tmp/aminglinux/222/aaa/bbb”？y rm：是否删除普通空文件 “/tmp/aminglinux/222/aaa/1.txt”？y rm：是否删除目录 “/tmp/aminglinux/222/aaa”？y rm：是否删除目录 “/tmp/aminglinux/222/“？y [root@aminglinux-01 ~]# tree /tmp/aminglinux/ /tmp/aminglinux/└── 111 └── 222 └── 3333 directories, 0 files[root@aminglinux-01 ~]#可以看到rm 是不能直接删有文件的目录的。但是加上-r指令，就可以可以全部删除啦。 可以看到文件1.txt也是被直接删除了。如果加上-f命令就会强制性删除，不会问是否删除文件，这样省去如果文件夹或文件过多一直问下去的麻烦。 总结rm 只删除目录里面的文件 rm -r删除所有目录以及文件 rm -f强制删除文件，不提示是否删除 rm -v显示删除过程 rm -rfv 指令可以叠加使用，效果叠加。]]></content>
      <tags>
        <tag>工作日志</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[9月11日 系统目录 文件类型 ls alias 命令]]></title>
    <url>%2F2018%2F12%2F07%2F%E7%B3%BB%E7%BB%9F%E7%9B%AE%E5%BD%95%20%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B%20ls%E5%91%BD%E4%BB%A4%20alias%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[系统目录结构linux系统目录结构图：http://www.apelearn.com/study_v2/linux_dir_tree.jpg /bin ：里面装的是用户用的命令，root也可以用 /sbin ：里面是只有root能用的命令。 /boot ：系统启动的相关文件，里面有系统启动的关键文件，删除后系统无法启动 /dev ：linux系统下的设备文件 /etc ：配置文件的所在目录/home ：用户的家目录/lib :存系统库文件的/lib64 :存系统的库文件 很多命令都会依赖一些库，查看命令依赖关系：ldd /media : 媒介目录。默认是空的。比如插一个U盘会自动放到这个目录下面去 /mnt ： 临时挂载目录，默认也是空的。可以把新增的光驱或硬盘挂载这个目录下面 /opt ： 空目录/proc ：里面是一些系统进程/root ：root用户的家目录 /run ：一些进程产生的临时文件，重启就会消失的文件/srv ：空的，存服务产生的文件/sys ：存系统内核的相关文件/tmp ：系统的临时目录，任何一个用户都可以在这个文件夹下读写删除文件。 /usr ：用户的文件， /var ：是一个很重要的目录。 经常用的/var/log ，系统日志。 从centOS7系统以后，就不再区分32位和64位版本，都是64位系统。 总结：/bin，/sbin,/etc,/var,/usr/local这几个目录是用的最多的。常用的。 tree命令：以树形的形式显示一个目录下面都有哪些目录和子文件 如果系统没有tree命令就用yum下载一下 [root@aminglinux-01 /]# yum install -y tree tree -L 是可以设置显示最大层数。 下面试一下只显示两层目录下的结构 [root@aming1 /]# tree -L 2.├── bin -&gt; usr/bin ├── boot │ ├── config-3.10.0-514.el7.x86_64 │ ├── grub │ ├── grub2 │ ├── initramfs-0-rescue-b1022dedd3b74686922ac31f3e680f36.img │ ├── initramfs-3.10.0-514.el7.x86_64.img │ ├── initramfs-3.10.0-514.el7.x86_64kdump.img │ ├── initrd-plymouth.img │ ├── symvers-3.10.0-514.el7.x86_64.gz │ ├── System.map-3.10.0-514.el7.x86_64 │ ├── vmlinuz-0-rescue-b1022dedd3b74686922ac31f3e680f36 │ └── vmlinuz-3.10.0-514.el7.x86_64 ├── dev │ ├── agpgart │ ├── autofs │ ├── block │ ├── bsg │ ├── btrfs-control ls命令ls命令是列取目录或者文件的命令 可以列取一下系统根目录看一下Linux系统都有哪些目录 [root@aming1 /]# ls /bin boot dev etc home lib lib64 media mnt opt proc root run sbin srv sys tmp usr varls命令总结ls -l :列取详细信息 ls -i :列取inode ls -lh :看文件大小更直观 ls -la :列出隐藏文件 ls -lta: t是时间的意思，按时间顺序排列 ls -ld :只列出文件夹 ls命令详解ls -l :列取详细信息（ll命令就是ls -l的缩写）在inode使用量前面11位。第一位表示文件类型，后面九位表示文件权限，最后一个（.）是受制于selinux。如果关闭selinux，新建的文件或目录就会没有(.) [root@aminglinux-01 ~]# ls -l 总用量 4 - rw-------. 1 root root 1422 5月 12 23:06 anaconda-ks.cfg 文件类型 权限 .(selinux) 有几个文件使用了这个inode 所有者 所属组 文件大小 最后改动日期 文件名字 ls -i :列取inode 文件名字前面的数字就是inode号，inode号是储存除了文件名以外的所有文件信息，都存在inode之中。 [root@aming1 ~]# ls 123.txt anaconda-ks.cfg test.txt[root@aming1 ~]# ls -i33599795 123.txt 33574987 anaconda-ks.cfg 33599785 test.txt ls -lh :显示文件大小更直观[root@aming1 ~]# ls -l 总用量 12 -rw-r–r–. 1 root root 96 4月 25 21:33 123.txt-rw——-. 1 root root 1422 3月 17 19:03 anaconda-ks.cfg-rw-r–r–. 1 root root 1008 4月 26 15:30 test.txt [root@aming1 ~]# ls -lh 总用量 12K -rw-r–r–. 1 root root 96 4月 25 21:33 123.txt-rw——-. 1 root root 1.4K 3月 17 19:03 anaconda-ks.cfg-rw-r–r–. 1 root root 1008 4月 26 15:30 test.txt ls -la :列出隐藏文件[root@aming1 ~]# ls -la总用量 40dr-xr-x—. 3 root root 194 4月 26 15:30 .dr-xr-xr-x. 17 root root 224 4月 26 15:29 ..-rw-r–r–. 1 root root 96 4月 25 21:33 123.txt-rw——-. 1 root root 1422 3月 17 19:03 anaconda-ks.cfg-rw——-. 1 root root 2550 5月 11 20:55 .bash_history-rw-r–r–. 1 root root 18 12月 29 2013 .bash_logout-rw-r–r–. 1 root root 176 12月 29 2013 .bash_profile-rw-r–r–. 1 root root 176 12月 29 2013 .bashrc-rw-r–r–. 1 root root 100 12月 29 2013 .cshrcdrwx——. 2 root root 48 5月 11 10:42 .ssh-rw-r–r–. 1 root root 129 12月 29 2013 .tcshrc-rw-r–r–. 1 root root 1008 4月 26 15:30 test.txt-rw——-. 1 root root 1609 4月 25 21:33 .viminfo 其中.开头的文件都是隐藏文件或者目录。 还有两个目录 点和点点 。“.”代表是当前目录 “..”代表的是上层目录 ls -lt ，t是时间的意思，按时间顺序排列,时间越近排在越前面[root@aming1 ~]# ls -lt 总用量 12 -rw-r–r–. 1 root root 1008 4月 26 15:30 test.txt -rw-r–r–. 1 root root 96 4月 25 21:33 123.txt -rw——-. 1 root root 1422 3月 17 19:03 anaconda-ks.cfg ls -ld :只列出文件夹 也可以同时使用 ls -liat [root@aming1 ~]# ls -liat 总用量 40 33574979 -rw——-. 1 root root 2550 5月 11 20:55 .bash_history 50332748 drwx——. 2 root root 48 5月 11 10:42 .ssh 33599785 -rw-r–r–. 1 root root 1008 4月 26 15:30 test.txt33574977 dr-xr-x—. 3 root root 194 4月 26 15:30 . 64 dr-xr-xr-x. 17 root root 224 4月 26 15:29 ..33599796 -rw——-. 1 root root 1609 4月 25 21:33 .viminfo 33599795 -rw-r–r–. 1 root root 96 4月 25 21:33 123.txt 33574987 -rw——-. 1 root root 1422 3月 17 19:03 anaconda-ks.cfg 33975719 -rw-r–r–. 1 root root 18 12月 29 2013 .bash_logout33975720 -rw-r–r–. 1 root root 176 12月 29 2013 .bash_profile33975721 -rw-r–r–. 1 root root 176 12月 29 2013 .bashrc33975722 -rw-r–r–. 1 root root 100 12月 29 2013 .cshrc33975723 -rw-r–r–. 1 root root 129 12月 29 2013 .tcshrc[root@aming1 ~]# 其他命令选项使用也有很多，但是不常用，需要的时候可以man一下进行查看 文件类型文件属性前面第一排就是文件类型，就是在权限前面的 常见的就是： - 是普通文件 d 文件夹 还有一些特殊的文件c : 字符串设备 l : 软连接文件 b : 块设备，比如光盘，磁盘 s : 通信文件 [root@aminglinux-01 ~]# ls -l /dev/ 总用量 0 crw-rw—-. 1 root video 10, 175 8月 4 20:53 agpgart crw——-. 1 root root 10, 235 8月 4 20:53 autofs drwxr-xr-x. 2 root root 140 8月 4 20:53 blockdrwxr-xr-x. 2 root root 80 8月 4 20:53 bsgcrw——-. 1 root root 10, 234 8月 4 20:53 btrfs-controldrwxr-xr-x. 3 root root 60 8月 4 20:53 buslrwxrwxrwx. 1 root root 3 8月 4 20:53 cdrom -&gt; sr0drwxr-xr-x. 2 root root 3020 8月 4 20:53 charcrw——-. 1 root root 5, 1 8月 4 20:53 consolesrw-rw-rw-. 1 root root 0 8月 4 20:53 loglrwxrwxrwx. 1 root root 11 8月 4 20:53 core -&gt; /proc/kcore alias命令alias 就是 命令的别名,是命令加选线得组合。可以理解给一个很长的命令设置一个简单外号，这样可以方便操作。 alias的作用就是，可以简写命令。 用which来查看命令的别名 [root@aminglinux-01 ~]# which lsalias ls=’ls –color=auto’ /usr/bin/ls[root@aminglinux-01 ~]# which ll alias ll=’ls -l –color=auto’ /usr/bin/ls 可以输入alias来看系统有别名的命令有哪些 [root@aming1 ~]# alias alias cp=’cp -i’alias egrep=’egrep –color=auto’alias fgrep=’fgrep –color=auto’alias grep=’grep –color=auto’alias l.=’ls -d .* –color=auto’alias ll=’ls -l –color=auto’alias ls=’ls –color=auto’alias mv=’mv -i’alias rm=’rm -i’alias which=’alias | /usr/bin/which –tty-only –read-alias –show-dot –show-tilde’ 自定义一个别名的格式 ：“ alias aming=’ls -lha’ ” [root@aminglinux-01 ~]# aming -bash: aming: 未找到命令[root@aminglinux-01 ~]# alias aming=’ls -lha’[root@aminglinux-01 ~]# aming 总用量 28K dr-xr-x—. 3 root root 147 8月 3 09:24 .dr-xr-xr-x. 17 root root 224 8月 3 21:06 ..-rw——-. 1 root root 1.4K 7月 31 23:06 anaconda-ks.cfg-rw——-. 1 root root 1.4K 8月 4 16:45 .bash_history-rw-r–r–. 1 root root 18 12月 29 2013 .bash_logout-rw-r–r–. 1 root root 176 12月 29 2013 .bash_profile-rw-r–r–. 1 root root 176 12月 29 2013 .bashrc-rw-r–r–. 1 root root 100 12月 29 2013 .cshrcdrwx——. 2 root root 80 8月 3 22:17 .ssh-rw-r–r–. 1 root root 129 12月 29 2013 .tcshrc 可以看到没有设置别名的时候直接输入aming是不起作用的。可以用which来看一下 [root@aminglinux-01 ~]# which aming alias aming=’ls -lha’ /usr/bin/ls取消aming的别名 用unalias命令 [root@aminglinux-01 ~]# unalias aming[root@aminglinux-01 ~]# aming-bash: aming: 未找到命令]]></content>
      <tags>
        <tag>工作日志</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[9月7日 1.12 linux 远程登录]]></title>
    <url>%2F2018%2F12%2F06%2F1.12%20linux%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E7%99%BB%E5%BD%95%2F</url>
    <content type="text"><![CDATA[下载PuTTY 下载地址：https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html 使用PuTTY 设置PuTTY 修改默认终端保存的显示行数，默认显示200行，在查看的文件如果很长超过200行就非常不方便了，可自定义行数 设置字体，大小适中 修改字符编码。一般用UTF-8，这样在输出中文的时候不会乱码 设置完成后点Session回主页面，点击Save保存 PuTTY的密钥连接 使用PuTTYgen工具 （在windows搜一下，与putty一起下载安装好的） 打开后点击Generate,生成密钥对，在进度条时候鼠标要一直移动，不然会非常慢 公钥复制下来就可以了，私钥必须保存一下点：Save private Key，保存在电脑一个比较安全的地方 把公钥放到linux下 [root@localhost ~]# mkdir /root/.ssh [root@localhost ~]# chmod 700 /root/.ssh [root@localhost ~]# vi /root/.ssh/authorized_keys 然后把公钥复制进去保存退出 还要关闭防火墙selinux [root@localhost ~]# setenforce 0 然后配置私钥到PuTTY,选完了一定要返回首页保存一下，点一下Save，不然下次还要重新配置 然后Open一下，输入用户名密码，以及私钥的加密密码就OK啦 二、Xshell下载 这里是列表文本官网下载地址：https://www.netsarang.com/download/down_form.html?code=522 直接在页面中有红色*号的地方输入个人信息，licensetype 必须选 Home and School use（家庭和个人使用），最主要的是输入邮箱（必须是个人的可以接收邮件的邮箱，会给你发邮件），最后的Productkey可以不用填写，然后点击提交； 之后邮箱会接到一个链接，点开后会直接下载，这样不会出现评估过期等问题 输入IP和端口 在这里可以直接自动登陆保存好登陆的用户及密码红色框部分是可以切换登陆模式，比如密钥登陆等 其他设置，配色方案不要改，其他根据自己的需求去调整 PuTTY优点，可以保存用户名密码，自动连接比较方便。多窗口切换非常方便。 Xshell的密钥验证点击软件的 工具&gt;新建用户密钥生成向导 这样公钥就生成了 这个密钥同样要写到 [root@localhost ~]# vi /root/.ssh/authorized_keys这个里面去的 然后需要在用户身份验证方法改成Public Key模式如操作完成点击连接]]></content>
      <tags>
        <tag>工作日志</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[9月6日 1.6-1.8 配置ip]]></title>
    <url>%2F2018%2F12%2F06%2F1.6%20-1.8%20%E9%85%8D%E7%BD%AEip%2F</url>
    <content type="text"><![CDATA[因为在学习过程和工作的时候直接用键盘鼠标连接服务器是不现实的，所以需要配置固定IP来进行远程连接。 首先把虚拟机的网络改成NET模式，优点是物理机切换网络不影响虚拟机连接外网。除了有限制的网络环境公司或校园网等。 进入系统后先dhclient自动获取一个IP地址。然后ip add 或者ifconfig命令查看网卡信息。 如果dhclient进程占用可以dhclient -r 杀死然后在运行dhclient 如果centOS7里没有ifconfig这个命令，就安装一下：yum install -y net-tools 获取到IP地址之后查看 网关 查看网关命令：route -n 或者点击虚拟机的 编辑&gt;虚拟网络编辑器&gt;NET设置 看下网关 配置静态IP 首先用vi编辑器编辑一下网卡的配置，把刚刚获取到得IP,子网，网关等填写到网卡得配置文件里，可以永久设置静态IP。 * 编辑网卡输入 vi /etc/sysconfig/network-scripts/ifcfg-ens33 TYPE=Ethernet BOOTPROTO=static 默认是dhcp改成静态static DEFROUTE=yes PEERDNS=yes PEERROUTES=yes IPV4_FAILURE_FATAL=no IPV6INIT=yes IPV6_AUTOCONF=yes IPV6_DEFROUTE=yes IPV6_PEERDNS=yes IPV6_PEERROUTES=yes IPV6_FAILURE_FATAL=no IPV6_ADDR_GEN_MODE=stable-privacy NAME=ens33 UUID=a2546330-9655-40b0-b84a-9bec807ac428 DEVICE=ens33 ONBOOT=yes 开机自起 默认是no改成yes IPADDR=192.168.159.128 添加IP NETMASK=255.255.255.0 添加子网 GATEWAY=192.168.159.2 添加网关 DNS1=119.29.29.29按Esc退出编辑模式输入：wq 保存退出 以上是永久设置IP,用以下命令可以暂时设置IP地址 例如 ：ifconfig ens33 192.168.234.129/24 命令行设置ip (重启后失效，改配置文件才会永久生效) 然后重启网络服务systemctl restart network * ping 下百度网址看通不通，用物理机ping下虚拟机的IP看通不通讯。都可以ping通就配置完成 * 如果执行 service network restart 出现以下错误 Restarting network (via systemctl): Job for network.service failed. See &apos;systemctl status network.service&apos; and &apos;journalctl -xn&apos; for details. 这个可能是网卡配置信息得MAC地址不对，ipadd 查看一下网卡得mac地址，然后对比配置文件如果不对需要修改 网络问题排查 如果以上不通讯，说明还是有问题存在的，需要进行网络问题排查 首先确认所在网络环境是否支持虚拟机网卡NET模式，如不支持则更换为桥接模式（虚拟机&gt;设置&gt;网络适配器） 然后重新获取下动态IP然后在网卡配置信息里设置静态IP 如果所在网络环境是可以正常使用NET模式，打开vi /etc/sysconfig/network-scripts/ifcfg-ens33网卡配置文件更改是否正确。 以上方法都不可以恢复，可以删除下虚拟8网卡重新添加 （编辑&gt;虚拟网络编辑器&gt;选中VMnet8移除网络&gt;添加VMnet8模式改为NET） 重新配置静态IP。]]></content>
      <tags>
        <tag>工作日志</tag>
      </tags>
  </entry>
</search>
